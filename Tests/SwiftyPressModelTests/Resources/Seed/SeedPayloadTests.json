{
    "posts": [
        {
            "id": 41276,
            "title": "Swifty Protocol-Oriented Dependency Injection",
            "slug": "swift-protocol-oriented-dependency-injection",
            "type": "post",
            "excerpt": "The key to dependency injection is protocols. From there sprouts many variations, flavours, and techniques. Although this is yet another dependency injection™ blog post, I would like to share a pure Swift, battle-tested DI implementation with no outside dependencies or magic. It combines protocol extension and type erasure to give you a solid, flexible dependency injection.",
            "content": "<p>The key to dependency injection is protocols &#8211; from there sprouts many variations, flavours, and techniques. Although this is <em>yet another dependency injection™</em> blog post, I would like to share a pure Swift, battle-tested DI implementation with no outside dependencies or magic. It combines protocol extension and type erasure to give you a solid, flexible dependency injection that works great with unit test and even frameworks.</p>\n<h2>The Dependency Container</h2>\n<p>The first thing we must do is come up with a container that will house all our dependencies. This will be referenced later from consumers to grab dependencies they want.</p>\n<pre class=\"lang:swift decode:true\">protocol Dependency {\r\n    func resolveService() -&gt; HTTPServiceType\r\n    \r\n    func resolveWorker() -&gt; AuthenticationWorkerType\r\n    func resolveService() -&gt; AuthenticationService\r\n    \r\n    func resolveWorker() -&gt; UsersWorkerType\r\n    func resolveStore() -&gt; UsersStore\r\n    func resolveCache() -&gt; UsersStore\r\n}</pre>\n<p>Now that we got the blueprint to our container and its dependency protocols, let&#8217;s implement the concrete dependency instances:</p>\n<pre class=\"lang:swift decode:true \">class CoreDependency: Dependency {\r\n    \r\n    func resolveService() -&gt; HTTPServiceType {\r\n        return HTTPService()\r\n    }\r\n    \r\n    func resolveWorker() -&gt; AuthenticationWorkerType {\r\n        return AuthenticationWorker(\r\n            service: resolveService()\r\n        )\r\n    }\r\n    \r\n    func resolveService() -&gt; AuthenticationService {\r\n        return AuthenticationNetworkService(\r\n            httpService: resolveService()\r\n        )\r\n    }\r\n    \r\n    func resolveWorker() -&gt; UsersWorkerType {\r\n        return UsersWorker(\r\n            store: resolveStore(),\r\n            cacheStore: resolveCache()\r\n        )\r\n    }\r\n    \r\n    func resolveStore() -&gt; UsersStore {\r\n        return UsersNetworkStore(\r\n            httpService: resolveService()\r\n        )\r\n    }\r\n    \r\n    func resolveCache() -&gt; UsersStore {\r\n        return UsersCoreDataStore() //..or use UsersRealmStore\r\n    }\r\n}</pre>\n<p>This is where the main meat of the dependency injection occurs. The dependency objects implement the protocols so the concrete types are hidden from the caller. This way, the dependency types can be swapped out underneath without affecting the rest of the application.</p>\n<p>Also notice that some dependencies reference other dependencies within the container. The implications of this is powerful because you are building a dependency graph and any part of it can be changed which will cascade.</p>\n<h2>The Dependencies</h2>\n<p>There are no singleton dependencies in our container because we always want to deal with immutable objects, otherwise state management will bite you later. Instead, its a factory serving fresh instances. The dependencies are <code>structs</code> that implement the protocols.</p>\n<p>Here&#8217;s an example of some of the dependencies:</p>\n<pre class=\"lang:swift decode:true\">protocol HTTPServiceType {...}\r\n\r\nstruct HTTPService: HTTPServiceType {\r\n    ...\r\n}\r\n\r\n///\r\n\r\nprotocol AuthenticationService {...}\r\n\r\nstruct AuthenticationNetworkService: AuthenticationService {\r\n    private let httpService: HTTPServiceType\r\n    \r\n    init(httpService: HTTPServiceType) {\r\n        self.httpService = httpService\r\n    }\r\n}\r\n\r\n///\r\n\r\nprotocol AuthenticationWorkerType {...}\r\n\r\nstruct AuthenticationWorker: AuthenticationWorkerType {\r\n    private let service: AuthenticationService\r\n    \r\n    init(service: AuthenticationService) {\r\n        self.service = service\r\n    }\r\n}</pre>\n<p>We&#8217;re using classic constructor injection to feed the dependencies in.</p>\n<p>The <code>HTTPService</code> dependency handles the raw network requests/responses and where you would <code>import Alamofire</code> for example. Never leak your 3rd-party dependencies to the rest of the app! Instead, encapsulate it under one of your custom dependencies. That&#8217;s what <code>HTTPService</code> will do for <code>Alamofire</code>.</p>\n<p>Now based on our dependency container, <code>HTTPService</code> gets injected into <code>AuthenticationNetworkService</code> so it can make the REST API endpoint calls. It doesn&#8217;t know that it&#8217;s using <code>Alamofire</code> underneath and can be completely swapped out for another network library or <code>URLSession</code>.</p>\n<p>From here, <code>AuthenticationNetworkService</code> gets injected into <code>AuthenticationWorker</code> that gets referenced by the rest of the app. This way, the REST API server or endpoints can be completely swapped out and your app wouldn&#8217;t have to know. It would still call the <code>AuthenticationWorker</code> API&#8217;s.</p>\n<h2>The Injection</h2>\n<p>It&#8217;s now time to start using our dependency container. We will use a protocol extension to pass in the dependency container so the caller can start resolving the dependency types it wants.</p>\n<p>We need a singleton to hold a reference to the dependency container. So although we couldn&#8217;t get away from singletons altogether, the dependency container is a factory and still serving immutable instances.</p>\n<pre class=\"lang:swift decode:true\">/// The singleton dependency container reference\r\n/// which can be reassigned to another container\r\nstruct DependencyInjector {\r\n    static var dependencies: Dependency = CoreDependency()\r\n    private init() { }\r\n}\r\n\r\n/// Attach to any type for exposing the dependency container\r\nprotocol HasDependencies {\r\n    var dependencies: Dependency { get }\r\n}\r\n\r\nextension HasDependencies {\r\n    \r\n    /// Container for dependency instance factories\r\n    var dependencies: Dependency {\r\n        return DependencyInjector.dependencies\r\n    }\r\n}</pre>\n<p>The <code>DependencyInjector</code> should be configured early on in the app lifecycle. That way, your frameworks can have its own dependency container, such as <code>CoreDependency</code>, and consumers can override any of the dependencies it desires. This works great for consumers who want to use a different <code>UserDefaults</code> app group or Keychain access group.</p>\n<p>We do this in the <code>willFinishLaunchingWithOptions</code>:</p>\n<pre class=\"lang:swift decode:true\">extension UIApplicationDelegate {\r\n    \r\n    func configure(dependency: Dependency) {\r\n        DependencyInjector.dependencies = dependency\r\n    }\r\n}\r\n\r\n///\r\n\r\nclass AppDependency: CoreDependency {\r\n    \r\n    override func resolveCache() -&gt; UsersStore {\r\n        return UsersRealmStore()\r\n    }\r\n}\r\n\r\n///\r\n\r\n@UIApplicationMain\r\nclass AppDelegate: UIResponder, UIApplicationDelegate {\r\n\r\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]? = nil) -&gt; Bool {\r\n        configure(dependency: AppDependency())\r\n        return true\r\n    }\r\n}</pre>\n<p>Finally, the protocol extension for <code>HasDependencies</code> is used to provide the dependency container to whoever wants it:</p>\n<pre class=\"lang:swift decode:true\">class ViewController: UIViewController, HasDependencies {\r\n\r\n    private lazy var authenticationWorker: AuthenticationWorkerType = dependencies.resolveWorker()\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        authenticationWorker.login(with: \"whatever\") {\r\n            //completed\r\n        }\r\n    }\r\n}\r\n</pre>\n<h2>The Unit Test</h2>\n<p>Not only does this dependency injection work great for frameworks, but of course works great for unit tests. It can be configured on a global and scoped level too!</p>\n<p>For the global level of your unit tests, you can create a <code>TestDependency</code> that subclasses <code>CoreDependency</code>:</p>\n<pre class=\"lang:swift decode:true \">class TestDependency: CoreDependency {\r\n    \r\n    // Override with mocks, spy, or whatever\r\n    \r\n    override func resolveService() -&gt; AuthenticationService {\r\n        return AuthenticationTestService()\r\n    }\r\n}\r\n\r\nstruct AuthenticationTestService: AuthenticationService {\r\n    var isAuthorized: Bool {\r\n        return true\r\n    }\r\n    \r\n    func signup(with request: Any, completion: @escaping () -&gt; Void) {\r\n        print(\"AuthenticationTestService.signup\")\r\n    }\r\n    \r\n    func login(with request: Any, completion: @escaping () -&gt; Void) {\r\n        print(\"AuthenticationTestService.login\")\r\n    }\r\n    \r\n    func logout() {\r\n        \r\n    }\r\n}</pre>\n<p>You set this in your <code>setUp()</code> function of your test case:</p>\n<pre class=\"lang:swift decode:true \">class MyCore_Tests: XCTestCase, HasDependencies {\r\n    \r\n    override func setUp() {\r\n        super.setUp()\r\n        \r\n        // Use test dependency or even a scoped one to the test!\r\n        DependencyInjector.dependencies = TestDependency()\r\n    }\r\n}</pre>\n<p>What&#8217;s even more powerful is you can create a scoped dependency container for a specific test case, see <code>ScopedDependency</code>:</p>\n<pre class=\"lang:swift decode:true \">class MyCore_Tests: XCTestCase, HasDependencies {\r\n    \r\n    private lazy var authenticationWorker: AuthenticationWorkerType = dependencies.resolveWorker()\r\n    private lazy var usersWorker: UsersWorkerType = dependencies.resolveWorker()\r\n    \r\n    override func setUp() {\r\n        super.setUp()\r\n        \r\n        // Use test dependency or even a scoped one to the test!\r\n        DependencyInjector.dependencies = ScopedDependency()\r\n    }\r\n    \r\n    override func tearDown() {\r\n        super.tearDown()\r\n        \r\n        // Set dependencies back to what it was\r\n        DependencyInjector.dependencies = TestDependency()\r\n    }\r\n    \r\n    private class ScopedDependency: TestDependency {\r\n        \r\n        override func resolveService() -&gt; HTTPServiceType {\r\n            return MockHTTPService()\r\n        }\r\n    }\r\n    \r\n    private struct MockHTTPService: HTTPServiceType {\r\n        \r\n        public func post(url: String, parameters: [String: Any], headers: [String: String]?, completion: @escaping () -&gt; Void) {\r\n            //Blah, blah\r\n            print(\"MockHTTPService.post\")\r\n        }\r\n        \r\n        public func get(url: String, parameters: [String: Any], headers: [String: String]?, completion: @escaping () -&gt; Void) {\r\n            //Blah, blah\r\n            print(\"MockHTTPService.get\")\r\n        }\r\n    }\r\n}\r\n\r\nextension MyCore_Tests {\r\n    \r\n    func testAuthenticationExample() {\r\n        authenticationWorker.signup(with: \"whatever\") {\r\n            XCTAssertTrue(true)\r\n        }\r\n    }\r\n    \r\n    func testUserExample() {\r\n        usersWorker.fetchCurrent {\r\n            XCTAssertTrue(true)\r\n        }\r\n    }\r\n    \r\n}</pre>\n<h2>Conclusion</h2>\n<p>The combination of a dependency container, a protocol extension to expose it, and immutable dependencies give you a pure Swift DI that works well with frameworks and unit tests. See this <a href=\"https://github.com/iosmentor-io/Pure-Swift-DI\" target=\"_blank\" rel=\"noopener noreferrer\">working example</a> to try it out.</p>\n<p><em><strong>HAPPY CODING!!</strong></em></p>\n<h2>More Reading</h2>\n<ul>\n<li><a href=\"https://www.swiftbysundell.com/posts/dependency-injection-using-factories-in-swift\" target=\"_blank\" rel=\"noopener noreferrer\">Dependency injection using factories in Swift</a></li>\n<li><a href=\"http://www.danielhall.io/a-swift-y-approach-to-dependency-injection\" target=\"_blank\" rel=\"noopener noreferrer\">A Swift-y Approach to Dependency Injection</a></li>\n<li><a href=\"http://merowing.info/2017/04/using-protocol-compositon-for-dependency-injection/\" target=\"_blank\" rel=\"noopener noreferrer\">Using protocol compositon for dependency injection</a></li>\n</ul>\n",
            "link": "https://staging1.basememara.com/swift-protocol-oriented-dependency-injection/",
            "comment_count": 10,
            "author": 2,
            "featured_media": 41287,
            "terms": [
                80,
                62,
                50,
                55
            ],
            "meta": {
                "_series_part": "2"
            },
            "created": "2018-04-11T21:34:11",
            "modified": "2019-05-13T11:44:11"
        },
        {
            "id": 41373,
            "title": "Protocol-Oriented Themes for iOS Apps",
            "slug": "protocol-oriented-themes-for-ios-apps",
            "type": "post",
            "excerpt": "Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme. In this post, I'm going to show you the native way of theming an iOS app as intended by Apple that is often overlooked.",
            "content": "<p>Themes are usually downplayed as an after-thought instead of being an integral part of the development process. How many times have you inherited a codebase where the design team wants to tweak it, or business wants you to clone the app with a whole different theme. Then you look at the code&#8230;</p>\n<p><em>Color and font changes are sprinkled all over storyboards and views!!</em></p>\n<p>Ok you wish they had a bit more foresight when they were making the app the first time, but then they wouldn&#8217;t have reached out to you now right? In this post, I&#8217;m going to show you the native way of theming an iOS app as intended by Apple. It&#8217;s often overlooked, well because&#8230;</p>\n<h2>UIAppearance Sucks</h2>\n<p>I&#8217;m sure most of you have toyed with <a href=\"https://developer.apple.com/documentation/uikit/uiappearance\" target=\"_blank\" rel=\"noopener noreferrer\"><em>UIAppearance</em></a> and quickly gave up on it because of its limitations, especially if you&#8217;ve been spoiled with CSS stylesheets for web development or theme resources for Android apps. Apple&#8217;s way of theming is quite awkward, but it&#8217;s what we got and I urge you not to roll out your own or use yet another dependency.</p>\n<p>In a nutshell, <code>UIAppearance</code> allows you to style <em>UIKit</em> controls globally using a proxy, or a class that stands in as a placeholder which applies itself to the control when it gets added to the window hierarchy. For example, you can globally change labels to red text like this:</p>\n<pre class=\"lang:swift decode:true\">UILabel.appearance().textColor = .red</pre>\n<p>It&#8217;s like a static function that gets applied to all future instances. Though, it&#8217;s like a sledge hammer for a nail because it applies to <em>ALL</em> labels in the app, even in places you didn&#8217;t even know labels existed! This is where most people give up on <code>UIAppearance</code>.</p>\n<h2>UIAppearance Sucks&#8230; Well Kinda&#8230;</h2>\n<p>Apple&#8217;s answer to styles and themes is for you to subclass your <em>UIKit</em> controls and use <code>UIAppearance</code> on those custom controls like this:</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance().textColor = .red</pre>\n<p>That&#8217;s the awkward part, Apple wants you to use object-oriented programming to theme your apps. I don&#8217;t think they understood that a CSS-<em>class</em> isn&#8217;t really a <em>class</em> 🙄.</p>\n<p>You can take it one step further though:</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self]).textColor = .red</pre>\n<p>This will change the appearance of all <em>AppLabel&#8217;s</em> only contained in <em>MyCustomView&#8217;s</em>. So that&#8217;s your other option &#8211; to change your UI hierarchy to accommodate styling 🤦\u200d♂️. Why couldn&#8217;t they just add a new space-delimited string property called styles that gets realized by its children??</p>\n<p>Anyways, surprisingly things become really powerful when you start feeding <code>whenContainedInInstancesOf</code> an array of classes, which defines the hierarchy chain of the control. The specificity let&#8217;s you zero in on controls.</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance(whenContainedInInstancesOf: [MyViewController.self]).textColor = .blue\nAppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self]).textColor = .red\nAppLabel.appearance(whenContainedInInstancesOf: [MyCustomView.self, MyViewController.self]).textColor = .yellow</pre>\n<p>Another Apple awkwardness is that the outer most parent wins (unlike CSS and the rest of the world). So in the above example, <code>[MyViewController.self]</code> wins over <code>[MyCustomView.self]</code>, even though <code>MyCustomView</code> is the closest parent.</p>\n<p>The way it works is the selector starts from top-to-bottom of the hierarchy, which means when it first hits <code>MyViewController</code> it stops. The label will be blue, not red, even if it&#8217;s contained in a <code>MyCustomView</code>. Fortunately though, the longer your array is (the more specific it is), the higher priority it is. In this case, the labels in <code>MyCustomView</code> will be yellow if it is on the <code>MyViewController</code> screen.</p>\n<p>Once you understand and toy around with these quirks, it becomes a full-fledged styling framework!</p>\n<h2>Styleable Controls</h2>\n<p>First thing we must do is subclass all the controls we want to style in our app. Not the best use of object-oriented programming, but it&#8217;s native theming (<em>see rant above</em>). Here&#8217;s what I got:</p>\n<p><em>AppLabel.swift:</em></p>\n<pre class=\"lang:swift decode:true\">class AppLabel: UILabel {\n    \n}\n\nclass AppHeadline: UILabel {\n    \n}\n\nclass AppSubhead: UILabel {\n    \n}\n\nclass AppFootnote: UILabel {\n    \n}</pre>\n<p><em>AppButton.swift:</em></p>\n<pre class=\"lang:swift decode:true\">class AppButton: UIButton {\n    \n}\n\nclass AppDangerButton: UIButton {\n    \n}</pre>\n<p><em>AppSwitch.swift:</em></p>\n<pre class=\"lang:swift decode:true \">class AppSwitch: UISwitch {\n    \n}</pre>\n<p><em>AppView.swift:</em></p>\n<pre class=\"lang:swift decode:true\">class AppView: UIView {\n    \n}\n\nclass AppSeparator: UIView {\n    \n}</pre>\n<p>In our storyboard, we will now use these custom classes:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-500x281.png\" alt=\"\" width=\"500\" height=\"281\" class=\"aligncenter size-medium wp-image-41382\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-500x281.png 500w, https://staging1.basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class-768x432.png 768w, https://staging1.basememara.com/wp-content/uploads/2018/09/UIKit-Xcode-Custom-Class.png 854w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>However, we will not change colors in the storyboard.. leave them all on the defaults! Nor will we style and theme the custom controls in the <code>awakeFromNib()</code> event!</p>\n<p>Instead we will style our controls like this:</p>\n<pre class=\"lang:swift decode:true\">AppLabel.appearance().textColor = .red\nAppSubhead.appearance().textColor = .purple\nAppFootnote.appearance().textColor = .orange\n\nAppButton.appearance().setTitleColor(.green, for: .normal)\nAppButton.appearance().borderColor = .green\nAppButton.appearance().borderWidth = 1\nAppButton.appearance().cornerRadius = 3\n</pre>\n<p>This should take place in the <code>AppDelegate.willFinishLaunchingWithOptions</code> event so it can be ready before any controls are loaded into your app. You can call the <code>UIAppearance</code> proxy later to change your styles, but it will only apply to newly added controls to the window. All existing controls need to be removed and added back to have the new styles take effect (yes more quirks, but I have a helper below I will mention).</p>\n<h2>The Theme Protocol</h2>\n<p>We need swappable themes for our app right? Even if you only have one theme, designing it in such a way will allow you to maintain the styles much more easily and add different themes later.</p>\n<p>Here&#8217;s a protocol for the themes we can use:</p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    var tint: UIColor { get }\n    var secondaryTint: UIColor { get }\n    \n    var backgroundColor: UIColor { get }\n    var separatorColor: UIColor { get }\n    var selectionColor: UIColor { get }\n    \n    var labelColor: UIColor { get }\n    var secondaryLabelColor: UIColor { get }\n    var subtleLabelColor: UIColor { get }\n    \n    var barStyle: UIBarStyle { get }\n}</pre>\n<p>Then we can extend the protocol to change the appearance for controls using the above properties which themes will conform to. The extension can look something like:</p>\n<pre class=\"lang:swift decode:true\">extension Theme {\n    \n    func apply(for application: UIApplication) {\n        application.keyWindow?.tintColor = tint\n        \n        UITabBar.appearance().barStyle = barStyle\n        \n        UINavigationBar.appearance().barStyle = barStyle\n        UINavigationBar.appearance().tintColor = tint\n        UINavigationBar.appearance().titleTextAttributes = [\n            .foregroundColor: labelColor\n        ]\n        \n        if #available(iOS 11.0, *) {\n            UINavigationBar.appearance().largeTitleTextAttributes = [\n                .foregroundColor: labelColor\n            ]\n        }\n        \n        UICollectionView.appearance().backgroundColor = backgroundColor\n        UITableView.appearance().backgroundColor = backgroundColor\n        UITableView.appearance().separatorColor = separatorColor\n        UITableViewCell.appearance().backgroundColor = .clear\n        UITableViewCell.appearance().selectionColor = selectionColor\n        \n        UIView.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .backgroundColor = selectionColor\n        \n        UILabel.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .textColor = secondaryLabelColor\n        \n        AppLabel.appearance().textColor = labelColor\n        AppSubhead.appearance().textColor = secondaryLabelColor\n        AppFootnote.appearance().textColor = subtleLabelColor\n        \n        AppButton.appearance().borderColor = tint\n        AppButton.appearance().setTitleColor(tint, for: .normal)\n        AppButton.appearance().borderWidth = 1\n        AppButton.appearance().cornerRadius = 3\n        \n        AppDangerButton.appearance().borderWidth = 0\n        AppDangerButton.appearance().setTitleColor(labelColor, for: .normal)\n        AppDangerButton.appearance().backgroundColor = tint\n        \n        AppSwitch.appearance().tintColor = tint\n        \n        AppView.appearance().backgroundColor = backgroundColor\n        AppSeparator.appearance().backgroundColor = separatorColor\n        AppSeparator.appearance().alpha = 0.5\n    }\n}</pre>\n<p>And the themes that conform would only have to fill in the property values:</p>\n<pre class=\"lang:swift decode:true\">struct DarkTheme: Theme {\n    let tint: UIColor = .yellow\n    let secondaryTint: UIColor = .green\n    \n    let backgroundColor: UIColor = .black\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 38/255, green: 38/255, blue: 40/255, alpha: 1)\n    \n    let labelColor: UIColor = .white\n    let secondaryLabelColor: UIColor = .lightGray\n    let subtleLabelColor: UIColor = .darkGray\n    \n    let barStyle: UIBarStyle = .black\n}</pre>\n<p>Here&#8217;s what another theme would look like:</p>\n<pre class=\"lang:swift decode:true\">struct LightTheme: Theme {\n    let tint: UIColor = .blue\n    let secondaryTint: UIColor = .orange\n    \n    let backgroundColor: UIColor = .white\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 236/255, green: 236/255, blue: 236/255, alpha: 1)\n    \n    let labelColor: UIColor = .black\n    let secondaryLabelColor: UIColor = .darkGray\n    let subtleLabelColor: UIColor = .lightGray\n    \n    let barStyle: UIBarStyle = .default\n}</pre>\n<p>Finally you call the theme early in the app lifecycle:</p>\n<pre class=\"lang:swift decode:true \">@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    private let theme = DarkTheme()\n    \n    var window: UIWindow?\n\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&gt; Bool {\n        theme.apply(for: application)\n        return true\n    }\n}</pre>\n<p>There you have it &#8211; native, simple theming for your iOS app.. no dependency, magic, or singleton!</p>\n<h2>Extending Themes</h2>\n<p>What if one of your custom themes wants to add extra styling? Implementing the <code>func apply(for application: UIApplication)</code> on the theme will wipe out existing logic which is not what we want, so instead I can add a <code>func extend()</code> to the protocol and call it within the <code>apply(for:)</code> extension:</p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    ...\n    func apply(for application: UIApplication)\n    func extend()\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        ...\n        extend()\n    }\n    \n    func extend() {\n        // Optionally extend theme\n    }\n}</pre>\n<p>You see how <code>apply(for:)</code> calls <code>extend()</code> right in the protocol extension? Now the themes that conform can simply put their extended styling logic in <code>extend()</code>:</p>\n<pre class=\"lang:swift decode:true \">struct LightTheme: Theme {\n    ...\n}\n\nextension LightTheme {\n    \n    func extend() {\n        let proxy1 = UIImageView.appearance(whenContainedInInstancesOf: [UITableViewCell.self])\n        proxy1.borderColor = separatorColor\n        proxy1.borderWidth = 1\n        \n        let proxy2 = UIImageView.appearance(whenContainedInInstancesOf: [UIButton.self, UITableViewCell.self])\n        proxy2.borderWidth = 0\n    }\n}</pre>\n<h2>Changing Themes</h2>\n<p>Another reason why most people abandon <code>UIAppearance</code> is you can&#8217;t change styles for existing controls that are already loaded. Apple makes it clear in the <a href=\"https://developer.apple.com/documentation/uikit/uiappearance\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>:</p>\n<blockquote><p>iOS applies appearance changes when a view enters a window, it doesn’t change the appearance of a view that’s already in a window. To change the appearance of a view that’s currently in a window, remove the view from the view hierarchy and then put it back.</p></blockquote>\n<p>It&#8217;s pretty ridiculous that every single control has to be removed and added again to realize the new styles. After changing <code>UIAppearance</code> values, you have to traverse through the entire <code>UIWindow</code> hierarchy and remove/add  controls:</p>\n<pre class=\"lang:swift decode:true \">UIApplication.shared.windows.forEach { window in\n    window.subviews.forEach { view in\n        view.removeFromSuperview()\n        window.addSubview(view)\n    }\n}\n</pre>\n<p>It makes my stomach turn, but I guess users shouldn&#8217;t be changing themes often &#8211; plus it&#8217;s still native theming right?</p>\n<p>Take it one step further and turn it into an extension:</p>\n<pre class=\"lang:swift decode:true\">public extension UIWindow {\n    \n    /// Unload all views and add back.\n    /// Useful for applying `UIAppearance` changes to existing views.\n    func reload() {\n        subviews.forEach { view in\n            view.removeFromSuperview()\n            addSubview(view)\n        }\n    }\n}\n\npublic extension Array where Element == UIWindow {\n    \n    /// Unload all views for each `UIWindow` and add back.\n    /// Useful for applying `UIAppearance` changes to existing views.\n    func reload() {\n        forEach { $0.reload() }\n    }\n}</pre>\n<p>Now in your original <code>Theme</code> protocol, you can abstract it away:</p>\n<pre class=\"lang:swift decode:true\">protocol Theme {\n    ...\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        ...\n        \n        // Ensure existing views render with new theme\n        application.windows.reload()\n    }</pre>\n<p>Note that the first time the theme gets applied in <code>AppDelegate.willFinishLaunchingWithOptions</code>, the  <code>window</code> object won&#8217;t have any subviews in it so it will just be ignored. The <code>reload</code> will only run if called after <code>AppDelegate.willFinishLaunchingWithOptions</code>.</p>\n<h2>Beyond Colors</h2>\n<p>So far I&#8217;ve only emphasized colors, but you can style fonts with <code>UIAppearance</code>, but I prefer to only use the built-in ones in storyboard because it respects dynamic font sizes. If your designer insists, you&#8217;ll want to support accessibility which is a whole other topic.</p>\n<p>But did you know you can use <code>UIAppearance</code> on just about any property? You can even change text properties for all <code>UILabel</code> controls! Of course this would be obnoxious to do, but it&#8217;s possible:</p>\n<pre class=\"lang:swift decode:true \">UILabel.appearance().text = \"Hello World!\"</pre>\n<p>You could, however, add your own custom properties and set them via <code>UIAppearance</code> as well! Let&#8217;s take the selected highlight color for <code>UITableViewCell</code>. This is not a native property from <code>UIKit</code> unfortunately, so you&#8217;d have to do something like this:</p>\n<pre class=\"lang:swift decode:true \">let selectedView = UIView()\nselectedView.backgroundColor = .lightGray\n\nmyTableViewCell.selectedBackgroundView = selectedView</pre>\n<p>You could take it one step further and turn it into an extension:</p>\n<pre class=\"lang:swift decode:true \">extension UITableViewCell {\n    \n    /// The color of the cell when it is selected.\n    var selectionColor: UIColor? {\n        get { return selectedBackgroundView?.backgroundColor }\n        set {\n            guard selectionStyle != .none else { return }\n            selectedBackgroundView = UIView().with {\n                $0.backgroundColor = newValue\n            }\n        }\n    }\n}</pre>\n<p>When you try to update this property via <code>UIAppearance</code>, you&#8217;ll notice it doesn&#8217;t do anything. To expose your custom properties to <code>UIAppearance</code>, you have to add the <code>dynamic</code> keyword to the property to force the <em>Swift</em> compiler to use an <em>Objective-C</em> message that <code>UIAppearance</code> relies on:</p>\n<pre class=\"lang:swift decode:true \">extension UITableViewCell {\n    \n    /// The color of the cell when it is selected.\n    @objc dynamic var selectionColor: UIColor? {\n        get { return selectedBackgroundView?.backgroundColor }\n        set {\n            guard selectionStyle != .none else { return }\n            selectedBackgroundView = UIView().with {\n                $0.backgroundColor = newValue\n            }\n        }\n    }\n}</pre>\n<p>Now you can do this:</p>\n<pre class=\"lang:swift decode:true \">UITableViewCell.appearance().selectionColor = .init(red: 38/255, green: 38/255, blue: 40/255, alpha: 1)</pre>\n<p>At this point, we got everything we need.</p>\n<h2>Demo Time!</h2>\n<p>I put together a sample project with a segmented control to switch between themes:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png\" alt=\"\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-41397\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png 500w, https://staging1.basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-768x544.png 768w, https://staging1.basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-1024x725.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>The <code>Theme</code> protocol that does the heavy lifting looks like this:</p>\n<pre class=\"lang:swift decode:true \">protocol Theme {\n    var tint: UIColor { get }\n    var secondaryTint: UIColor { get }\n    \n    var backgroundColor: UIColor { get }\n    var separatorColor: UIColor { get }\n    var selectionColor: UIColor { get }\n    \n    var labelColor: UIColor { get }\n    var secondaryLabelColor: UIColor { get }\n    var subtleLabelColor: UIColor { get }\n    \n    var barStyle: UIBarStyle { get }\n    \n    func apply(for application: UIApplication)\n    func extend()\n}\n\nextension Theme {\n    \n    func apply(for application: UIApplication) {\n        application.keyWindow?.tintColor = tint\n        \n        UITabBar.appearance().with {\n            $0.barStyle = barStyle\n            $0.tintColor = tint\n        }\n        \n        UINavigationBar.appearance().with {\n            $0.barStyle = barStyle\n            $0.tintColor = tint\n            $0.titleTextAttributes = [\n                .foregroundColor: labelColor\n            ]\n            \n            if #available(iOS 11.0, *) {\n                $0.largeTitleTextAttributes = [\n                    .foregroundColor: labelColor\n                ]\n            }\n        }\n        \n        UICollectionView.appearance().backgroundColor = backgroundColor\n        \n        UITableView.appearance().with {\n            $0.backgroundColor = backgroundColor\n            $0.separatorColor = separatorColor\n        }\n        \n        UITableViewCell.appearance().with {\n            $0.backgroundColor = .clear\n            $0.selectionColor = selectionColor\n        }\n        \n        UIView.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .backgroundColor = selectionColor\n        \n        UILabel.appearance(whenContainedInInstancesOf: [UITableViewHeaderFooterView.self])\n            .textColor = secondaryLabelColor\n        \n        AppLabel.appearance().textColor = labelColor\n        AppHeadline.appearance().textColor = secondaryTint\n        AppSubhead.appearance().textColor = secondaryLabelColor\n        AppFootnote.appearance().textColor = subtleLabelColor\n        \n        AppButton.appearance().with {\n            $0.setTitleColor(tint, for: .normal)\n            $0.borderColor = tint\n            $0.borderWidth = 1\n            $0.cornerRadius = 3\n        }\n        \n        AppDangerButton.appearance().with {\n            $0.setTitleColor(backgroundColor, for: .normal)\n            $0.backgroundColor = tint\n            $0.cornerRadius = 3\n        }\n        \n        AppSwitch.appearance().with {\n            $0.tintColor = tint\n            $0.onTintColor = tint\n        }\n        \n        AppStepper.appearance().tintColor = tint\n        \n        AppSlider.appearance().tintColor = tint\n        \n        AppSegmentedControl.appearance().tintColor = tint\n        \n        AppView.appearance().backgroundColor = backgroundColor\n        \n        AppSeparator.appearance().with {\n            $0.backgroundColor = separatorColor\n            $0.alpha = 0.5\n        }\n        \n        AppView.appearance(whenContainedInInstancesOf: [AppView.self]).with {\n            $0.backgroundColor = selectionColor\n            $0.cornerRadius = 10\n        }\n        \n        // Style differently when inside a special container\n        \n        AppLabel.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = subtleLabelColor\n        AppHeadline.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = secondaryLabelColor\n        AppSubhead.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = secondaryTint\n        AppFootnote.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).textColor = labelColor\n        \n        AppButton.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.setTitleColor(labelColor, for: .normal)\n            $0.borderColor = labelColor\n        }\n        \n        AppDangerButton.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.setTitleColor(subtleLabelColor, for: .normal)\n            $0.backgroundColor = labelColor\n        }\n        \n        AppSwitch.appearance(whenContainedInInstancesOf: [AppView.self, AppView.self]).with {\n            $0.tintColor = secondaryTint\n            $0.onTintColor = secondaryTint\n        }\n        \n        extend()\n        \n        // Ensure existing views render with new theme\n        // https://developer.apple.com/documentation/uikit/uiappearance\n        application.windows.reload()\n    }\n    \n    func extend() {\n        // Optionally extend theme\n    }\n}</pre>\n<p>Then you can add as many themes as you want:</p>\n<pre class=\"lang:swift decode:true\">struct OceanTheme: Theme {\n    let tint: UIColor = .blue\n    let secondaryTint: UIColor = .orange\n    \n    let backgroundColor: UIColor = .cyan\n    let separatorColor: UIColor = .lightGray\n    let selectionColor: UIColor = .init(red: 38/255, green: 38/255, blue: 40/255, alpha: 1)\n    \n    let labelColor: UIColor = .magenta\n    let secondaryLabelColor: UIColor = .lightGray\n    let subtleLabelColor: UIColor = .darkGray\n    \n    let barStyle: UIBarStyle = .default\n}</pre>\n<p>Finally in my segmented control change event, I can simply change themes like this:</p>\n<pre class=\"lang:swift decode:true \">@IBAction func themeSegmentedControlChanged(_ sender: UISegmentedControl) {\n    let theme: Theme\n        \n    switch sender.selectedSegmentIndex {\n    case 1: theme = LightTheme()\n    case 2: theme = OceanTheme()\n    default: theme = DarkTheme()\n    }\n        \n    theme.apply(for: UIApplication.shared)\n}</pre>\n<p>The complete source code can be <a href=\"https://github.com/basememara/ThemeKit\" target=\"_blank\" rel=\"noopener noreferrer\">downloaded and run here</a>.</p>\n<h2>Conclusion</h2>\n<p><code>UIAppearance</code> has been around since iOS 5, but it is often overlooked and underestimated. Apple uses this framework to style its own apps, such as <em>Find Friends</em> and many other apps. Sticking with native functionality is always a good idea and hopefully I&#8217;ve given you a newfound appreciation for the built-in theming framework.</p>\n<p>To learn more about <code>UIAppearance</code>, check out these resources:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2011/114/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC 2011: Customizing the Appearance of UIKit Controls</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2012/216/\" target=\"_blank\" rel=\"noopener noreferrer\">WWDC 2012: Advanced Appearance Customization on iOS</a></li>\n<li><a href=\"https://spin.atomicobject.com/2017/08/16/uiappearance-container-hierarchies/\" target=\"_blank\" rel=\"noopener noreferrer\">Understanding UIAppearance Container Hierarchies</a></li>\n</ul>\n<p><em><strong>Happy Coding!!</strong></em></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n",
            "link": "https://staging1.basememara.com/protocol-oriented-themes-for-ios-apps/",
            "comment_count": 2,
            "author": 2,
            "featured_media": 41397,
            "terms": [
                80,
                53,
                62,
                55,
                81
            ],
            "meta": {
                "_series_part": "7"
            },
            "created": "2018-09-29T17:12:15",
            "modified": "2019-03-18T02:25:53"
        },
        {
            "id": 20633,
            "title": "Swifty Localization with Xcode Support",
            "slug": "swifty-localization-xcode-support",
            "type": "post",
            "excerpt": "Localization in Xcode is handled with NSLocalizedString, but it is such a verbose and legacy-like API. There's a Swiftier way that still respects Xcode .xliff exports and comments.",
            "content": "<p>Localization can be as much fun as unit testing. And like unit testing, it <em>can</em> be fun if it makes your code more robust and flexible (dependency injection and encapsulation anyone?). For example, once you internationalize your app and start viewing it in right-to-left languages, you&#8217;ll notice areas you&#8217;ve been using auto-layout wrong and start better habits such as using <em>UIStackViews</em> over <em>UILabel</em> text-alignments or tweaking hugging and resistance priorities. There&#8217;s one nagging thing that keeps coming up with localization though&#8230;</p>\n<h2><span>NSLocalizedString</span></h2>\n<p>Our old friend, `NSLocalizedString(&#8220;some.dialog.message&#8221;, comment: &#8220;My main dialog message for tutorial&#8221;)`. These localization API&#8217;s can be really bloated and ugly.. it can get out of control. Take this for example:</p>\n<pre class=\"lang:swift decode:true\">let title = NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\")\r\nlet message: String = .localizedStringWithFormat(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen inserting number\"), 9876)</pre>\n<p>There&#8217;s so many un-Swifty things about this; there&#8217;s the &#8220;NS-&#8221; prefix, some irrelevant comments in the code, `localizedStringWithFormat` hasn&#8217;t been split up to function parameters, formatting with locale is some nested call.. I don&#8217;t think it can get any worse.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Napoleon_Meme-500x350.jpg\" alt=\"\" width=\"400\" height=\"280\" class=\"aligncenter wp-image-20648\" /></p>\n<h2>Getting Swifty With It</h2>\n<p>One common technique in making `NSLocalizedString` more Swifty is wrapping it up in a <code>String</code> extension:</p>\n<pre class=\"lang:swift decode:true\">extension String {\r\n    \r\n    var localized: String {\r\n        return NSLocalizedString(self, comment: \"\")\r\n    }\r\n    \r\n    func localized(comment: String) -&gt; String {\r\n        return NSLocalizedString(self, comment: comment)\r\n    }\r\n}\r\n\r\nprint(\"some.dialog.message\".localized)</pre>\n<p>Looks good, although it still doesn&#8217;t solve comments from being infused in your code. Furthermore, there&#8217;s one big deal-breaker with this: Xcode will not export the localization to a <em>.xliff</em> file since <em>NSLocalizedString</em> is being used dynamically at runtime here.</p>\n<p>Xcode&#8217;s localization export depends on the hardcoded macro `NSLocalizedString` to do the search for export, so we still have to use them. Yes, <em>NSLocalizedString</em> is a macro! Hopefully the localization export feature can be rebuilt on top of Xcode 9+&#8217;s refactoring engine 😉</p>\n<h2>Now with Xcode Support™</h2>\n<p>Let&#8217;s take our last attempt further to get the right API while respecting  Xcode support. Using <code>Enums</code> to handle this would be sweet, but you have to use literals so this won&#8217;t compile:</p>\n<pre class=\"lang:swift decode:true\">enum Localizable: String {\r\n    //Compile error: Raw value for enum case must be a literal\r\n    case tutorialAlert = NSLocalizedString(\"tutorial.alert.title\", comment: \"Some comment\")\r\n}</pre>\n<p>That&#8217;s fine; actually extending a <code>struct</code> would work out better because then I can use extensions to add more localized strings instead of using cases. Let&#8217;s adjust:</p>\n<pre class=\"lang:swift decode:true\">struct Localizable {\r\n    private init() { }\r\n}\r\n\r\nextension Localizable {\r\n    static let title = NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\")\r\n    static let message = NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen inserting number\")\r\n}\r\n\r\n// ViewController.swift\r\nlet title = Localizable.title\r\nlet message: String = .localizedStringWithFormat(Localizable.message, 9876)</pre>\n<p>Still needs a bit more work.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Office_Space_Meme-500x418.jpg\" alt=\"\" width=\"400\" height=\"335\" class=\"aligncenter wp-image-20652\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Office_Space_Meme-500x418.jpg 500w, https://staging1.basememara.com/wp-content/uploads/2017/07/NSLocalizedString_Office_Space_Meme.jpg 526w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>\n<h2>Localization Micro-Library</h2>\n<p>When refactoring Swift code, one question I ask is how I can leverage inference. I&#8217;d like to end up with something like this:</p>\n<pre class=\"lang:swift decode:true\">let title: String = .title\r\nlet message: String = .localizedStringWithFormat(.message, 9876)</pre>\n<p>To achieve this, we&#8217;d have to move all the extensions to <code>String</code>, which would be obnoxious and pollute our <code>String</code> API. Instead, we&#8217;ll have to extend the `Localizable` struct along with <code>String</code>:</p>\n<pre class=\"lang:swift decode:true\">extension String {\r\n    \r\n    static func localized(_ key: Localizable) -&gt; String {\r\n        return key.contents\r\n    }\r\n}\r\n\r\nstruct Localizable {\r\n    fileprivate let contents: String\r\n    \r\n    init(_ contents: String) {\r\n        self.contents = contents\r\n    }\r\n}\r\n\r\nextension Localizable {\r\n    static let title = Localizable(NSLocalizedString(\"tutorial.dialog.title\", comment: \"Title of main tutorial dialog\"))\r\n    static let message = Localizable(NSLocalizedString(\"tutorial.dialog.message\", comment: \"First corner of main screen inserting number\"))\r\n}</pre>\n<p>Notice how we adjusted the <code>Localizable</code> static properties to return itself for later inference by storing the localized string within its initializer. Now we can do this:</p>\n<pre class=\"lang:swift decode:true\">let title: String = .localized(.title)</pre>\n<p>It&#8217;s not as slim as I aimed (which was too terse?), but it&#8217;s reasonable. And still reasonable even though you have to manage the <code>NSLocalizedString</code> list through <code>Localizable</code> static properties, but there&#8217;s no way around that &#8211; at least now they&#8217;re consolidated and reusable from one place, also making comment management easier.</p>\n<h2>Now with Locale Support™</h2>\n<p>For extending <code>.localizedStringWithFormat</code>, there’s still some work to do. Below will give *empty memory values* at runtime, even though it *dangerously compiles*:</p>\n<pre class=\"lang:swift decode:true \">extension String { // WRONG: Don't do this!\r\n\r\n    static func localizedFormat(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return String(format: key.contents, arguments)\r\n    }\r\n    \r\n    static func localizedLocale(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return .localizedStringWithFormat(key.contents, arguments)\r\n    }\r\n}</pre>\n<p>There are nuances we have to deal with when passing variable arguments to other functions since `CVarArg` is a bridge to low-level <em>C-language</em> API&#8217;s. We have to facilitate passing the `CVarArg` arguments to other functions via pointers using Swift&#8217;s <em>&#8220;<a href=\"https://developer.apple.com/documentation/swift/2294740-withvalist\" target=\"_blank\" rel=\"noopener\">withVaList</a>&#8220;</em>:</p>\n<pre class=\"lang:swift decode:true\">extension String {\r\n    \r\n    /// A string initialized by using format as a template into which values in argList are substituted according the current locale information.\r\n    private static var vaListHandler: (_ key: String, _ arguments: CVaListPointer, _ locale: Locale?) -&gt; String {\r\n        // https://stackoverflow.com/questions/42428504/swift-3-issue-with-cvararg-being-passed-multiple-times\r\n        return { return NSString(format: $0, locale: $2, arguments: $1) as String }\r\n    }\r\n\r\n    /// Returns a string created by using a given format string as a template into which the remaining argument values are substituted.\r\n    /// Equivalent to `String(format: value)`.\r\n    static func localizedFormat(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, nil) } as String\r\n    }\r\n\r\n    /// Returns a string created by using a given format string as a template into which the\r\n    /// remaining argument values are substituted according to the user’s default locale.\r\n    /// Equivalent to `String.localizedStringWithFormat(value, arguments)`.\r\n    static func localizedLocale(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, .current) } as String\r\n    }\r\n}</pre>\n<p>Now it works and we end up with this:</p>\n<pre class=\"lang:swift decode:true\">// Before\r\nlet title = NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\")\r\nlet message: String = .localizedStringWithFormat(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen inserting number\"), 9876)\r\nlet caption = String(format: NSLocalizedString(\"current.app.name.version\", comment: \"Center display of app name and current version\"), \"v1.1\")\r\n\r\n// After\r\nlet title: String = .localized(.tutorialAlertTitle)\r\nlet message: String = .localizedLocale(.oneCornerLabel1, 9876)\r\nlet caption: String = .localizedFormat(.currentAppNameVersion, \"v1.1\")</pre>\n<p>And Xcode&#8217;s localization export to <em>.xliff</em> works perfectly and with comments since <code>NSLocalizedString</code> is spelled out in the <code>Localizable</code> static extensions <a href=\"https://emojipedia.org/thumbs-up-sign/\" onmousedown=\"return rwt(this,'','','','7','AFQjCNHgpXSOoYKJfqGfOwBIm6b3V91rQQ','','0ahUKEwjAmZ2Dr_zUAhVJfiYKHQdvCykQFgg5MAY','','',event)\">👍</a></p>\n<h2>The Full Example</h2>\n<p>Below is how the result would look like in an app..</p>\n<p><em>Before:</em></p>\n<pre class=\"lang:swift decode:true \">class ViewController1: UIViewController {\r\n    \r\n    ...\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        centerLabel.text = String(format: NSLocalizedString(\"current.app.name.version\", comment: \"Center display of app name and current version\"),\r\n            Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as! String,\r\n            Bundle.main.infoDictionary?[kCFBundleVersionKey as String] as! String)\r\n        \r\n        startTutorial()\r\n    }\r\n    \r\n    /// Launched to start tutorial\r\n    func startTutorial() {\r\n        let alertController = UIAlertController(\r\n            title: NSLocalizedString(\"tutorial.alert.title\", comment: \"Title of main tutorial dialog\"),\r\n            message: NSLocalizedString(\"tutorial.alert.message\", comment: \"Message of main tutorial dialog\"),\r\n            preferredStyle: .alert\r\n        )\r\n        \r\n        alertController.addAction(UIAlertAction(title: NSLocalizedString(\"tutorial.alert.accept\", comment: \"OK button of main tutorial dialog\"), style: .default) { _ in\r\n            self.firstLabel.text = .localizedStringWithFormat(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen translating number 1\"), 1)\r\n            self.secondLabel.text = .localizedStringWithFormat(NSLocalizedString(\"two.corner.label.2\", comment: \"Second corner of main screen translating number 2\"), 2)\r\n            self.thirdLabel.text = .localizedStringWithFormat(NSLocalizedString(\"three.corner.label.3\", comment: \"Third corner of main screen translating number 3\"), 3)\r\n            self.fourthLabel.text = .localizedStringWithFormat(NSLocalizedString(\"four.corner.label.4\", comment: \"Fourth corner of main screen translating number 4\"), 4)\r\n        })\r\n        \r\n        present(alertController, animated: true)\r\n    }\r\n    \r\n}</pre>\n<p><em>After:</em></p>\n<pre class=\"lang:swift decode:true\">class ViewController2: UIViewController {\r\n    \r\n    ...\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        centerLabel.text = .localizedFormat(.currentAppNameVersion,\r\n            Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as! String,\r\n            Bundle.main.infoDictionary?[kCFBundleVersionKey as String] as! String\r\n        )\r\n        \r\n        startTutorial()\r\n    }\r\n    \r\n    /// Launched to start tutorial\r\n    func startTutorial() {\r\n        let alertController = UIAlertController(\r\n            title: .localized(.tutorialAlertTitle),\r\n            message: .localized(.tutorialAlertMessage),\r\n            preferredStyle: .alert\r\n        )\r\n        \r\n        alertController.addAction(UIAlertAction(title: .localized(.tutorialAlertAccept), style: .default) { _ in\r\n            self.firstLabel.text = .localizedLocale(.oneCornerLabel1, 1)\r\n            self.secondLabel.text = .localizedLocale(.twoCornerLabel2, 2)\r\n            self.thirdLabel.text = .localizedLocale(.threeCornerLabel3, 3)\r\n            self.fourthLabel.text = .localizedLocale(.fourCornerLabel4, 4)\r\n        })\r\n        \r\n        present(alertController, animated: true)\r\n    }\r\n    \r\n}</pre>\n<p><em>Localizable.swift (micro-library):</em></p>\n<pre class=\"lang:swift decode:true\">struct Localizable {\r\n    fileprivate let contents: String\r\n    \r\n    init(_ contents: String) {\r\n        self.contents = contents\r\n    }\r\n}\r\n\r\nextension String {\r\n    \r\n    /// A string initialized by using format as a template into which values in argList are substituted according the current locale information.\r\n    private static var vaListHandler: (_ key: String, _ arguments: CVaListPointer, _ locale: Locale?) -&gt; String {\r\n        // https://stackoverflow.com/questions/42428504/swift-3-issue-with-cvararg-being-passed-multiple-times\r\n        return { return NSString(format: $0, locale: $2, arguments: $1) as String }\r\n    }\r\n\r\n    /// Returns a localized string.\r\n    static func localized(_ key: Localizable) -&gt; String {\r\n        return key.contents\r\n    }\r\n\r\n    /// Returns a string created by using a given format string as a template into which the remaining argument values are substituted.\r\n    /// Equivalent to `String(format: value)`.\r\n    static func localizedFormat(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, nil) } as String\r\n    }\r\n\r\n    /// Returns a string created by using a given format string as a template into which the\r\n    /// remaining argument values are substituted according to the user’s default locale.\r\n    /// Equivalent to `String.localizedStringWithFormat(value, arguments)`.\r\n    static func localizedLocale(_ key: Localizable, _ arguments: CVarArg...) -&gt; String {\r\n        return withVaList(arguments) { vaListHandler(key.contents, $0, .current) } as String\r\n    }\r\n}</pre>\n<p><em>AppLocalizable.swift:</em></p>\n<pre class=\"lang:swift decode:true\">// MARK: - Main Scene\r\nextension Localizable {\r\n    static let currentAppNameVersion = Localizable(NSLocalizedString(\"current.app.name.version\", comment: \"Center display of app name and current version\"))\r\n    static let oneCornerLabel1 = Localizable(NSLocalizedString(\"one.corner.label.1\", comment: \"First corner of main screen translating number 1\"))\r\n    static let twoCornerLabel2 = Localizable(NSLocalizedString(\"two.corner.label.2\", comment: \"Second corner of main screen translating number 2\"))\r\n    static let threeCornerLabel3 = Localizable(NSLocalizedString(\"three.corner.label.3\", comment: \"Third corner of main screen translating number 3\"))\r\n    static let fourCornerLabel4 = Localizable(NSLocalizedString(\"four.corner.label.4\", comment: \"Fourth corner of main screen translating number 4\"))\r\n}\r\n\r\n// MARK: - Tutorial\r\nextension Localizable {\r\n    static let tutorialAlertTitle = Localizable(NSLocalizedString(\"tutorial.alert.title\", comment: \"Tutorial intro and getting started\"))\r\n    static let tutorialAlertMessage = Localizable(NSLocalizedString(\"tutorial.alert.message\", comment: \"Tutorial submitting feedback and contact\"))\r\n    static let tutorialAlertAccept = Localizable(NSLocalizedString(\"tutorial.alert.accept\", comment: \"Tutorial done and dismiss\"))\r\n}\r\n</pre>\n<p>You can <a href=\"https://github.com/basememara/SwiftyLocalizable\" target=\"_blank\" rel=\"noopener\">download the working sample</a> and give it a try.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n",
            "link": "https://staging1.basememara.com/swifty-localization-xcode-support/",
            "comment_count": 4,
            "author": 2,
            "featured_media": 20745,
            "terms": [
                80,
                77,
                50,
                55,
                47
            ],
            "meta": {
                "_series_part": "4"
            },
            "created": "2017-07-11T19:00:59",
            "modified": "2019-01-17T14:48:00"
        },
        {
            "id": 41256,
            "title": "Thin AppDelegate with Pluggable Services",
            "slug": "pluggable-appdelegate-services",
            "type": "post",
            "excerpt": "Many techniques have been tried to tame the AppDelegate beast, usually ending up in moving code into private functions or extensions. However, the AppDelegate is much more complex than just moving code around. In this post, let's examine a pluggable service technique with a few bonuses at the end.",
            "content": "<p>Many techniques have been tried to tame the&nbsp;<code>AppDelegate</code>&nbsp;beast, usually ending up in moving code into private functions or extensions. However, the <code>AppDelegate</code>&nbsp;is much more complex than just moving code around. In this post, let&#8217;s examine a pluggable service technique <a href=\"https://medium.com/ios-os-x-development/pluggableapplicationdelegate-e50b2c5d97dd\" target=\"_blank\" rel=\"noopener\">inspired by Martín Ortiz</a>&nbsp;with a few bonuses at the end.</p>\n<h2>AppDelegate: With Great Power Comes Great Responsibilit(ies)</h2>\n<p>Being the entry point for the app, everyone wants in on the action. From push notifications, deep links, theme setup, logger initialization.. the list goes on. Not to mention all the 3rd party SDK&#8217;s who want to plug into your app lifecycle too. Eventually your <code>AppDelegate</code>&nbsp;looks like this:</p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n        Log(info: \"AppDelegate.didFinishLaunchingSite started.\")\n        application.setMinimumBackgroundFetchInterval(UIApplicationBackgroundFetchIntervalMinimum)\n        \n        UNUserNotificationCenter.current().register(\n            delegate: self,\n            actions: [UNNotificationAction(identifier: \"favorite\", title: .localized(.favorite))]\n        )\n        \n        // Initialize Google Analytics\n        if !AppGlobal.userDefaults[.googleAnalyticsID].isEmpty {\n            GAI.sharedInstance().tracker(\n                withTrackingId: AppGlobal.userDefaults[.googleAnalyticsID])\n        }\n        \n        // Declare data format from remote REST API\n        JSON.dateFormatter.dateFormat = ZamzamConstants.DateTime.JSON_FORMAT\n        \n        // Initialize components\n        AppLogger.shared.setUp()\n        AppData.shared.setUp()\n        \n        // Select home tab\n        (window?.rootViewController as? UITabBarController)?.selectedIndex = 2\n        \n        setupTheme()\n        \n        Log(info: \"App finished launching.\")\n        \n        // Handle shortcut launch\n        if let shortcutItem = launchOptions?[.shortcutItem] as? UIApplicationShortcutItem {\n            performActionForShortcutItem(application, shortcutItem: shortcutItem)\n            return false\n        }\n        \n        return true\n    }\n    \n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\n        guard userActivity.activityType == NSUserActivityTypeBrowsingWeb, let webpageURL = userActivity.webpageURL else { return false }\n        Log(info: \"AppDelegate.continueUserActivity for URL: \\(webpageURL.absoluteString).\")\n        return navigateByURL(webpageURL)\n    }\n    \n    func application(_ application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) {\n        Log(info: \"AppDelegate.performFetch started.\")\n        scheduleUserNotifications(completionHandler: completionHandler)\n    }\n    \n    func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -&gt; Void) {\n        window?.rootViewController?.dismiss(animated: false, completion: nil)\n        guard let tabController = window?.rootViewController as? UITabBarController else { completionHandler?(false); return }\n        \n        switch shortcutItem.type {\n        case \"favorites\":\n            tabController.selectedIndex = 0\n        case \"search\":\n            tabController.selectedIndex = 3\n        case \"contact\":\n            guard let url = URL(string: \"mailto:\\(AppGlobal.userDefaults[.email])\") else { break }\n            UIApplication.shared.open(url)\n        default: break\n        }\n        \n        completionHandler?(true)\n    }\n}\n\n// MARK: - User Notification Delegate\n\nextension AppDelegate {\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -&gt; Void) {\n        guard let id = response.notification.request.content.userInfo[\"id\"] as? Int,\n            let link = response.notification.request.content.userInfo[\"link\"] as? String,\n            let url = try? link.asURL()\n            else { return }\n        \n        switch response.actionIdentifier {\n        case UNNotificationDefaultActionIdentifier: _ = navigateByURL(url)\n        case \"favorite\": PostService().addFavorite(id)\n        case \"share\": _ = navigateByURL(url)\n        default: break\n        }\n        \n        completionHandler()\n    }\n    \n    private func scheduleUserNotifications(completionHandler: @escaping (UIBackgroundFetchResult) -&gt; Void) {\n        // Get latest posts from server\n        // Persist network manager instance to ensure lifespan is not interrupted\n        urlSessionManager = PostService().updateFromRemote {\n            guard case .success(let results) = $0 else { return completionHandler(.failed) }\n            \n            guard let id = results.created.first,\n                let post = (try? Realm())?.object(ofType: Post.self, forPrimaryKey: id)\n                else { return completionHandler(.noData) }\n            \n            var attachments = [UNNotificationAttachment]()\n            \n            // Completion process on exit\n            func deferred() {\n                // Launch notification\n                UNUserNotificationCenter.current().add(\n                    body: post.previewContent,\n                    title: post.title,\n                    attachments: attachments,\n                    timeInterval: 5,\n                    userInfo: [\n                        \"id\": post.id,\n                        \"link\": post.link\n                    ],\n                    completion: {\n                        guard $0 == nil else { return Log(error: \"Could not schedule the notification for the post: \\($0.debugDescription).\") }\n                        Log(debug: \"Scheduled notification for post during background fetch.\")\n                }\n                )\n                \n                completionHandler(.newData)\n            }\n            \n            // Get remote media to attach to notification\n            guard let link = post.media?.thumbnailLink else { return deferred() }\n            let thread = Thread.current\n            \n            UNNotificationAttachment.download(from: link) {\n                defer { thread.async { deferred() } }\n                \n                guard $0.isSuccess, let attachment = $0.value else {\n                    return Log(error: \"Could not download the post thumbnail (\\(link)): \\($0.error.debugDescription).\")\n                }\n                \n                // Store attachment to schedule notification later\n                attachments.append(attachment)\n            }\n        }\n    }\n}\n\n// MARK: - Internal functions\n\nprivate extension AppDelegate {\n    \n    func setupTheme() {\n        window?.tintColor = UIColor(rgb: AppGlobal.userDefaults[.tintColor])\n        \n        if !AppGlobal.userDefaults[.titleColor].isEmpty {\n            UINavigationBar.appearance().titleTextAttributes = [\n                NSAttributedStringKey.foregroundColor: UIColor(rgb: AppGlobal.userDefaults[.titleColor])\n            ]\n        }\n        \n        // Configure tab bar\n        if let controller = window?.rootViewController as? UITabBarController {\n            controller.tabBar.items?.get(1)?.image = UIImage(named: \"top-charts\", inBundle: AppConstants.bundle)\n            controller.tabBar.items?.get(1)?.selectedImage = UIImage(named: \"top-charts-filled\", inBundle: AppConstants.bundle)\n            controller.tabBar.items?.get(2)?.image = UIImage(named: \"explore\", inBundle: AppConstants.bundle)\n            controller.tabBar.items?.get(2)?.selectedImage = UIImage(named: \"explore-filled\", inBundle: AppConstants.bundle)\n            \n            if !AppGlobal.userDefaults[.tabTitleColor].isEmpty {\n                UITabBarItem.appearance().setTitleTextAttributes([\n                    NSAttributedStringKey.foregroundColor: UIColor(rgb: AppGlobal.userDefaults[.tabTitleColor])\n                    ], for: .selected)\n            }\n        }\n        \n        // Configure dark mode if applicable\n        if AppGlobal.userDefaults[.darkMode] {\n            UINavigationBar.appearance().barStyle = .black\n            UITabBar.appearance().barStyle = .black\n            UICollectionView.appearance().backgroundColor = .black\n            UITableView.appearance().backgroundColor = .black\n            UITableViewCell.appearance().backgroundColor = .clear\n        }\n    }\n}\n</pre>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png\" alt=\"\" width=\"414\" height=\"306\" class=\"aligncenter size-full wp-image-41258\"></p>\n<p>This would be a nightmare to maintain. Fortunately, there&#8217;s a better way! It involves shifting the responsibilities to pluggable services.</p>\n<h2>Application Services to the Rescue!</h2>\n<p>Instead of dumping all the responsibilities on <code>AppDelegate</code>, let&#8217;s create an&nbsp;<code>ApplicationService</code>&nbsp;protocol that will plug into the app life cycle. Eventually your app delegate will look this:</p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\nclass AppDelegate: PluggableApplicationDelegate {\n\n    override func services() -&gt; [ApplicationService] {\n        return [\n            ErrorApplicationService(),\n            LoggerApplicationService(),\n            AnalyticsApplicationService(),\n            BootApplicationService(with: window),\n            ShortcutApplicationService(),\n            NotificationApplicationService(),\n            ThemeApplicationService()\n        ]\n    }\n}\n\nextension AppDelegate {\n    \n    func application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -&gt; Void) {\n        ShortcutApplicationService()\n            .application(application, performActionFor: shortcutItem, completionHandler: completionHandler)\n    }\n    \n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\n        return DeepLinkApplicationService()\n            .application(application, continue: userActivity, restorationHandler: restorationHandler)\n    }\n}</pre>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/appdelegate_whoa-2.gif\" alt=\"\" width=\"500\" height=\"230\" class=\"size-medium wp-image-41267 aligncenter\"></p>\n<h2>Tell Me More!!</h2>\n<p>To accomplish this, we first create a protocol the&nbsp;<code>AppDelegate</code>&nbsp;services will conform to:</p>\n<pre class=\"lang:swift decode:true \">public protocol ApplicationService {\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool\n    \n    func applicationWillEnterForeground(_ application: UIApplication)\n    func applicationDidEnterBackground(_ application: UIApplication)\n    func applicationDidBecomeActive(_ application: UIApplication)\n    func applicationWillResignActive(_ application: UIApplication)\n    \n    func applicationProtectedDataWillBecomeUnavailable(_ application: UIApplication)\n    func applicationProtectedDataDidBecomeAvailable(_ application: UIApplication)\n    \n    func applicationWillTerminate(_ application: UIApplication)\n    func applicationDidReceiveMemoryWarning(_ application: UIApplication)\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error)\n}\n\n// MARK: - Optionals\n\npublic extension ApplicationService {\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { return true }\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { return true }\n    \n    func applicationWillEnterForeground(_ application: UIApplication) {}\n    func applicationDidEnterBackground(_ application: UIApplication) {}\n    func applicationDidBecomeActive(_ application: UIApplication) {}\n    func applicationWillResignActive(_ application: UIApplication) {}\n    \n    func applicationProtectedDataWillBecomeUnavailable(_ application: UIApplication) {}\n    func applicationProtectedDataDidBecomeAvailable(_ application: UIApplication) {}\n    \n    func applicationWillTerminate(_ application: UIApplication) {}\n    func applicationDidReceiveMemoryWarning(_ application: UIApplication) {}\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {}\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {}\n}</pre>\n<p>This simply mirrors the <code>AppDelegate</code>&nbsp;events which we will plug into just a bit. Notice the protocol functions are optional because not all services will need to tap into all the events all the time.</p>\n<p>Next, we create a super class for our&nbsp;<code>AppDelegate</code>&nbsp;to bind the events to each of the services:</p>\n<pre class=\"lang:js decode:true\">open class PluggableApplicationDelegate: UIResponder, UIApplicationDelegate {\n    \n    public var window: UIWindow?\n    \n    /// Lazy implementation of application services list\n    public lazy var lazyServices: [ApplicationService] = services()\n    \n    /// List of application services for binding to `AppDelegate` events\n    open func services() -&gt; [ApplicationService] {\n        return [ /* Populated from sub-class */ ]\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]? = nil) -&gt; Bool {\n        return lazyServices.reduce(true) {\n            $0 &amp;&amp; $1.application(application, willFinishLaunchingWithOptions: launchOptions)\n        }\n    }\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n        return lazyServices.reduce(true) {\n            $0 &amp;&amp; $1.application(application, didFinishLaunchingWithOptions: launchOptions)\n        }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func applicationWillEnterForeground(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationWillEnterForeground(application) }\n    }\n    \n    func applicationDidEnterBackground(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationDidEnterBackground(application) }\n    }\n    \n    func applicationDidBecomeActive(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationDidBecomeActive(application) }\n    }\n    \n    func applicationWillResignActive(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationWillResignActive(application) }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func applicationProtectedDataWillBecomeUnavailable(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationProtectedDataWillBecomeUnavailable(application) }\n    }\n    \n    func applicationProtectedDataDidBecomeAvailable(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationProtectedDataDidBecomeAvailable(application) }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func applicationWillTerminate(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationWillTerminate(application) }\n    }\n    \n    func applicationDidReceiveMemoryWarning(_ application: UIApplication) {\n        lazyServices.forEach { $0.applicationDidReceiveMemoryWarning(application) }\n    }\n}\n\npublic extension PluggableApplicationDelegate {\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        lazyServices.forEach { $0.application(application, didRegisterForRemoteNotificationsWithDeviceToken: deviceToken) }\n    }\n    \n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        lazyServices.forEach { $0.application(application, didFailToRegisterForRemoteNotificationsWithError: error) }\n    }\n}</pre>\n<p>What&#8217;s happening is the&nbsp;<code>services()</code>&nbsp;function is exposed for the <code>AppDelegate</code>&nbsp;to override in order to provide the services that want to plug and play. The <code>PluggableApplicationDelegate</code> will create a lazy property to prevent multiple instantiation of the services, then will finally call those functions when each of the app event fires.</p>\n<p>The&nbsp;<code>AppDelegate</code>&nbsp;inherits from the <code>PluggableApplicationDelegate</code> and provides the service instances it desires:</p>\n<pre class=\"lang:swift decode:true\">@UIApplicationMain\nclass AppDelegate: PluggableApplicationDelegate {\n\n    override func services() -&gt; [ApplicationService] {\n        return [\n            LoggerApplicationService(),\n            NotificationApplicationService()\n        ]\n    }\n}</pre>\n<p>And one of the application services would look something like this:</p>\n<pre class=\"lang:swift decode:true\">final class LoggerApplicationService: ApplicationService, HasDependencies {\n    private lazy var log: LogWorkerType = dependencies.resolveWorker()\n\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\n        log.config(for: application)\n        return true\n    }\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey : Any]?) -&gt; Bool {\n        log.info(\"App did finish launching.\")\n        return true\n    }\n    \n    func applicationDidReceiveMemoryWarning(_ application: UIApplication) {\n        log.warn(\"App did receive memory warning.\")\n    }\n    \n    func applicationWillTerminate(_ application: UIApplication) {\n        log.warn(\"App will terminate.\")\n    }\n}</pre>\n<p>Now the <code>AppDelegate</code>&nbsp;is scalable and maintainable! Instead mixing responsibilities in the same object, your pluggable service binds to the app lifecycle and manages its own processes.</p>\n<h2>BONUS: Pluggable UIViewController!</h2>\n<p>The <code>UIViewController</code>&nbsp;can reap the benefits by leveraging the same technique too. We will create a <code>ControllerService</code>&nbsp;protocol for those that want to plug and play into the view controller life cycle:</p>\n<pre class=\"lang:swift decode:true \">public protocol ControllerService {\n    func viewDidLoad(_ controller: UIViewController)\n    \n    func viewWillAppear(_ controller: UIViewController)\n    func viewDidAppear(_ controller: UIViewController)\n    \n    func viewWillDisappear(_ controller: UIViewController)\n    func viewDidDisappear(_ controller: UIViewController)\n    \n    func viewWillLayoutSubviews(_ controller: UIViewController)\n    func viewDidLayoutSubviews(_ controller: UIViewController)\n}\n\npublic extension ControllerService {\n    func viewDidLoad(_ controller: UIViewController) {}\n    \n    func viewWillAppear(_ controller: UIViewController) {}\n    func viewDidAppear(_ controller: UIViewController) {}\n    \n    func viewWillDisappear(_ controller: UIViewController) {}\n    func viewDidDisappear(_ controller: UIViewController) {}\n    \n    func viewWillLayoutSubviews(_ controller: UIViewController) {}\n    func viewDidLayoutSubviews(_ controller: UIViewController) {}\n}</pre>\n<p>Then we create a super <code>UIViewController</code>&nbsp;class that will bind the services to its events:</p>\n<pre class=\"lang:js decode:true \">open class PluggableController: UIViewController {\n    \n    /// Lazy implementation of controller services list\n    public lazy var lazyServices: [ControllerService] = services()\n    \n    /// List of controller services for binding to `UIViewController` events\n    open func services() -&gt; [ControllerService] {\n        return [ /* Populated from sub-class */ ]\n    }\n    \n    open override func viewDidLoad() {\n        super.viewDidLoad()\n        lazyServices.forEach { $0.viewDidLoad(self) }\n    }\n    \n    open override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        lazyServices.forEach { $0.viewWillAppear(self) }\n    }\n    \n    open override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        lazyServices.forEach { $0.viewDidAppear(self) }\n    }\n    \n    open override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        lazyServices.forEach { $0.viewWillDisappear(self) }\n    }\n    \n    open override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        lazyServices.forEach { $0.viewDidDisappear(self) }\n    }\n    \n    open override func viewWillLayoutSubviews() {\n        super.viewWillLayoutSubviews()\n        lazyServices.forEach { $0.viewWillLayoutSubviews(self) }\n    }\n    \n    open override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        lazyServices.forEach { $0.viewDidLayoutSubviews(self) }\n    }\n}</pre>\n<p>And finally, your view controller will end up like this:</p>\n<pre class=\"lang:swift decode:true \">class ViewController: PluggableController {\n\n    override func services() -&gt; [ControllerService] {\n        return [\n            ChatControllerService(),\n            OrderControllerService()\n        ]\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n    }\n\n}</pre>\n<p>An example of a controller service would be:</p>\n<pre class=\"lang:swift decode:true \">class ChatControllerService: ControllerService, HasDependencies {\n    private lazy var chatWorker: ChatWorkerType = dependencies.resolveWorker()\n\n    func viewDidLoad(_ controller: UIViewController) {\n        chatWorker.config()\n    }\n}\n\nextension ChatControllerService {\n    \n    func viewWillAppear(_ controller: UIViewController) {\n        chatWorker.subscribe()\n    }\n    \n    func viewWillDisappear(_ controller: UIViewController) {\n        chatWorker.unsubscribe()\n    }\n}</pre>\n<p>The controller services will have their functions triggered when the <code>UIViewController</code>&nbsp;events fire.</p>\n<h2>BONUS 2: Pluggable Application for Android!</h2>\n<p>This technique is cross-platform and can actually work for Android as well&#8230; your Android team will thank you! This is what the <code>ApplicationService</code>&nbsp;interface and <code>PluggableApplication</code>&nbsp;base class look like:<em></em></p>\n<pre class=\"lang:java decode:true\">interface ApplicationService {\n    fun onCreate() {}\n    fun onTerminate() {}\n    fun onConfigurationChanged(newConfig: Configuration?) {}\n\n    fun onActivityStarted(activity: Activity?) {}\n    fun onActivityStopped(activity: Activity?) {}\n    fun onActivityPaused(activity: Activity?) {}\n    fun onActivityResumed(activity: Activity?) {}\n    fun onActivityDestroyed(activity: Activity?) {}\n    fun onActivitySaveInstanceState(activity: Activity?, bundle: Bundle?) {}\n    fun onActivityCreated(activity: Activity?, bundle: Bundle?) {}\n}\n\nopen class PluggableApplication: Application.ActivityLifecycleCallbacks, Application() {\n\n    open lateinit var services: ArrayList&lt;ApplicationService&gt;\n\n    override fun onCreate() {\n        super.onCreate()\n        registerActivityLifecycleCallbacks(this)\n\n        services.forEach { it.onCreate() }\n    }\n\n    override fun onTerminate() {\n        super.onTerminate()\n        services.forEach { it.onTerminate() }\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration?) {\n        super.onConfigurationChanged(newConfig)\n        services.forEach { it.onConfigurationChanged(newConfig) }\n    }\n\n    override fun onActivityPaused(p0: Activity?) {\n        services.forEach { it.onActivityPaused(p0) }\n    }\n\n    override fun onActivityResumed(p0: Activity?) {\n        services.forEach { it.onActivityResumed(p0) }\n    }\n\n    override fun onActivityStarted(p0: Activity?) {\n        services.forEach { it.onActivityStarted(p0) }\n    }\n\n    override fun onActivityDestroyed(p0: Activity?) {\n        services.forEach { it.onActivityDestroyed(p0) }\n    }\n\n    override fun onActivitySaveInstanceState(p0: Activity?, p1: Bundle?) {\n        services.forEach { it.onActivitySaveInstanceState(p0, p1) }\n    }\n\n    override fun onActivityStopped(p0: Activity?) {\n        services.forEach { it.onActivityStopped(p0) }\n    }\n\n    override fun onActivityCreated(p0: Activity?, p1: Bundle?) {\n        services.forEach { it.onActivityCreated(p0, p1) }\n    }\n}\n</pre>\n<p>And the <code>FragmentService</code>&nbsp;and <code>PluggableFragment</code>&nbsp;base class:</p>\n<pre class=\"lang:java decode:true\">interface FragmentService {\n    fun onAttach(context: Context?)\n    fun onCreate(savedInstanceState: Bundle?) {}\n    fun onActivityCreated(savedInstanceState: Bundle?) {}\n    fun onStart() {}\n    fun onViewCreated(view: View, savedInstanceState: Bundle?) {}\n    fun onResume() {}\n    fun onSaveInstanceState(outState: Bundle) {}\n    fun onPause() {}\n    fun onStop() {}\n    fun onDestroyView() {}\n    fun onDestroy() {}\n    fun onDetach() {}\n}\n\nopen class PluggableFragment: Fragment() {\n\n    open lateinit var services: ArrayList&lt;FragmentService&gt;\n\n    override fun onAttach(context: Context?) {\n        super.onAttach(context)\n        services.forEach { it.onAttach(context) }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        services.forEach { it.onCreate(savedInstanceState) }\n    }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        services.forEach { it.onActivityCreated(savedInstanceState) }\n    }\n\n    override fun onStart() {\n        super.onStart()\n        services.forEach { it.onStart() }\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        services.forEach { it.onViewCreated(view, savedInstanceState) }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        services.forEach { it.onResume() }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        services.forEach { it.onSaveInstanceState(outState) }\n    }\n\n    override fun onPause() {\n        super.onPause()\n        services.forEach { it.onPause() }\n    }\n\n    override fun onStop() {\n        super.onStop()\n        services.forEach { it.onStop() }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        services.forEach { it.onDestroyView() }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        services.forEach { it.onDestroy() }\n    }\n\n    override fun onDetach() {\n        super.onDetach()\n        services.forEach { it.onDetach() }\n    }\n}</pre>\n<p>You finally end up with a clean <code>Application</code>&nbsp;like this:</p>\n<pre class=\"lang:java decode:true\">class MyApplication: PluggableApplication() {\n    \n    override var services: ArrayList&lt;ApplicationService&gt; = {\n        arrayListOf(\n            ErrorApplicationService(),\n            LoggerApplicationService(),\n            AnalyticsApplicationService(),\n            BootApplicationService(with: window),\n            ShortcutApplicationService(),\n            NotificationApplicationService(),\n            ThemeApplicationService()\n        )\n    }()\n}</pre>\n<h2>Conclusion</h2>\n<p>The pluggable service technique will greatly reduce code and responsibilities for your application and controller life cycles. See <a href=\"https://github.com/basememara/PluggableAppDelegate\" target=\"_blank\" rel=\"noopener\">a sample application</a> using this technique to try it out.</p>\n<p><em><strong>HAPPY CODING!!</strong></em><a href=\"https://medium.com/ios-os-x-development/pluggableapplicationdelegate-e50b2c5d97dd\" target=\"_blank\" rel=\"noopener\"></a></p>\n",
            "link": "https://staging1.basememara.com/pluggable-appdelegate-services/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 41258,
            "terms": [
                56,
                80,
                53,
                50,
                55
            ],
            "meta": {
                "_series_part": "8"
            },
            "created": "2018-02-16T18:24:43",
            "modified": "2019-01-05T05:31:57"
        },
        {
            "id": 652,
            "title": "Creating Cross-Platform Swift Frameworks for iOS, watchOS, and tvOS via Carthage and CocoaPods",
            "slug": "creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods",
            "type": "post",
            "excerpt": "In this post, I'd like to show you how to create a Swift framework for iOS, watchOS, and tvOS and get them distributed via Carthage and CocoaPods. It's a technique I use to share frameworks across all my apps and with the community.",
            "content": "<p>The title is a mouth-full, but so is creating cross-platform frameworks. In this post, I&#8217;d like to show you how to create a Swift framework for iOS, watchOS, and tvOS and get them distributed via <a href=\"https://github.com/Carthage/Carthage\" target=\"_blank\" rel=\"noopener\">Carthage</a> and <a href=\"https://cocoapods.org\" target=\"_blank\" rel=\"noopener\">CocoaPods</a>. It&#8217;s a technique I use to share frameworks across all my apps and with the community. Note this will only target <em>iOS 8</em> above because of dynamic frameworks. Ready?</p>\n<h2>Creating the Project</h2>\n<p>First, let&#8217;s create an empty project. When I say empty, I literally mean empty. From Xcode, choose a template under <em>&#8220;Other &gt; Empty&#8221;</em>:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_308-500x354.png\" alt=\"Xcode Empty Project\" width=\"500\" height=\"354\" class=\"aligncenter size-medium wp-image-653\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_308-500x354.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_308-768x544.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_308-1024x725.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_308.png 1444w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>From here, you can start creating your targets per platform. You can do this under <em>&#8220;File &gt; New &gt; Target&#8221;</em>. Choose the <em>&#8220;Cocoa Touch Framework&#8221;</em> template under <em>&#8220;iOS &gt; Framework &amp; Library&#8221;</em>. You can call it <em>&#8220;MyModule iOS&#8221;</em>. Do not check <em>&#8220;Include Unit Tests&#8221;</em>, we will do this later.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_309-500x467.png\" alt=\"Xcode iOS Framework\" width=\"500\" height=\"467\" class=\"aligncenter size-medium wp-image-672\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_309-500x467.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_309-768x718.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_309-1024x957.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Now do the same for <em>&#8220;watchOS &gt; Framework &amp; Library&#8221;</em> and <em>&#8220;tvOS &gt; Framework &amp; Library&#8221;</em>.</p>\n<p>Next, create an empty folder called <em>&#8220;Sources&#8221;</em> and add it to the project. This is where all your code will go. This convention is meant to be forward-compatible with the <a href=\"https://swift.org/package-manager/\" target=\"_blank\" rel=\"noopener\">Swift Package Manager</a> when Swift 3 comes out 😉</p>\n<p>So far, your project should look something like this:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_310.png\" alt=\"Xcode framework new project\" width=\"404\" height=\"218\" class=\"aligncenter size-full wp-image-654\" /></p>\n<h2>The Info.plist Files</h2>\n<p>Now that we have our foundation to our project, it&#8217;s time to fix it up so the platforms play nice together against the same code base. Let&#8217;s take care of the <em>&#8220;Info.plist&#8221;</em> files. Go into each platform folder created above and start appending the platform name after the <em>&#8220;Info.plist&#8221;</em> files. For example for iOS, rename the file to <em>&#8220;Info-iOS.plist&#8221;</em>.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_311-500x159.png\" alt=\"Xcode plist file iOS\" width=\"500\" height=\"159\" class=\"aligncenter size-medium wp-image-655\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_311-500x159.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_311-768x245.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_311.png 816w\" sizes=\"(max-width: 500px) 100vw, 500px\" />Once you have done this for each platform, move them all into the <em>&#8220;Sources&#8221;</em> folder:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_312-500x143.png\" alt=\"Xcode plist files platforms\" width=\"500\" height=\"143\" class=\"aligncenter size-medium wp-image-656\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_312-500x143.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_312.png 684w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Now you can add the <em>.plist</em> files into the project by right-clicking on your <em>&#8220;Sources&#8221;</em> folder in Xcode and select <em>&#8220;Add files&#8221;</em>. Uncheck <em>&#8220;Copy items if needed&#8221;</em>, select <em>&#8220;Create groups&#8221;</em>, and make sure none of the Target Memberships are selected. Your Xcode project should look like this so far:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_313.png\" alt=\"Xcode source 1\" width=\"394\" height=\"404\" class=\"aligncenter size-full wp-image-657\" /></p>\n<p>Now we need to update the <em>&#8220;Build Settings&#8221;</em> to point to the respective <em>.plist</em> file name and location for each platform target. So for the iOS target, go to <em>&#8220;Build Settings &gt; Packaging &gt; Info.plist File&#8221;</em>. From here, put in the relative path to the <em>.plist</em> file with the appended platform name you did earlier:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_315-500x241.png\" alt=\"Xcode Info.plist Packaging Build Settings\" width=\"500\" height=\"241\" class=\"aligncenter size-medium wp-image-659\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_315-500x241.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_315-768x371.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_315-1024x494.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Finally for the <em>.plist</em> files, delete the entry under &#8220;Build Phases &gt; Copy Bundle Sources&#8221;. This was just a side-effect of adding the files into the Xcode project, but we don&#8217;t need to copy the bundle since it is taken care of in the previous step when we updated the path in the build settings. Here is the entry you must delete for each platform target:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_316-500x201.png\" alt=\"Xcode Build Settings Copy Bundle Resources\" width=\"500\" height=\"201\" class=\"aligncenter size-medium wp-image-660\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_316-500x201.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_316-768x308.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_316-1024x411.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>The Header Files</h2>\n<p>Unfortunately, we have to live with <em>Objective-C</em> for awhile, so let&#8217;s handle our header file so <em>Objective-C</em> projects can consume our <em>Swift</em> framework and be cool again. Go to the <em>&#8220;.h&#8221;</em> file Xcode created for you under the iOS folder and remove the platform name from the names in the source code:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_317-500x164.png\" alt=\"Xcode framework header file\" width=\"500\" height=\"164\" class=\"aligncenter size-medium wp-image-661\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_317-500x164.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_317-768x251.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_317-1024x335.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_317.png 1534w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Above, I removed <em>&#8220;</em><span><em>_iOS&#8221;</em> from <em>&#8220;ZamzamKitData_iOSVersionNumber&#8221;</em> and <em>&#8220;ZamzamKitData_iOSVersionString&#8221;</em>. Save the file then rename it to remove <em>&#8221; iOS&#8221;</em> from the file name. Next drag it into the <em>&#8220;Sources&#8221;</em> folder.</span></p>\n<p>Go to Finder and you&#8217;ll notice it&#8217;s not really in the &#8220;Sources&#8221; folder, but still in the iOS target folder. So manually move it to the <em>&#8220;Sources&#8221;</em> folder from Finder. This will break your project, so go back to Xcode and update the location AND while you&#8217;re at it select all of the <em>&#8220;Target Memberships&#8221; </em>and select <em>&#8220;Public&#8221;</em>:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_318-500x203.png\" alt=\"Xcode header file\" width=\"500\" height=\"203\" class=\"aligncenter size-medium wp-image-662\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_318-500x203.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_318-768x312.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_318-1024x416.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Now you can delete the platform folders from the project and <em>&#8220;Move to Trash&#8221;</em> when prompted. Our code will go in the &#8220;Sources&#8221; folder going forward, not these target folders. Remember, your framework targets are still available to us, we just don&#8217;t need the folders Xcode created for us. At this point, your project should look a lot cleaner:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_319-500x310.png\" alt=\"Xcode project 2\" width=\"500\" height=\"310\" class=\"aligncenter size-medium wp-image-663\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_319-500x310.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_319-768x475.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_319-1024x634.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_319.png 1234w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Go ahead and add a <em>Swift</em> code file in the <em>&#8220;Sources&#8221;</em> folder to try it out. You&#8217;ll be able to toggle which <em>&#8220;Target Memberships&#8221;</em> this code file is for (iOS, watchOS, tvOS, or all of them).</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_320.png\" alt=\"Xcode cross-platform file\" width=\"402\" height=\"370\" class=\"aligncenter size-full wp-image-664\" /></p>\n<h2>The Build Settings</h2>\n<p>Let&#8217;s update our <em>&#8220;Build Settings&#8221;</em> to accommodate the cross-platform architecture we created. For each of the platform targets, go to <em>&#8220;Build Settings &gt; Packaging &gt; Product Name&#8221;</em> and remove the appended platform name, so it will be an identical name for all the platforms so they are packaged as one product:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_321-500x345.png\" alt=\"Xcode build settings product name\" width=\"500\" height=\"345\" class=\"aligncenter size-medium wp-image-665\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_321-500x345.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_321-768x531.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_321-1024x707.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>For Carthage support, you&#8217;ll have to make your targets <em>&#8220;Shared&#8221;</em>. To do this <em>&#8220;Manage Schemes&#8221;</em> and check the <em>&#8220;Shared&#8221;</em> areas:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_329-500x166.png\" alt=\"Xcode Manage Scheme Shared\" width=\"500\" height=\"166\" class=\"aligncenter size-medium wp-image-671\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_329-500x166.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_329-768x255.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_329-1024x340.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_329.png 1524w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>These next steps aren&#8217;t necessary, but I highly recommend them:</p>\n<ol>\n<li>Set <em>&#8220;Require Only App-Extension-Safe API&#8221;</em> to <em>&#8220;Yes&#8221;</em>. This will allow your framework to be used in extensions like the <em>Today Widget</em>, which have tighter restrictions. If you do something in your code that breaks this restriction, you&#8217;ll get a compile error right away so you can think of a different approach to your code. This is better than later finding out that you need to use your framework in an extension and have to re-architect some parts of your code.</li>\n<li>This is more of a business/management decision, but for my apps I usually support a minimum of <em>iOS 8.4</em>, <em>watchOS 2.0</em>, and <em>tvOS 9.0</em>. The reason is because iOS 8.4 has some goodies not available in previous version, such as support for Apple Watch and security updates. Plus this is just some of the perks of developing for the Apple ecosystem instead of Android <span>😉</span>. Check out your app stats and don&#8217;t end up supporting older version just for one or two people. This setting should be configured under your <em>&#8220;Project &gt; Info &gt; Deployment Target&#8221;</em>. This will be inherited to the target frameworks. However, for the watchOS and tvOS targets, you&#8217;ll have to go <em>&#8220;Build Settings &gt; Deployment &gt; watchOS/tvOS Deployment Target&#8221;</em> and set it to 2.0/9.0. Don&#8217;t worry though, you&#8217;ll be coding against the latest SDK versions across the board using the <em>&#8220;Base SDK&#8221;</em> setting. You are just supporting older versions with the <em>&#8220;Deployment Target&#8221;</em> and will get warned by the compiler if something in your code is not supported in an older version you&#8217;re trying to support.<img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_327-500x124.png\" alt=\"Xcode iOS Deployment Target\" width=\"500\" height=\"124\" class=\"aligncenter size-medium wp-image-667\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_327-500x124.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_327-768x190.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_327-1024x253.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_327.png 1336w\" sizes=\"(max-width: 500px) 100vw, 500px\" /><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_328-500x99.png\" alt=\"Xcode watchOS Deployment Target\" width=\"500\" height=\"99\" class=\"aligncenter size-medium wp-image-668\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_328-500x99.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_328-768x153.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_328-1024x203.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></li>\n</ol>\n<h2>The Meta Data</h2>\n<p>Let&#8217;s create a <em>&#8220;Metadata&#8221;</em> folder and add some miscellaneous files such as a read me, license, podspec, etc. This is what I have:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_323-500x224.png\" alt=\"Xcode meta data folder\" width=\"500\" height=\"224\" class=\"aligncenter size-medium wp-image-669\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_323-500x224.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_323-768x344.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_323-1024x458.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>When you add these files to your project, make sure to remove them from the <em>&#8220;Build Phases &gt; Compile Sources&#8221;</em> and <em>&#8220;Build Phases &gt; Copy Bundle Resources&#8221; </em>since they don&#8217;t need to be compiled.</p>\n<h2>The Workspace</h2>\n<p><em>Are you still with me? Trust me, the end game is worth it&#8230; just a little bit longer&#8230;</em></p>\n<p>Save your project as a workspace by going to <em>&#8220;File &gt; Save As Workspace&#8221;</em>. Call it the same as your project and save it in the root of your project folder. Now close the project and open this new workspace.</p>\n<p>Also for convenience, add a Playground file so you can sketch some ideas out while dreaming up some code. Go to <em>&#8220;File &gt; New &gt; Playground&#8221;</em> and call it the same name as your workspace. Close the playground and add it to your workspace as a sibling, not a child, of your project.</p>\n<h2>The Tests</h2>\n<p>Add a new target to your Xcode project. I like to add these templates for unit testing and sample demos:</p>\n<ol>\n<li><em>iOS &gt; Test &gt; iOS Unit Testing Bundle</em></li>\n<li><em>iOS &gt; Application &gt; Tabbed Application</em></li>\n<li><em>watchOS &gt; Application &gt; WatchKit App</em></li>\n<li><em>tvOS &gt; Test &gt; TV Unit Testing Bundle</em></li>\n</ol>\n<h2>The Big Picture</h2>\n<p>I commend you for reading this far! Here&#8217;s how your workspace should look like:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_324-500x519.png\" alt=\"Xcode Framework Project\" width=\"500\" height=\"519\" class=\"aligncenter size-medium wp-image-670\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_324-500x519.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_324-768x796.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_324-987x1024.png 987w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_324.png 1026w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>I created some empty folders in the <em>&#8220;Sources&#8221;</em> folder as a convention for my frameworks, but of course add your own flavor.</p>\n<p>Finally, add your workspace to git or some source control and add any dependencies you&#8217;d like your framework to use. Check out <a href=\"https://robots.thoughtbot.com/creating-your-first-ios-framework\" target=\"_blank\" rel=\"noopener\">this excellent blog post</a> for details on how to do that.</p>\n<p>See below how you can select which platform to target per file:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png\" alt=\"Xcode Cross Platform File\" width=\"500\" height=\"210\" class=\"aligncenter size-medium wp-image-675\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330-768x323.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330-1024x430.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330.png 1218w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Also notice you can even have more granular control within the code using <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-ID34\" target=\"_blank\" rel=\"noopener\">Swift Conditional Compilation</a> *if needed*. I advise against it since segmenting your file into different platforms is not very elegant and can be messy. Instead, use protocol extensions to segment code <span>💡</span></p>\n<h2>Conclusion</h2>\n<p>It was a long journey, but now you&#8217;re ready to rock some code and support multiple platforms with a single code base. When adding new code files, just select the <em>&#8220;Target Memberships&#8221;</em> you&#8217;d like to support for that particular code file. And <a href=\"http://staging1.basememara.com/unit-testing-in-swift-xcode-and-beyond/\">don&#8217;t forget to unit test</a>&#8230; 😉</p>\n<p><strong><em>Happy Coding!!</em></strong></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n",
            "link": "https://staging1.basememara.com/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods/",
            "comment_count": 22,
            "author": 2,
            "featured_media": 675,
            "terms": [
                80,
                61,
                52,
                64,
                50,
                55,
                47
            ],
            "meta": {
                "_series_part": "6"
            },
            "created": "2016-03-22T17:32:30",
            "modified": "2019-01-05T03:50:02"
        },
        {
            "id": 221,
            "title": "Get an Absolute URL from a Relative Path in C# .NET",
            "slug": "get-an-absolute-url-from-a-relative-path-in-c-net",
            "type": "post",
            "excerpt": "Getting an absolute path from a relative one has been made very easy and pleasant by .NET. Just feed the relative path to the \"Page.ResolveUrl\" method and that's it! One thing that was left out by .NET though is how to get an absolute URL from a relative path? With social networks on the rise, passing around your links has become more important than ever. There are many ways to do this, but all have their drawbacks. I will show you a static method that I use that solves just about all cases.",
            "content": "<p>Getting an absolute path from a relative one has been made very easy and pleasant by .NET. Just feed the relative path to the &#8220;Page.ResolveUrl&#8221; method and that&#8217;s it!</p>\n<p>One thing that was left out by .NET though is how to get an absolute URL from a relative path? With social networks on the rise, passing around your links has become more important than ever. There are many ways to do this, but all have their drawbacks. I will show you a static method that I use that solves just about all cases&#8230; <a href=\"https://web.archive.org/web/20150324180152/http://blog.falafel.com/get-an-absolute-url-from-a-relative-path-in-c-net/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/get-an-absolute-url-from-a-relative-path-in-c-net/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                2,
                41
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2012-03-15T15:59:35",
            "modified": "2018-10-21T13:49:27"
        },
        {
            "id": 211,
            "title": "Using ASP.NET Web API for Sitefinity REST Services",
            "slug": "using-asp-net-web-api-for-sitefinity-rest-services",
            "type": "post",
            "excerpt": "Although you could implement your own RESTful WCF Service in Sitefinity, there is a gem Microsoft dropped into the MVC 4 Beta. I am referring to Web API: a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.\"",
            "content": "<p>Although you could <a href=\"http://www.sitefinity.com/documentation/documentationarticles/developers-guide/deep-dive/client-side-programming/implementing-your-own-restful-wcf-service\">implement your own RESTful WCF Service in Sitefinity</a>, there is a gem Microsoft dropped into the MVC 4 Beta. I am referring to <a href=\"http://www.asp.net/web-api\">Web API</a>: a framework that makes it <em>easy</em> to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.&#8221;&#8230; <a href=\"https://web.archive.org/web/20150320005853/http://blog.falafel.com/using-aspnet-web-api-for-sitefinity-rest-services/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/using-asp-net-web-api-for-sitefinity-rest-services/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                2,
                10,
                7,
                37
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2012-06-20T15:49:03",
            "modified": "2018-10-21T13:48:47"
        },
        {
            "id": 201,
            "title": "Generic Repository Pattern with Entity Framework and Web API",
            "slug": "generic-repository-pattern-with-entity-framework-and-web-api",
            "type": "post",
            "excerpt": "If you are like any other coder, cutting and pasting snippets should put up a red flag in your mind. You will quickly hit this threshold when creating CRUD-services for MVC 4 applications over and over again. This lead me to create a repository pattern using generic types and base controller classes that I would like to share with you.",
            "content": "<p>If you are like any other coder, cutting and pasting snippets should put up a red flag in your mind. You will quickly hit this threshold when creating CRUD-services for MVC 4 applications <em>over and over again</em>. This lead me to create a repository pattern using generic types and base controller classes that I would like to share with you&#8230; <a href=\"https://web.archive.org/web/20150319013058/http://blog.falafel.com/generic-repository-pattern-with-entity-framework-and-web-api/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/generic-repository-pattern-with-entity-framework-and-web-api/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                2,
                11,
                38,
                37
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2013-02-05T15:36:26",
            "modified": "2018-10-21T13:47:52"
        },
        {
            "id": 187,
            "title": "Add Page Names as HTML Classes",
            "slug": "add-page-names-as-html-classes",
            "type": "post",
            "excerpt": "Wouldn't it be great if you can specify different styles per page all from the stylesheet? For example, your home page may have a larger header section than the rest of your pages. The solution would be to add a different class on each page so you can do something like this.",
            "content": "<div id=\"post-area\" class=\"col span_9\">\n<article id=\"post-234\" class=\"post-234 post type-post status-publish format-standard hentry tag-css tag-html tag-javascript_\">\n<div class=\"post-content\">\n<div class=\"content-inner\">\n<p>Wouldn’t it be great if you can specify different styles per page all from the stylesheet? For example, your home page may have a larger header section than the rest of your pages. The solution would be to add a different class on each page so you can do something like this:</p>\n<pre class=\"lang:js decode:true\">.header {\r\n  height: 30px;\r\n}\r\n \r\n.home .header {\r\n  height: 100px;\r\n}</pre>\n<p>Only problem with this is most of the time your pages are generated by a content management system or web application. That means, you would have to hook into the page lifecycle and add the page name to the &lt;html&gt; or &lt;body&gt; tag. That seems like overkill. JavaScript to the rescue!</p>\n<h2>Page Name as Class</h2>\n<p>Add this in your startup script to add the page name to the &lt;html&gt; tag:</p>\n<pre class=\"lang:js decode:true\">//ADD PAGE NAME TO HTML TAG AS CLASS\r\nvar file = window.location.pathname;\r\nvar index = file.lastIndexOf('/');\r\nvar page = index &gt;= 0 ? file.substring(index + 1).toLowerCase() : '';\r\n$(document.documentElement).addClass(page || 'home');</pre>\n<p>First it is getting the page name by finding the last segment of the URL. Then it goes to the root object (&lt;html&gt;) and adds the page name as a class to it. It defaults to ‘home’ if there is no page in the URL. Now each page will have its own specific class name!</p>\n<pre class=\"lang:js decode:true\">&lt;html class=\"home\"&gt;</pre>\n<h2>Page Title as Class</h2>\n<p>If the page file name is not enough for you as the class name, you can use the document title as the class name. That will give you more control over what class name is generated. It will need to be scrubbed from special characters though because there is a specification on what are valid class characters. Here’s how you would do that:</p>\n<pre class=\"lang:js decode:true\">//ADD TITLE TO HTML TAG AS CLASS\r\nif (document.title)\r\n  $(document.documentElement)\r\n    .addClass(_.slugify(document.title));</pre>\n<p>In this case, it is checking if a page title even exists, then going to the root object (&lt;html&gt;) and adds the scubbed page title as a class to it. <span>The magic ingredient here is <a href=\"https://web.archive.org/web/20150319194502/http://epeli.github.io/underscore.string/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">underscore-string’s</a> <em>_.slugify</em> function will will scrub the name for valid class names. It is a great plugin to the famous <a href=\"https://web.archive.org/web/20150319194502/http://underscorejs.org/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">underscore.js</a> project. It’s open source so you can steal the RegEx from the <a href=\"https://web.archive.org/web/20150319194502/https://github.com/epeli/underscore.string\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">source code</a> if you like.  Now each page will have the title as a class name.</span></p>\n<p>This should make your graphic designers very happy <img src=\"https://web.archive.org/web/20150319194502im_/http://blog.falafel.com/wp-includes/images/smilies/icon_wink.gif\" alt=\";)\" class=\"wp-smiley\" scale=\"0\" /></p>\n<p><strong><em>NOTE:</em></strong> I recommend prefixing the class name with page-* to prevent conflicting with other class names.<a href=\"https://web.archive.org/web/20150319194502/http://blog.falafel.com/author/basem-emara/\" rel=\"nofollow\" class=\"no-ajaxy\"></a></p>\n</div>\n</div>\n</article>\n</div>\n",
            "link": "https://staging1.basememara.com/add-page-names-as-html-classes/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                32,
                3
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2013-09-06T15:24:03",
            "modified": "2018-10-21T13:44:42"
        },
        {
            "id": 171,
            "title": "New Drag to Drop Widget for Kendo UI",
            "slug": "new-drag-to-drop-widget-for-kendo-ui",
            "type": "post",
            "excerpt": "Kendo UI has an excellent drag and drop framework. Although it has a nice API and is very capable, I found it a bit difficult to understand due to the disconnected implementation between the drag and the drop. There are two separate widgets to create a single drag and drop action: one is the kendoDraggable widget and the other is the kendoDropTarget.",
            "content": "<p><a href=\"http://www.telerik.com/kendo-ui\" target=\"_blank\" rel=\"noopener\">Kendo UI</a> has an excellent <a href=\"http://demos.telerik.com/kendo-ui/web/dragdrop/index.html\" target=\"_blank\" rel=\"noopener\">drag and drop framework</a>. Although it has a nice <a href=\"http://docs.telerik.com/kendo-ui/getting-started/framework/draganddrop/overview\" target=\"_blank\" rel=\"noopener\">API</a> and is very capable, I found it a bit difficult to understand due to the disconnected implementation between the drag and the drop. There are two separate widgets to create a single drag and drop action: one is the <a href=\"http://docs.telerik.com/kendo-ui/api/framework/draggable\" target=\"_blank\" rel=\"noopener\">kendoDraggable</a> widget and the other is the <a href=\"http://docs.telerik.com/kendo-ui/api/framework/droptarget\" target=\"_blank\" rel=\"noopener\">kendoDropTarget</a>&#8230; <a href=\"https://web.archive.org/web/20151029123718/http://blog.falafel.com/new-drag-to-drop-widget-for-kendo-ui/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/new-drag-to-drop-widget-for-kendo-ui/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                3,
                8
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2014-03-04T04:03:38",
            "modified": "2018-10-21T13:41:33"
        },
        {
            "id": 169,
            "title": "The Truth About False in JavaScript",
            "slug": "the-truth-about-false-in-javascript",
            "type": "post",
            "excerpt": "The distinction between true and false is a blurry line in JavaScript. This is why you hear the term \"truthy/falsy\" in the JavaScript world. As a follow up to Noel's blog post, I would like to focus only on one side of the coin. It was inspired by a pop quiz from my teammate, Jesse Liberty.",
            "content": "<p>The distinction between <em>true </em>and <em>false </em>is a blurry line in JavaScript. This is why you hear the term &#8220;<em>truthy/falsy</em>&#8221; in the JavaScript world. As a follow up to <a href=\"http://blog.falafel.com/blogs/noel-rice/2012/04/23/the-truth-about-javascript\">Noel&#8217;s blog post</a>, I would like to focus only on one side of the coin. It was inspired by a pop quiz from my teammate, <a href=\"http://blog.falafel.com/blogs/jesseliberty\">Jesse Liberty</a>&#8230; <a href=\"https://web.archive.org/web/20160403205914/http://blog.falafel.com/the-truth-about-false-in-javascript/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/the-truth-about-false-in-javascript/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                3
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2014-03-14T03:53:32",
            "modified": "2018-10-21T13:41:03"
        },
        {
            "id": 165,
            "title": "Getting Started with Node.js for Windows",
            "slug": "getting-started-with-node-js-for-windows",
            "type": "post",
            "excerpt": "With the recent announcements of Paypal and Netflix moving to Node.js, the server-side JavaScript platform has proven itself worthy to enterprises. It's one small step for Node, one giant leap for JavaScript! From developers of .NET, Java, PHP, Ruby on Rails, and more, all walks of server-side coders are converging to the platform. And as bigger players like Yahoo, Walmart, and Oracle join the table, Node is loosing its reputation as being intrinsically immature and unstable. In this post, I would like to show you how easy it is to set up Node.js in a Windows world.",
            "content": "<p>With the recent announcements of <a href=\"http://www.infoworld.com/t/javascript/paypal-and-netflix-cozy-nodejs-237593\" target=\"_blank\" rel=\"noopener\">Paypal and Netflix moving to Node.js</a>, the server-side JavaScript platform has proven itself worthy to enterprises. It&#8217;s one small step for Node, one giant leap for JavaScript! From developers of .NET, Java, PHP, Ruby on Rails, and more, all walks of server-side coders are converging to the platform. And as bigger players like <a href=\"http://blog.appfog.com/node-js-is-taking-over-the-enterprise-whether-you-like-it-or-not/\" target=\"_blank\" rel=\"noopener\">Yahoo, Walmart, and Oracle</a> join the table, Node is loosing its reputation as being intrinsically immature and unstable. In this post, I would like to show you how easy it is to set up Node.js in a Windows world&#8230; <a href=\"https://web.archive.org/web/20160314053936/http://blog.falafel.com/getting-started-with-nodejs-for-windows/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/getting-started-with-node-js-for-windows/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 166,
            "terms": [
                3,
                27,
                7
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2014-03-18T03:37:57",
            "modified": "2018-10-21T13:40:07"
        },
        {
            "id": 160,
            "title": "Geolocation Tracking in Kendo UI Mobile and Google Maps",
            "slug": "geolocation-tracking-in-kendo-ui-mobile-and-google-maps",
            "type": "post",
            "excerpt": "There are many posts out there about getting the current geolocation of a user via HTML5. However, in this post, I would like to show you how you can track a user's geolocation. After all, what good is getting the current location of a user if they are mobile and on the move? The geolocation API is exposed in JavaScript using the navigator object.",
            "content": "<p>There are many posts out there about getting the current geolocation of a user via HTML5. However, in this post, I would like to show you how you can <em>track </em>a user&#8217;s geolocation. After all, what good is getting the current location of a user if they are mobile and on the move? The geolocation API is exposed in JavaScript using the navigator object&#8230; <a href=\"https://web.archive.org/web/20150318191844/http://blog.falafel.com/geolocation-tracking-in-kendo-ui-mobile-and-google-maps/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/geolocation-tracking-in-kendo-ui-mobile-and-google-maps/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 161,
            "terms": [
                26,
                12,
                3,
                8,
                4
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2014-04-30T03:09:17",
            "modified": "2018-10-21T13:38:19"
        },
        {
            "id": 191,
            "title": "Kendo Class Inheritance and RequireJS",
            "slug": "kendo-class-inheritance-and-requirejs",
            "type": "post",
            "excerpt": "Kendo UI includes base class objects that provides class inheritance. This is very useful for creating elegant, object-oriented JavaScript code. Couple this with RequireJS and you have a very scalable architecture.",
            "content": "<p><a href=\"http://www.kendoui.com/\" target=\"_blank\" rel=\"noopener\">Kendo UI</a> includes <a href=\"http://docs.kendoui.com/api/framework/class\" target=\"_blank\" rel=\"noopener\">base class objects</a> that provides class inheritance. This is very useful for creating elegant, object-oriented JavaScript code. Couple this with <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">RequireJS</a> and you have a very scalable architecture&#8230; <a href=\"https://web.archive.org/web/20150320015129/http://blog.falafel.com/kendo-class-inheritance-and-requirejs/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/kendo-class-inheritance-and-requirejs/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                3,
                8,
                9
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2013-07-15T15:27:44",
            "modified": "2018-10-21T13:37:28"
        },
        {
            "id": 153,
            "title": "Redirecting Mobile Users by Screen Size Instead of Device Type",
            "slug": "redirecting-mobile-users-by-screen-size-instead-of-device-type",
            "type": "post",
            "excerpt": "Let's face it, the web was not designed for phones. For the past decade, developers have been desperately retrofitting the web for a post-mobile world. We need something more fundamental, such as extending the User Agent to include attributes like screen size values. Until then, I would like to present another used approach which is to redirect users by screen size via JavaScript instead of using the User Agent.",
            "content": "<p>Let&#8217;s face it, the web was not designed for phones. For the past decade, developers have been desperately retrofitting the web for a post-mobile world. We need something more fundamental, such as extending the User Agent to include attributes like screen size values. Until then, I would like to present another used approach which is to redirect users by screen size via JavaScript instead of using the User Agent&#8230; <a href=\"https://web.archive.org/web/20150928043058/http://blog.falafel.com/redirecting-mobile-users-by-screen-size-instead-of-device-type/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/redirecting-mobile-users-by-screen-size-instead-of-device-type/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                3,
                4,
                15
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2014-06-12T02:39:48",
            "modified": "2018-10-21T13:34:35"
        },
        {
            "id": 140,
            "title": "New Kendo UI Media Player Widget with MVVM",
            "slug": "new-kendo-ui-media-player-widget-with-mvvm",
            "type": "post",
            "excerpt": "Kendo UI has a nice array of widgets to offer and has a stellar framework where you can create your own widgets. In this post, I would like to introduce a new Kendo UI Media Player widget that is web, mobile, and MVVM compatible.",
            "content": "<p><a href=\"https://web.archive.org/web/20170817041957/http://www.telerik.com/kendo-ui\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Kendo UI</a> has a nice array of widgets to offer. Not as vast as <a href=\"https://web.archive.org/web/20170817041957/http://demos.telerik.com/aspnet-ajax/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Telerik’s archiac RadControls suite</a>, but it’s getting closer with every release. Every once in awhile, I wish Kendo had a missing widget available, instead of scouring the web for a carousel or a tag cloud. Fortunately, Kendo UI has a stellar framework where you can <a href=\"https://web.archive.org/web/20170817041957/http://docs.telerik.com/kendo-ui/howto/create-custom-kendo-widget\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">create your own widgets</a>. In this post, I would like to introduce a new Kendo UI Media Player widget that is <em>web</em>, <em>mobile</em>, and <em>MVVM</em> compatible.</p>\n<h2>Yet Another Media Player?</h2>\n<p>Ok, so <em>“yet another”</em> media player you may ask. There are a couple of good ones out there, such as <a href=\"https://web.archive.org/web/20170817041957/http://mediaelementjs.com/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">MediaElement</a>and <a href=\"https://web.archive.org/web/20170817041957/http://jplayer.org/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">jPlayer,</a> and even powerful video players like <a href=\"https://web.archive.org/web/20170817041957/https://flowplayer.org/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">FlowPlayer</a>, <a href=\"https://web.archive.org/web/20170817041957/http://www.jwplayer.com/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">JW Player</a>, <a href=\"https://web.archive.org/web/20170817041957/http://www.sublimevideo.net/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">SublimeVideo</a>, and <a href=\"https://web.archive.org/web/20170817041957/http://www.videojs.com/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Video.js</a>. However, a few things were lacking: <em>no MVVM support, little or no playlist capability, and flexibility with integrating your own button controls</em>. Making it a first-class citizen of Kendo UI is a nice added bonus.</p>\n<p>To give you a peek at the end game, below is what we will end up:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2014/08/kendo-media-player.png\" alt=\"\" width=\"321\" height=\"567\" class=\"aligncenter size-full wp-image-41437\" /></p>\n<p><a href=\"https://web.archive.org/web/20170817041957/http://blog.falafel.com/wp-content/uploads/2014/08/kendo-media-player.png\" rel=\"prettyPhoto[gallery-HRu2]\" class=\"no-ajaxy\"></a>It does video too. Are you excited yet? So let’s get started…</p>\n<h2>HTML5 Media Support</h2>\n<p>With HTML5, built-in media support via the <em>&lt;audio&gt;</em> and <em>&lt;video&gt;</em> elements were introduced, offering a rich API and the ability to easily embed media into HTML documents. All we are going to do is wrap the HTML5 API’s with a Kendo widget and expose some extended functionality. Forget falling back to Flash since this would unnecessarily complicate things and we really need Flash to rest in peace.</p>\n<h2>Media Events and Methods</h2>\n<p>Let’s determine what kind of events and methods to expose. For the native HTML5 <em>&lt;audio&gt;</em> and <em>&lt;video&gt;</em>elements, <a href=\"https://web.archive.org/web/20170817041957/https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">there are API’s</a> we will simply expose through our widget:</p>\n<p><em>HTML Media Element events:</em></p>\n<ul>\n<li>ended</li>\n<li>error</li>\n<li>loadeddata</li>\n<li>loadedmetadata</li>\n<li>loadstart</li>\n<li>pause</li>\n<li>play</li>\n<li>playing</li>\n<li>progress</li>\n<li>ratechange</li>\n<li>seeked</li>\n<li>seeking</li>\n<li>timeupdate</li>\n<li>volumechange</li>\n</ul>\n<p><em>HTML Media Element methods:</em></p>\n<ul>\n<li>play</li>\n<li>pause</li>\n<li>stop</li>\n<li>playbackRate</li>\n<li>readyState</li>\n<li>seeking</li>\n<li>currentTime</li>\n<li>volume</li>\n<li>muted</li>\n</ul>\n<p>On top of the native API’s, we will be providing our own sugar:</p>\n<p><em>Custom events:</em></p>\n<ul>\n<li>change</li>\n<li>dataBinding</li>\n<li>dataBound</li>\n<li>playlistEnded</li>\n</ul>\n<p><em>Custom methods:</em></p>\n<ul>\n<li>mediaSrc</li>\n<li>getMediaByFile</li>\n<li>getLoadedMedia</li>\n<li>isLastMedia</li>\n<li>add</li>\n<li>previous</li>\n<li>next</li>\n<li>toggleControls</li>\n<li>toggleLoop</li>\n<li>toggleLoopAll</li>\n<li>toggleContinuous</li>\n</ul>\n<p>Notice implied by the events and methods, we will have a full fledged dataSource behind our Kendo Media Player widget.</p>\n<h2>Kendo UI Media Player Skeleton</h2>\n<p>It is time to lay down the skeleton that will be used for our widget. We will be extending <em>kendo.ui.Widget</em> to provide initialization and integration with Kendo UI dataSource and MVVM.</p>\n<pre class=\"lang:js decode:true \">kendo.ui.plugin(kendo.ui.Widget.extend({\r\n    /**\r\n     * Constructor\r\n     * @param element\r\n     * @param options\r\n     */\r\n    init: function (element, options) {\r\n        //BASE CALL TO WIDGET INITIALIZATION\r\n        kendo.ui.Widget.fn.init.call(this, element, options);\r\n \r\n        //INITIALIZE PARTS\r\n        this.initStyles();\r\n        this.initElements();\r\n        this.initEvents();\r\n        this.initDataSource();\r\n    },\r\n \r\n    /**\r\n     * Widget options for initialization\r\n     */\r\n    options: {\r\n        name: 'MediaPlayer',\r\n        type: 'audio',\r\n        preload: 'auto',\r\n        autoBind: true,\r\n        autoPlay: false,\r\n        enableControls: true,\r\n        enableLoop: false,\r\n        enableLoopAll: true,\r\n        enableContinuous: true,\r\n        enablePlaylist: true,\r\n        enableStyles: true,\r\n        playSelector: null,\r\n        pauseSelector: null,\r\n        stopSelector: null,\r\n        previousSelector: null,\r\n        nextSelector: null,\r\n        controlsSelector: null,\r\n        loopSelector: null,\r\n        loopAllSelector: null,\r\n        continuousSelector: null,\r\n        template: '',\r\n        playlistTemplate: ''\r\n    },\r\n \r\n    /**\r\n     * Public API events used by widgets or MVVM\r\n     */\r\n    events: [\r\n        //Called before mutating DOM\r\n        DATABINDING,\r\n        //Called after mutating DOM\r\n        DATABOUND,\r\n        //The metadata has loaded or changed, indicating a change in duration of the media.  This is sent, for example, when the media has loaded enough that the duration is known.\r\n        DURATIONCHANGE,\r\n        //Sent when playback completes.\r\n        ENDED,\r\n        //Sent when an error occurs.  The element's error attribute contains more information.\r\n        ERROR,\r\n        //The first frame of the media has finished loading.\r\n        LOADEDDATA,\r\n        //The media's metadata has finished loading; all attributes now contain as much useful information as they're going to.\r\n        LOADEDMETADATA,\r\n        //Sent when loading of the media begins.\r\n        LOADSTART,\r\n        //Sent when playback is paused.\r\n        PAUSE,\r\n        //Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.\r\n        PLAY,\r\n        //Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).\r\n        PLAYING,\r\n        //Sent periodically to inform interested parties of progress downloading the media. Information about the current amount of the media that has been downloaded is available in the media element's buffered attribute.\r\n        PROGRESS,\r\n        //Sent when the playback speed changes.\r\n        RATECHANGE,\r\n        //Sent when a seek operation completes.\r\n        SEEKED,\r\n        //Sent when a seek operation begins.\r\n        SEEKING,\r\n        //The time indicated by the element's currentTime attribute has changed.\r\n        TIMEUPDATE,\r\n        //Sent when the audio volume changes (both when the volume is set and when the muted attribute is changed).\r\n        VOLUMECHANGE,\r\n        //Sent when playlist completes.\r\n        PLAYLISTENDED\r\n    ],\r\n \r\n    /**\r\n     * Register CSS style rules\r\n     */\r\n    initStyles: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Create templates for rendering to DOM\r\n     */\r\n    initElements: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Bind events\r\n     */\r\n    initEvents: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Creates the data source\r\n     */\r\n    initDataSource: function() {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Change data source dynamically via MVVM\r\n     * @param dataSource\r\n     */\r\n    setDataSource: function(dataSource) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * DOM elements that represent the output for MVVM\r\n     */\r\n    items: function() {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Re-renders the widget with all associated data\r\n     */\r\n    refresh: function() {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Set media source for HTML element\r\n     * @param value\r\n     */\r\n    mediaSrc: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Gets media by file from data source\r\n     * @param value\r\n     */\r\n    getMediaByFile: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Get currently loaded media\r\n     * @returns {*}\r\n     */\r\n    getLoadedMedia: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Is the loaded media the last in the playlist\r\n     * @returns {boolean}\r\n     */\r\n    isLastMedia: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Add media to data source\r\n     * @param value\r\n     */\r\n    add: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Plays media\r\n     */\r\n    play: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Pauses media\r\n     */\r\n    pause: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Stops media\r\n     */\r\n    stop: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * The current rate at which the media is being played back.\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    playbackRate: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * The readiness state of the media.\r\n     */\r\n    readyState: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Indicates whether the media is in the process of seeking to a new position.\r\n     */\r\n    seeking: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Seek to specified seconds\r\n     * or returns the number of seconds the browser has played\r\n     */\r\n    currentTime: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Increase or decrease volume of player\r\n     * @param value\r\n     * @returns volume\r\n     */\r\n    volume: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Gets or sets muting the player\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    muted: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Go to the previous media\r\n     */\r\n    previous: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Go to the next media\r\n     */\r\n    next: function () {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Enables or disables controls\r\n     * @param value\r\n     */\r\n    toggleControls: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Enables or disables loop functionality\r\n     * @param value\r\n     */\r\n    toggleLoop: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Enables or disables loop all functionality\r\n     * @param value\r\n     */\r\n    toggleLoopAll: function (value) {\r\n    \r\n    },\r\n \r\n    /**\r\n     * Enables or disables continuous functionality\r\n     * @param value\r\n     */\r\n    toggleContinuous: function (value) {\r\n    \r\n    }\r\n \r\n}));</pre>\n<p>This is basically our API for our Kendo UI Media Player widget. Notice the options to configure it, along with the available events and methods it will use.</p>\n<p>To enable MVVM support for binding properties and events to observable objects, we will also have to add custom binders at the end. Below is the skeleton for that. Notice I first have to create a “<em>mediaplayer</em>” namespace under the widget binders. That way, I’m not listening to other widgets for these binder, nor am I overwriting any other widget’s binders either. Thanks to my teammate, <a href=\"https://web.archive.org/web/20170817041957/http://blog.falafel.com/author/jeff-valore/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Jeff Valore</a>, for this valuable, undocumented piece of knowledge.</p>\n<pre class=\"lang:js decode:true\">kendo.data.binders.widget.mediaplayer = {};\r\n \r\nkendo.data.binders.widget.mediaplayer.controls = kendo.data.Binder.extend\r\n \r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.loop = kendo.data.Binder.extend({\r\n \r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.loopAll = kendo.data.Binder.extend({\r\n \r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.continuous = kendo.data.Binder.extend\r\n \r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.playlistended = kendo.data.Binder.extend({\r\n \r\n});\r\n \r\n//BASE BINDER FOR MVVM MEDIA EVENTS\r\nvar MediaBinder = kendo.data.Binder.extend({\r\n \r\n});\r\n \r\n//BIND MVVM MEDIA EVENTS\r\nkendo.data.binders.widget.mediaplayer.durationchange = MediaBinder.extend({ eventName: DURATIONCHANGE });\r\nkendo.data.binders.widget.mediaplayer.ended = MediaBinder.extend({ eventName: ENDED });\r\nkendo.data.binders.widget.mediaplayer.error = MediaBinder.extend({ eventName: ERROR });\r\nkendo.data.binders.widget.mediaplayer.loadeddata = MediaBinder.extend({ eventName: LOADEDDATA });\r\nkendo.data.binders.widget.mediaplayer.loadedmetadata = MediaBinder.extend({ eventName: LOADEDMETADATA });\r\nkendo.data.binders.widget.mediaplayer.loadstart = MediaBinder.extend({ eventName: LOADSTART });\r\nkendo.data.binders.widget.mediaplayer.pause = MediaBinder.extend({ eventName: PAUSE });\r\nkendo.data.binders.widget.mediaplayer.play = MediaBinder.extend({ eventName: PLAY });\r\nkendo.data.binders.widget.mediaplayer.playing = MediaBinder.extend({ eventName: PLAYING });\r\nkendo.data.binders.widget.mediaplayer.progress = MediaBinder.extend({ eventName: PROGRESS });\r\nkendo.data.binders.widget.mediaplayer.ratechange = MediaBinder.extend({ eventName: RATECHANGE });\r\nkendo.data.binders.widget.mediaplayer.seeked = MediaBinder.extend({ eventName: SEEKED });\r\nkendo.data.binders.widget.mediaplayer.seeking = MediaBinder.extend({ eventName: SEEKING });\r\nkendo.data.binders.widget.mediaplayer.timeupdate = MediaBinder.extend({ eventName: TIMEUPDATE });\r\nkendo.data.binders.widget.mediaplayer.volumechange = MediaBinder.extend({ eventName: VOLUMECHANGE });</pre>\n<h2>Kendo UI Media Player Flesh</h2>\n<p>We are now ready add flesh to our widget. I will cover it step-by-step, then offer the complete widget at the end. First, let’s add a custom CSS class to our widget in case someone’s to reference or style it later. We do this in the <em>init</em>:</p>\n<pre class=\"lang:js decode:true\">init: function (element, options) {\r\n    //BASE CALL TO WIDGET INITIALIZATION\r\n    kendo.ui.Widget.fn.init.call(this, element, options);\r\n \r\n    //ADD CSS TO WIDGET FOR STYLING\r\n    this.element.addClass('k-mediaplayer');\r\n \r\n    //INITIALIZE PARTS\r\n    this.initStyles();\r\n    this.initElements();\r\n    this.initEvents();\r\n    this.initDataSource();\r\n},</pre>\n<h2>Kendo UI Media Player DOM</h2>\n<p>For the initialization of the widget parts, we will add our own styles and mutate the DOM. I will add styles programmatically so I don’t have to have a dependency on an outside stylesheet file. It is only a few CSS rules, so it’s not so bad.</p>\n<pre class=\"lang:js decode:true\">initStyles: function () {\r\n    //ADD CSS RULES DYNAMICALLY\r\n    var addCssRule = function(styles) {\r\n        var style = document.createElement('style');\r\n        style.type = 'text/css';\r\n \r\n        if (style.styleSheet) style.styleSheet.cssText = styles; //IE\r\n        else style.innerHTML = styles; //OTHERS\r\n \r\n        document.getElementsByTagName('head')[0].appendChild(style);\r\n    };\r\n \r\n    if (this.options.enableStyles) {\r\n        //ADD CSS RULES FOR WIDGET\r\n        addCssRule('.k-mediaplayer { width: 99%; padding: 10px; }');\r\n        addCssRule('.km-root .k-mediaplayer { width: 100%; }');\r\n        addCssRule('.k-mediaplayer audio, .k-mediaplayer video { width: 100%; }');\r\n        addCssRule('.k-mediaplayer .playlist { padding: 0; margin: 0;  border-top: 1px dotted #ccc; }');\r\n        addCssRule('.k-mediaplayer .playlist li { cursor: pointer; list-style: none; padding: 3px; padding: 10px; border: 1px dotted #ccc; border-top: none; }');\r\n        addCssRule('.k-mediaplayer .playlist li:hover, .k-mediaplayer .playlist li.selected { background-color: #ddd; }');\r\n    }\r\n}</pre>\n<p>For the DOM element manipulation, I will create the HTML element using our private method called <em>_createMediaTag</em>, which will be based on whether the user passed in ‘<em>audio</em>‘ or ‘<em>video</em>‘ for the media type. Then it will create the HTML media tag accordingly. We will also render the playlist if enabled using a <a href=\"https://web.archive.org/web/20170817041957/http://docs.telerik.com/kendo-ui/api/framework/kendo#methods-template\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Kendo template</a> for easy binding to an array of objects. Also, caching the HTML elements into the widget properties would be convenient and preformant for later use.</p>\n<pre class=\"lang:js decode:true\">initElements: function () {\r\n    var templateHtml = '';\r\n \r\n    //BUILD AND CACHE OUTPUT FOR RENDERING MEDIA CONTROL\r\n    this.element.html(this._createMediaTag());\r\n    this.mediaElement = this.element.find(this.options.type)[0];\r\n \r\n    //BUILD PLAYLIST TEMPLATE IF APPLICABLE\r\n    if (this.options.enablePlaylist) {\r\n        //BUILD OUTPUT FOR RENDERING PLAYLIST\r\n        templateHtml += this.options.playlistTemplate\r\n            || ('&lt;ul class=\"playlist\"&gt;# for (var i = 0; i &lt; data.length; i++) { #'\r\n            + '&lt;li data-file=\"#= data[i].file #\"&gt;#= data[i].title #&lt;/li&gt;'\r\n            + '# } #&lt;/ul&gt;');\r\n    }\r\n \r\n    //CACHE CONTENT PLACEHOLDERS FOR LATER USE\r\n    this.element.append('&lt;div class=\"content-wrapper\"&gt;&lt;/div&gt;');\r\n    this.contentElement = this.element.find('.content-wrapper');\r\n \r\n    //COMPILE TEMPLATE FOR LATER USE\r\n    this.template = kendo.template(templateHtml);\r\n}</pre>\n<p>In our widget, we must have a <em>refresh</em> method that will be called when the DOM needs to be updated. This update will be triggered by a consuming developer or automatically by MVVM when data changes. Below you will notice that we are explicitly triggering the <em>dataBinding</em> event before the rendering and after it. That will call any associated events subscribed to it.</p>\n<p>For the actual rendering itself, we bind our dataSource to the template we created in the <em>initElement</em> method. This will hold our playlist, then we add it to the content placeholder that we also created in the <em>initElement</em>method. In case the media type was changed, we have to replace the HTML element in the DOM also.</p>\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">/**\r\n* Re-renders the widget with all associated data\r\n*/\r\nrefresh: function() {\r\n    //TRIGGER DATA BINDING BEFORE RENDER\r\n    this.trigger(DATABINDING);\r\n \r\n    //INITIALIZE VARIABLES\r\n    var view = this.dataSource.view(),\r\n        html = view.length ? this.template(view) : '';\r\n \r\n    //RENDER DATA TO DOM PLACEHOLDER\r\n    this.contentElement.html(html);\r\n \r\n    //REPLACE MEDIA DOM ELEMENT IF APPLICABLE\r\n    if (this.options.type != this.mediaElement.tagName.toLowerCase()) {\r\n        var temp = $(this._createMediaTag());\r\n        $(this.mediaElement).replaceWith(temp);\r\n        this.mediaElement = temp[0];\r\n    }\r\n \r\n    //POPULATE FIRST MEDIA IF NONE LOADED OR DOES NOT EXIST\r\n    if (view.length\r\n        &amp;&amp; (!this.mediaSrc() || !this.getMediaByFile(this.mediaSrc()))) {\r\n        this.mediaSrc(view[0].file);\r\n        this.refreshDisplay();\r\n    }\r\n \r\n    //TRIGGER DATA BINDING AFTER RENDER COMPLETE\r\n    this.trigger(DATABOUND);\r\n},\r\n \r\n/**\r\n* Updates the interface based on new or updated media\r\n*/\r\nrefreshDisplay: function () {\r\n    var me = this;\r\n    var playlistItems = this.contentElement.find('.playlist li');\r\n \r\n    //RESET DISPLAY\r\n    playlistItems.removeClass('selected');\r\n \r\n    //SELECT ACTIVE MEDIA FROM PLAYLIST IF APPLICABLE\r\n    if (this.mediaSrc()) {\r\n        playlistItems.each(function () {\r\n            var $this = $(this);\r\n \r\n            //MATCH LOADED MEDIA TO PLAYLIST ITEM\r\n            if ($this.attr('data-file') == me.mediaSrc()) {\r\n                //ACTIVATE ELEMENT\r\n                $this.addClass('selected');\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n}</pre>\n<p>When the rendering is complete, we call our own method above, <em>refreshDisplay</em>, to handle any selected or active elements. These are just indicators to the user, such as which playlist file is currently being played.</p>\n<h2>Kendo UI Media Player Events</h2>\n<p>Next comes the handling of events. We will bind custom events to our widget and native events directly to the HTML media element.</p>\n<pre class=\"lang:js decode:true\">/**\r\n* Bind events\r\n*/\r\ninitEvents: function () {\r\n    var me = this;\r\n    var $document = $(document.body);\r\n \r\n    //DETERMINE CLICK EVENT TO USE\r\n    //http://stackoverflow.com/questions/10165141/jquery-on-and-delegate-doesnt-work-on-ipad\r\n    var clickEventName = (kendo.support.mobileOS &amp;&amp; kendo.support.mobileOS.browser == 'mobilesafari')\r\n        ? 'touchstart' : 'click';\r\n \r\n    //BIND MEDIA EVENTS (FOR NON-MVVM)\r\n    this._bindMedia(DURATIONCHANGE, this.options.durationChange);\r\n    this._bindMedia(ENDED, this.options.ended);\r\n    this._bindMedia(ERROR, this.options.error);\r\n    this._bindMedia(LOADEDDATA, this.options.loadedData);\r\n    this._bindMedia(LOADEDMETADATA, this.options.loadedMetadata);\r\n    this._bindMedia(LOADSTART, this.options.loadStart);\r\n    this._bindMedia(PAUSE, this.options.pause);\r\n    this._bindMedia(PLAY, this.options.play);\r\n    this._bindMedia(PLAYING, this.options.playing);\r\n    this._bindMedia(PROGRESS, this.options.progress);\r\n    this._bindMedia(RATECHANGE, this.options.rateChange);\r\n    this._bindMedia(SEEKED, this.options.seeked);\r\n    this._bindMedia(SEEKING, this.options.seeking);\r\n    this._bindMedia(TIMEUPDATE, this.options.timeUpdate);\r\n    this._bindMedia(VOLUMECHANGE, this.options.volumeChange);\r\n \r\n    //HANDLE PLAYLIST IF APPLICABLE\r\n    this._bindMedia(ENDED, function () {\r\n        //HANDLE LAST ITEM IF APPLICABLE\r\n        if (me.isLastMedia()) {\r\n            //EXECUTE CALLBACK FOR ENDED PLAYLIST\r\n            me.trigger(PLAYLISTENDED);\r\n \r\n            //LOOP TO BEGINNING IF APPLICABLE\r\n            if (me.options.enableLoopAll) {\r\n                me.next();\r\n            } else {\r\n                me.stop();\r\n            }\r\n        } else {\r\n            //PLAY NEXT ITEM IN PLAYLIST IF APPLICABLE\r\n            if (me.options.enableContinuous) {\r\n                me.next();\r\n            } else {\r\n                me.stop();\r\n            }\r\n        }\r\n    });\r\n \r\n    //HANDLE PLAYLIST ENDED EVENT IF APPLICABLE (FOR NON-MVVM)\r\n    if (this.options.playlistEnded) {\r\n        this.bind(PLAYLISTENDED, this.options.playlistEnded);\r\n    }\r\n \r\n    //SCRUB MEDIA PROPERTIES IF NEEDED\r\n    this.bind(DATABINDING, function () {\r\n        var data = this.dataSource.data();\r\n \r\n        //ITERATE THROUGH MEDIA\r\n        for (var i = 0; i &lt; data.length; i++) {\r\n            //ASSIGN TITLE IF APPLICABLE\r\n            if (!data[i].title) {\r\n                data[i].title = me._convertFileToTitle(data[i].file);\r\n            }\r\n        }\r\n    });\r\n \r\n    //HANDLE PLAYLIST EVENTS\r\n    if (this.options.enablePlaylist) {\r\n        //ALLOW NAVIGATION OF PLAYLIST ITEMS\r\n        this.contentElement.on('click', '.playlist li', function () {\r\n            //LOAD SELECTED ITEM FROM PLAYLIST\r\n            me.play($(this).attr('data-file'));\r\n        });\r\n    }\r\n \r\n    //SUBSCRIBE EVENTS TO CUSTOM SELECTORS IF APPLICABLE\r\n    if (this.options.playSelector) {\r\n        $document.on(clickEventName, this.options.playSelector, function (e) {\r\n            e.preventDefault();\r\n            me.play();\r\n        });\r\n    }\r\n \r\n    if (this.options.pauseSelector) {\r\n        $document.on(clickEventName, this.options.pauseSelector, function (e) {\r\n            e.preventDefault();\r\n            me.pause();\r\n        });\r\n    }\r\n \r\n    if (this.options.stopSelector) {\r\n        $document.on(clickEventName, this.options.stopSelector, function (e) {\r\n            e.preventDefault();\r\n            me.stop();\r\n        });\r\n    }\r\n \r\n    if (this.options.previousSelector) {\r\n        $document.on(clickEventName, this.options.previousSelector, function (e) {\r\n            e.preventDefault();\r\n            me.previous();\r\n        });\r\n    }\r\n \r\n    if (this.options.nextSelector) {\r\n        $document.on(clickEventName, this.options.nextSelector, function (e) {\r\n            e.preventDefault();\r\n            me.next();\r\n        });\r\n    }\r\n},\r\n \r\n/**\r\n* Binds event to media player\r\n* @param name\r\n* @param callback\r\n*/\r\n_bindMedia: function (name, callback) {\r\n    if (name &amp;&amp; callback) {\r\n        //HANDLE BINDING FOR MEDIA PLAYER AFTER RENDER\r\n        this.bind(DATABOUND, function () {\r\n            if (this.mediaElement) {\r\n                //BIND EVENT TO MEDIA PLAYER AFTER IT RENDERS\r\n                this.mediaElement.addEventListener(name, callback);\r\n            }\r\n        });\r\n    }\r\n}</pre>\n<p>I am determining the click event name based on whether it is iOS or not. Apparently, there is a <a href=\"https://web.archive.org/web/20170817041957/http://stackoverflow.com/questions/10165141/jquery-on-and-delegate-doesnt-work-on-ipad\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">restriction on mobile Safari</a> that won’t let you bubble up delegate events all the way to the document body, unless it’s a <em>touchstart</em> event. I am using this later in the method to bind selectors that were configured by the consuming developer. That way, you have full control over what elements on your page control the media player.</p>\n<p>Also in the events initialization, I am binding all the native events directly to the actual HTML media element. I wrapped it in a private function called <em>_bindMedia</em> so it was more convenience, but eventually it simply does <em>this.mediaElement.addEventListener(name, callback)</em>.</p>\n<p>I added my own custom event to the media <em>ended</em> event to handle continuous play and triggering my custom widget event called <em>playlistEnded</em>. I am doing this by <em>triggering</em> the event, which I bound later directly to my widget using <em>this.bind(PLAYLISTENDED, this.options.playlistEnded)</em>.</p>\n<p>I am also scrubbing my data before rendering using the <em>dataBinding</em> event. If the playlist is enabled, I am wiring up some click events to navigate through it.</p>\n<h2>Kendo UI Media Player DataSource</h2>\n<p>The DataSource is what makes our widget very powerful. We can feed with an array or web service. And the DataSource itself has a vast API that is automatically exposed through our widget. Below is the initialization of it:</p>\n<pre class=\"lang:js decode:true\">/**\r\n* Creates the data source\r\n*/\r\ninitDataSource: function() {\r\n    //IF DATA SOURCE IS DEFINED AND THE REFRESH HANDLER IS WIRED UP,\r\n    //UNBIND BECAUSE DATA SOURCE MUST BE REBUILT\r\n    if (this.dataSource &amp;&amp; this._refreshHandler) {\r\n        //UNBIND SO BINDING CAN BE WIRED UP AFTER DATA SOURCE CREATION\r\n        this.dataSource.unbind(CHANGE, this._refreshHandler);\r\n    }\r\n    else {\r\n        //CREATE CONNECTION BETWEEN INTERNAL _refreshHandler AND PUBLIC REFRESH FUNCTION\r\n        this._refreshHandler = $.proxy(this.refresh, this);\r\n    }\r\n \r\n    //CREATE DATA SOURCE FROM ARRAY OR CONFIG OBJECT\r\n    this.dataSource = kendo.data.DataSource.create(this.options.dataSource);\r\n \r\n    //NOW BIND DATA SOURCE TO REFRESH OF WIDGET\r\n    this.dataSource.bind(CHANGE, this._refreshHandler);\r\n \r\n    //FETCH DATA FIRST TIME IF APPLICABLE\r\n    if (this.options.autoBind) {\r\n        this.dataSource.fetch();\r\n    }\r\n},\r\n \r\n/**\r\n* Change data source dynamically via MVVM\r\n* @param dataSource\r\n*/\r\nsetDataSource: function(dataSource) {\r\n    //SET THE INTERNAL DATA SOURCE EQUAL TO THE ONE PASSED IN BY MVVM\r\n    this.options.dataSource = dataSource;\r\n \r\n    //REBUILD THE DATA SOURCE IF NECESSARY OR JUST REASSIGN\r\n    this.initDataSource();\r\n}</pre>\n<p>There is a <em>_refreshHandler</em> method that is inherited from the Kendo widget base class. This is used by MVVM to automatically trigger it once it needs to refresh the widget on some observable change. We need to be aware of that event. If it has been bound before for some reason, we first unbind it so it doesn’t get bound multiple times to the DataSource.</p>\n<p>We then wire up the <em>_refreshHandler</em> to our own refresh method by using $.proxy. It’s just another way to alias methods together.</p>\n<p>Now comes the part where we take the consuming developer’s data source that was fed during the configuration of the media player and create a DataSource out of it. By using <em>kendo.data.DataSource.create</em>, we are giving the option to configure the widget using a DataSource object or a plain array.</p>\n<p>Finally, we are ready to bind the change event to the <em>_refreshHandler</em> when it changes. Basically, it will re-render it when the data has changed. Our widget is also aware of the <em>autoBind</em> property, which it will fetch if set (fetch only calls the remote data once even if fetch is called multiple times).</p>\n<p>For MVVM, we overrode the <em>setDataSource</em> method so it can set and re-initialize the DataSource when needed.</p>\n<h2>Kendo UI Media Player Methods</h2>\n<p>Although, I will not cover logic in all the methods, I will provide you with an example of how I am wrapping the HTML media element API:</p>\n<pre class=\"lang:js decode:true\">/**\r\n* Pauses media\r\n*/\r\npause: function () {\r\n    this.mediaElement.pause();\r\n}</pre>\n<p>The <em>mediaElement</em> property is one of the elements I cached in the <em>initElements</em> method. Throughout my widget, I can refer to this reference instead of constantly trying to search the DOM for it. This <em>mediaElement</em> is simply the <em>&lt;audio&gt;</em> or <em>&lt;video&gt;</em> element. The “<em>pause()</em>” method is a native HTML5 method on the DOM element, it’s not even jQuery! I am just calling it in the underlying logic of my widget methods.</p>\n<h2>Kendo UI Media Player Binders</h2>\n<p>To allow consuming developers to bind properties and events in the “data-bind” attribute in the HTML, I have to wire up some binders, otherwise I will get an error from Kendo saying: <span><em>The xyz binding is not supported by the MediaPlayer widget</em></span>. Although there is some confusion around it sometimes, it’s not so bad once you see an actual working example:</p>\n<pre class=\"lang:js decode:true\">kendo.data.binders.widget.mediaplayer.continuous = kendo.data.Binder.extend({\r\n    refresh: function () {\r\n        var value = this.bindings.continuous.get();\r\n        var widget = this.element;\r\n \r\n        widget.toggleContinuous(value);\r\n    }\r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.playlistended = kendo.data.Binder.extend({\r\n    init: function (widget, bindings, options) {\r\n        var me = this;\r\n \r\n        kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n \r\n        //HANDLE BINDING FOR MEDIA PLAYER\r\n        widget.bind(PLAYLISTENDED, function () {\r\n            //EXECUTE CALLBACK OPTION\r\n            me.bindings.playlistended.get();\r\n        });\r\n    },\r\n \r\n    refresh: function () {}\r\n});\r\n \r\n//BASE BINDER FOR MVVM MEDIA EVENTS\r\nvar MediaBinder = kendo.data.Binder.extend({\r\n    eventName: null,\r\n \r\n    init: function (widget, bindings, options) {\r\n        var me = this;\r\n \r\n        kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n \r\n        //HANDLE BINDING FOR MEDIA PLAYER\r\n        widget._bindMedia(this.eventName, function () {\r\n            me.bindings[me.eventName].get();\r\n        });\r\n    },\r\n \r\n    refresh: function () {}\r\n});\r\n \r\n//BIND MVVM MEDIA EVENTS\r\nkendo.data.binders.widget.mediaplayer.durationchange = MediaBinder.extend({ eventName: DURATIONCHANGE });</pre>\n<p>For the <em>continuous</em> binder, I am only overriding the <em>refresh</em> event. That’s because all I need to do is first check if the widget is a media player, then call one of the underlying methods. I pass in the value that is bound from the <em>observable object</em>, which is coming from <em>this.bindings.continuous.get()</em>. This will get triggered every time that property changes.</p>\n<p>The <em>playlistended</em> event is handled a bit differently since it needs to be bound to the widget and not simply a widget method call. We do this in the <em>initialization</em> of the binder simply by calling <em>widget.bind</em>. Now any time <em>widget.trigger</em> is called against the same event, this function will get called along with any other functions subscribed to the event. We actually trigger the <em>playlistended</em> event in the in the <em>initEvents</em> method based on some criteria.</p>\n<p>The last set of binders are the binding of events to the native HTML media element. I extended the <em>kendo.data.Binder</em> class to be used for this set of bindings. So for <em>durationchange, ended, error, playing, pause, etc</em>, it will call the <em>_bindMedia</em> method from our widget, which if you remember, eventually calls <em>this.mediaElement.addEventListener</em>.</p>\n<h2>Putting It All Together</h2>\n<p>With the above explanations, let’s see the completed code to get a full overview of it:</p>\n<pre class=\"lang:js decode:true\">/**\r\n* Widget for playing audio\r\n*/\r\nvar CHANGE = 'change',\r\n    DATABINDING = 'dataBinding',\r\n    DATABOUND = 'dataBound',\r\n    DURATIONCHANGE = 'durationchange',\r\n    ENDED = 'ended',\r\n    ERROR = 'error',\r\n    LOADEDDATA = 'loadeddata',\r\n    LOADEDMETADATA = 'loadedmetadata',\r\n    LOADSTART = 'loadstart',\r\n    PAUSE = 'pause',\r\n    PLAY = 'play',\r\n    PLAYING = 'playing',\r\n    PROGRESS = 'progress',\r\n    RATECHANGE = 'ratechange',\r\n    SEEKED = 'seeked',\r\n    SEEKING = 'seeking',\r\n    TIMEUPDATE = 'timeupdate',\r\n    VOLUMECHANGE = 'volumechange',\r\n    PLAYLISTENDED = 'playlistEnded';\r\n \r\nkendo.ui.plugin(kendo.ui.Widget.extend({\r\n    mediaElement: null,\r\n    contentElement: null,\r\n    dataSource: null,\r\n \r\n    /**\r\n     * Constructor\r\n     * @param element\r\n     * @param options\r\n     */\r\n    init: function (element, options) {\r\n        //BASE CALL TO WIDGET INITIALIZATION\r\n        kendo.ui.Widget.fn.init.call(this, element, options);\r\n \r\n        //ADD CSS TO WIDGET FOR STYLING\r\n        this.element.addClass('k-mediaplayer');\r\n \r\n        //INITIALIZE PARTS\r\n        this.initStyles();\r\n        this.initElements();\r\n        this.initEvents();\r\n        this.initDataSource();\r\n    },\r\n \r\n    /**\r\n     * Widget options for initialization\r\n     */\r\n    options: {\r\n        name: 'MediaPlayer',\r\n        type: 'audio',\r\n        preload: 'auto',\r\n        autoBind: true,\r\n        autoPlay: false,\r\n        enableControls: true,\r\n        enableLoop: false,\r\n        enableLoopAll: true,\r\n        enableContinuous: true,\r\n        enablePlaylist: true,\r\n        enableStyles: true,\r\n        playSelector: null,\r\n        pauseSelector: null,\r\n        stopSelector: null,\r\n        previousSelector: null,\r\n        nextSelector: null,\r\n        controlsSelector: null,\r\n        loopSelector: null,\r\n        loopAllSelector: null,\r\n        continuousSelector: null,\r\n        template: '',\r\n        playlistTemplate: ''\r\n    },\r\n \r\n    /**\r\n     * Public API events used by widgets or MVVM\r\n     */\r\n    events: [\r\n        //Called before mutating DOM\r\n        DATABINDING,\r\n        //Called after mutating DOM\r\n        DATABOUND,\r\n        //The metadata has loaded or changed, indicating a change in duration of the media.  This is sent, for example, when the media has loaded enough that the duration is known.\r\n        DURATIONCHANGE,\r\n        //Sent when playback completes.\r\n        ENDED,\r\n        //Sent when an error occurs.  The element's error attribute contains more information.\r\n        ERROR,\r\n        //The first frame of the media has finished loading.\r\n        LOADEDDATA,\r\n        //The media's metadata has finished loading; all attributes now contain as much useful information as they're going to.\r\n        LOADEDMETADATA,\r\n        //Sent when loading of the media begins.\r\n        LOADSTART,\r\n        //Sent when playback is paused.\r\n        PAUSE,\r\n        //Sent when playback of the media starts after having been paused; that is, when playback is resumed after a prior pause event.\r\n        PLAY,\r\n        //Sent when the media begins to play (either for the first time, after having been paused, or after ending and then restarting).\r\n        PLAYING,\r\n        //Sent periodically to inform interested parties of progress downloading the media. Information about the current amount of the media that has been downloaded is available in the media element's buffered attribute.\r\n        PROGRESS,\r\n        //Sent when the playback speed changes.\r\n        RATECHANGE,\r\n        //Sent when a seek operation completes.\r\n        SEEKED,\r\n        //Sent when a seek operation begins.\r\n        SEEKING,\r\n        //The time indicated by the element's currentTime attribute has changed.\r\n        TIMEUPDATE,\r\n        //Sent when the audio volume changes (both when the volume is set and when the muted attribute is changed).\r\n        VOLUMECHANGE,\r\n        //Sent when playlist completes.\r\n        PLAYLISTENDED\r\n    ],\r\n \r\n    /**\r\n     * Register CSS style rules\r\n     */\r\n    initStyles: function () {\r\n        //ADD CSS RULES DYNAMICALLY\r\n        var addCssRule = function(styles) {\r\n            var style = document.createElement('style');\r\n            style.type = 'text/css';\r\n \r\n            if (style.styleSheet) style.styleSheet.cssText = styles; //IE\r\n            else style.innerHTML = styles; //OTHERS\r\n \r\n            document.getElementsByTagName('head')[0].appendChild(style);\r\n        };\r\n \r\n        if (this.options.enableStyles) {\r\n            //ADD CSS RULES FOR WIDGET\r\n            addCssRule('.k-mediaplayer { width: 99%; padding: 10px; }');\r\n            addCssRule('.km-root .k-mediaplayer { width: 100%; }');\r\n            addCssRule('.k-mediaplayer audio, .k-mediaplayer video { width: 100%; }');\r\n            addCssRule('.k-mediaplayer .playlist { padding: 0; margin: 0;  border-top: 1px dotted #ccc; }');\r\n            addCssRule('.k-mediaplayer .playlist li { cursor: pointer; list-style: none; padding: 3px; padding: 10px; border: 1px dotted #ccc; border-top: none; }');\r\n            addCssRule('.k-mediaplayer .playlist li:hover, .k-mediaplayer .playlist li.selected { background-color: #ddd; }');\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Create templates for rendering to DOM\r\n     */\r\n    initElements: function () {\r\n        var templateHtml = '';\r\n \r\n        //BUILD AND CACHE OUTPUT FOR RENDERING MEDIA CONTROL\r\n        this.element.html(this._createMediaTag());\r\n        this.mediaElement = this.element.find(this.options.type)[0];\r\n \r\n        //BUILD PLAYLIST TEMPLATE IF APPLICABLE\r\n        if (this.options.enablePlaylist) {\r\n            //BUILD OUTPUT FOR RENDERING PLAYLIST\r\n            templateHtml += this.options.playlistTemplate\r\n                || ('&lt;ul class=\"playlist\"&gt;# for (var i = 0; i &lt; data.length; i++) { #'\r\n                + '&lt;li data-file=\"#= data[i].file #\"&gt;#= data[i].title #&lt;/li&gt;'\r\n                + '# } #&lt;/ul&gt;');\r\n        }\r\n \r\n        //CACHE CONTENT PLACEHOLDERS FOR LATER USE\r\n        this.element.append('&lt;div class=\"content-wrapper\"&gt;&lt;/div&gt;');\r\n        this.contentElement = this.element.find('.content-wrapper');\r\n \r\n        //COMPILE TEMPLATE FOR LATER USE\r\n        this.template = kendo.template(templateHtml);\r\n    },\r\n \r\n    /**\r\n     * Bind events\r\n     */\r\n    initEvents: function () {\r\n        var me = this;\r\n        var $document = $(document.body);\r\n \r\n        //DETERMINE CLICK EVENT TO USE\r\n        //http://stackoverflow.com/questions/10165141/jquery-on-and-delegate-doesnt-work-on-ipad\r\n        var clickEventName = (kendo.support.mobileOS &amp;&amp; kendo.support.mobileOS.browser == 'mobilesafari')\r\n            ? 'touchstart' : 'click';\r\n \r\n        //BIND MEDIA EVENTS (FOR NON-MVVM)\r\n        this._bindMedia(DURATIONCHANGE, this.options.durationChange);\r\n        this._bindMedia(ENDED, this.options.ended);\r\n        this._bindMedia(ERROR, this.options.error);\r\n        this._bindMedia(LOADEDDATA, this.options.loadedData);\r\n        this._bindMedia(LOADEDMETADATA, this.options.loadedMetadata);\r\n        this._bindMedia(LOADSTART, this.options.loadStart);\r\n        this._bindMedia(PAUSE, this.options.pause);\r\n        this._bindMedia(PLAY, this.options.play);\r\n        this._bindMedia(PLAYING, this.options.playing);\r\n        this._bindMedia(PROGRESS, this.options.progress);\r\n        this._bindMedia(RATECHANGE, this.options.rateChange);\r\n        this._bindMedia(SEEKED, this.options.seeked);\r\n        this._bindMedia(SEEKING, this.options.seeking);\r\n        this._bindMedia(TIMEUPDATE, this.options.timeUpdate);\r\n        this._bindMedia(VOLUMECHANGE, this.options.volumeChange);\r\n \r\n        //HANDLE PLAYLIST IF APPLICABLE\r\n        this._bindMedia(ENDED, function () {\r\n            //HANDLE LAST ITEM IF APPLICABLE\r\n            if (me.isLastMedia()) {\r\n                //EXECUTE CALLBACK FOR ENDED PLAYLIST\r\n                me.trigger(PLAYLISTENDED);\r\n \r\n                //LOOP TO BEGINNING IF APPLICABLE\r\n                if (me.options.enableLoopAll) {\r\n                    me.next();\r\n                } else {\r\n                    me.stop();\r\n                }\r\n            } else {\r\n                //PLAY NEXT ITEM IN PLAYLIST IF APPLICABLE\r\n                if (me.options.enableContinuous) {\r\n                    me.next();\r\n                } else {\r\n                    me.stop();\r\n                }\r\n            }\r\n        });\r\n \r\n        //HANDLE PLAYLIST ENDED EVENT IF APPLICABLE (FOR NON-MVVM)\r\n        if (this.options.playlistEnded) {\r\n            this.bind(PLAYLISTENDED, this.options.playlistEnded);\r\n        }\r\n \r\n        //SCRUB MEDIA PROPERTIES IF NEEDED\r\n        this.bind(DATABINDING, function () {\r\n            var data = this.dataSource.data();\r\n \r\n            //ITERATE THROUGH MEDIA\r\n            for (var i = 0; i &lt; data.length; i++) {\r\n                //ASSIGN TITLE IF APPLICABLE\r\n                if (!data[i].title) {\r\n                    data[i].title = me._convertFileToTitle(data[i].file);\r\n                }\r\n            }\r\n        });\r\n \r\n        //HANDLE PLAYLIST EVENTS\r\n        if (this.options.enablePlaylist) {\r\n            //ALLOW NAVIGATION OF PLAYLIST ITEMS\r\n            this.contentElement.on('click', '.playlist li', function () {\r\n                //LOAD SELECTED ITEM FROM PLAYLIST\r\n                me.play($(this).attr('data-file'));\r\n            });\r\n        }\r\n \r\n        //SUBSCRIBE EVENTS TO CUSTOM SELECTORS IF APPLICABLE\r\n        if (this.options.playSelector) {\r\n            $document.on(clickEventName, this.options.playSelector, function (e) {\r\n                e.preventDefault();\r\n                me.play();\r\n            });\r\n        }\r\n \r\n        if (this.options.pauseSelector) {\r\n            $document.on(clickEventName, this.options.pauseSelector, function (e) {\r\n                e.preventDefault();\r\n                me.pause();\r\n            });\r\n        }\r\n \r\n        if (this.options.stopSelector) {\r\n            $document.on(clickEventName, this.options.stopSelector, function (e) {\r\n                e.preventDefault();\r\n                me.stop();\r\n            });\r\n        }\r\n \r\n        if (this.options.previousSelector) {\r\n            $document.on(clickEventName, this.options.previousSelector, function (e) {\r\n                e.preventDefault();\r\n                me.previous();\r\n            });\r\n        }\r\n \r\n        if (this.options.nextSelector) {\r\n            $document.on(clickEventName, this.options.nextSelector, function (e) {\r\n                e.preventDefault();\r\n                me.next();\r\n            });\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Creates the data source\r\n     */\r\n    initDataSource: function() {\r\n        //IF DATA SOURCE IS DEFINED AND THE REFRESH HANDLER IS WIRED UP,\r\n        //UNBIND BECAUSE DATA SOURCE MUST BE REBUILT\r\n        if (this.dataSource &amp;&amp; this._refreshHandler) {\r\n            //UNBIND SO BINDING CAN BE WIRED UP AFTER DATA SOURCE CREATION\r\n            this.dataSource.unbind(CHANGE, this._refreshHandler);\r\n        }\r\n        else {\r\n            //CREATE CONNECTION BETWEEN INTERNAL _refreshHandler AND PUBLIC REFRESH FUNCTION\r\n            this._refreshHandler = $.proxy(this.refresh, this);\r\n        }\r\n \r\n        //CREATE DATA SOURCE FROM ARRAY OR CONFIG OBJECT\r\n        this.dataSource = kendo.data.DataSource.create(this.options.dataSource);\r\n \r\n        //NOW BIND DATA SOURCE TO REFRESH OF WIDGET\r\n        this.dataSource.bind(CHANGE, this._refreshHandler);\r\n \r\n        //FETCH DATA FIRST TIME IF APPLICABLE\r\n        if (this.options.autoBind) {\r\n            this.dataSource.fetch();\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Change data source dynamically via MVVM\r\n     * @param dataSource\r\n     */\r\n    setDataSource: function(dataSource) {\r\n        //SET THE INTERNAL DATA SOURCE EQUAL TO THE ONE PASSED IN BY MVVM\r\n        this.options.dataSource = dataSource;\r\n \r\n        //REBUILD THE DATA SOURCE IF NECESSARY OR JUST REASSIGN\r\n        this.initDataSource();\r\n    },\r\n \r\n    /**\r\n     * DOM elements that represent the output for MVVM\r\n     */\r\n    items: function() {\r\n        return this.element.find('.playlist li');\r\n    },\r\n \r\n    /**\r\n     * Re-renders the widget with all associated data\r\n     */\r\n    refresh: function() {\r\n        //TRIGGER DATA BINDING BEFORE RENDER\r\n        this.trigger(DATABINDING);\r\n \r\n        //INITIALIZE VARIABLES\r\n        var view = this.dataSource.view(),\r\n            html = view.length ? this.template(view) : '';\r\n \r\n        //RENDER DATA TO DOM PLACEHOLDER\r\n        this.contentElement.html(html);\r\n \r\n        //REPLACE MEDIA DOM ELEMENT IF APPLICABLE\r\n        if (this.options.type != this.mediaElement.tagName.toLowerCase()) {\r\n            var temp = $(this._createMediaTag());\r\n            $(this.mediaElement).replaceWith(temp);\r\n            this.mediaElement = temp[0];\r\n        }\r\n \r\n        //POPULATE FIRST MEDIA IF NONE LOADED OR DOES NOT EXIST\r\n        if (view.length\r\n            &amp;&amp; (!this.mediaSrc() || !this.getMediaByFile(this.mediaSrc()))) {\r\n            this.mediaSrc(view[0].file);\r\n            this.refreshDisplay();\r\n        }\r\n \r\n        //TRIGGER DATA BINDING AFTER RENDER COMPLETE\r\n        this.trigger(DATABOUND);\r\n    },\r\n \r\n    /**\r\n     * Updates the interface based on new or updated media\r\n     */\r\n    refreshDisplay: function () {\r\n        var me = this;\r\n        var playlistItems = this.contentElement.find('.playlist li');\r\n \r\n        //RESET DISPLAY\r\n        playlistItems.removeClass('selected');\r\n \r\n        //SELECT ACTIVE MEDIA FROM PLAYLIST IF APPLICABLE\r\n        if (this.mediaSrc()) {\r\n            playlistItems.each(function () {\r\n                var $this = $(this);\r\n \r\n                //MATCH LOADED MEDIA TO PLAYLIST ITEM\r\n                if ($this.attr('data-file') == me.mediaSrc()) {\r\n                    //ACTIVATE ELEMENT\r\n                    $this.addClass('selected');\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Set media source for HTML element\r\n     * @param value\r\n     */\r\n    mediaSrc: function (value) {\r\n        if (value || value === '') {\r\n            this.mediaElement.src = value;\r\n            if (value) this.mediaElement.load();\r\n        }\r\n \r\n        return $(this.mediaElement).attr('src');\r\n    },\r\n \r\n    /**\r\n     * Gets media by file from data source\r\n     * @param value\r\n     */\r\n    getMediaByFile: function (value) {\r\n        //VALIDATE INPUT\r\n        if (!value) return;\r\n \r\n        var data = this.dataSource.data();\r\n \r\n        for (var i = 0; i &lt; data.length; i++) {\r\n            //FIND MATCHING MEDIA FRoM DATA SOURCE\r\n            if (value == data[i].file) {\r\n                return data[i];\r\n                break;\r\n            }\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Get currently loaded media\r\n     * @returns {*}\r\n     */\r\n    getLoadedMedia: function () {\r\n        return this.getMediaByFile(this.mediaSrc());\r\n    },\r\n \r\n    /**\r\n     * Is the loaded media the last in the playlist\r\n     * @returns {boolean}\r\n     */\r\n    isLastMedia: function () {\r\n        //VALIDATE\r\n        if (!this.mediaSrc() || !this.dataSource.total())\r\n            return false;\r\n \r\n        //DETERMINE IF LOADED MEDIA IS THE LAST TO PLAY\r\n        return this.getLoadedMedia().file\r\n            == this.dataSource.at(this.dataSource.total() - 1).file;\r\n    },\r\n \r\n    /**\r\n     * Add media to data source\r\n     * @param value\r\n     */\r\n    add: function (value) {\r\n        //VALIDATE INPUT\r\n        if (!value) return;\r\n \r\n        //CONVERT FILE TO OBJECT IF APPLICABLE\r\n        if (typeof value == 'string') {\r\n            value = {\r\n                file: value\r\n            };\r\n        }\r\n \r\n        if (value.file) {\r\n            //ASSIGN TITLE IF APPLICABLE\r\n            if (!value.title) {\r\n                value.title = this._convertFileToTitle(value.file);\r\n            }\r\n \r\n            //ADD TO DATA SOURCE AND RETURN VALUE\r\n            this.dataSource.add(value);\r\n            return value;\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Plays media\r\n     */\r\n    play: function (value) {\r\n        //HANDLE SUPPLIED MEDIA IF APPLICABLE\r\n        if (value) {\r\n            //RETRIEVE DATA FROM SOURCE IF APPLICABLE\r\n            if (typeof value == 'string') {\r\n                //ADD OR GET EXISTING MEDIA OBJECT\r\n                value = this.getMediaByFile(value)\r\n                    || this.add(value);\r\n            } else if (!this.getMediaByFile(value.file)) {\r\n                //ADD TO DATA SOURCE IF APPLICABLE\r\n                value = this.add(value);\r\n            }\r\n \r\n            //LOAD MEDIA TO PLAYER\r\n            this.mediaSrc(value.file);\r\n        }\r\n \r\n        //POPULATE FIRST MEDIA IF APPLICABLE\r\n        if (!this.mediaSrc() &amp;&amp; this.dataSource.total()) {\r\n            this.mediaSrc(this.dataSource.at(0).file);\r\n        }\r\n \r\n        //PLAY MEDIA\r\n        this.mediaElement.play();\r\n \r\n        //UPDATE INTERFACE\r\n        this.refreshDisplay();\r\n    },\r\n \r\n    /**\r\n     * Pauses media\r\n     */\r\n    pause: function () {\r\n        this.mediaElement.pause();\r\n    },\r\n \r\n    /**\r\n     * Stops media\r\n     */\r\n    stop: function () {\r\n        this.pause();\r\n        this.mediaSrc('');\r\n \r\n        //UPDATE INTERFACE\r\n        this.refreshDisplay();\r\n    },\r\n \r\n    /**\r\n     * The current rate at which the media is being played back.\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    playbackRate: function (value) {\r\n        if ($.isNumeric(value)) {\r\n            this.mediaElement.playbackRate = value;\r\n        }\r\n \r\n        return this.mediaElement.playbackRate;\r\n    },\r\n \r\n    /**\r\n     * The readiness state of the media.\r\n     */\r\n    readyState: function () {\r\n        return this.mediaElement.readyState;\r\n    },\r\n \r\n    /**\r\n     * Indicates whether the media is in the process of seeking to a new position.\r\n     */\r\n    seeking: function () {\r\n        return this.mediaElement.seeking;\r\n    },\r\n \r\n    /**\r\n     * Seek to specified seconds\r\n     * or returns the number of seconds the browser has played\r\n     */\r\n    currentTime: function (value) {\r\n        if ($.isNumeric(value)) {\r\n            this.mediaElement.currentTime = value;\r\n        }\r\n \r\n        return this.mediaElement.currentTime;\r\n    },\r\n \r\n    /**\r\n     * Increase or decrease volume of player\r\n     * @param value\r\n     * @returns volume\r\n     */\r\n    volume: function (value) {\r\n        if ($.isNumeric(value)) {\r\n            this.mediaElement.volume = value;\r\n        }\r\n \r\n        return this.mediaElement.volume;\r\n    },\r\n \r\n    /**\r\n     * Gets or sets muting the player\r\n     * @param value\r\n     * @returns {*}\r\n     */\r\n    muted: function (value) {\r\n        if (value === true || value === false) {\r\n            this.mediaElement.muted = value;\r\n        }\r\n \r\n        return this.mediaElement.muted;\r\n    },\r\n \r\n    /**\r\n     * Go to the previous media\r\n     */\r\n    previous: function () {\r\n        var data = this.dataSource.data();\r\n \r\n        for (var i = 0; i &lt; data.length; i++) {\r\n            if (this.mediaSrc() == data[i].file) {\r\n                //LAST FILE IN PLAYLIST\r\n                if (i == 0) {\r\n                    this.stop();\r\n                    break;\r\n                }\r\n \r\n                //UPDATE MEDIA PLAYER\r\n                this.play(data[i - 1].file);\r\n                break;\r\n            }\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Go to the next media\r\n     */\r\n    next: function () {\r\n        var data = this.dataSource.data();\r\n \r\n        for (var i = 0; i &lt; data.length; i++) {\r\n            if (this.mediaSrc() == data[i].file) {\r\n                //LAST FILE IN PLAYLIST\r\n                if (i == data.length - 1) {\r\n                    //DETERMINE NEXT IF AT THE END\r\n                    if (this.options.enableLoopAll) this.play(data[0].file);\r\n                    else this.stop();\r\n                    break;\r\n                }\r\n \r\n                //UPDATE MEDIA PLAYER\r\n                this.play(data[i + 1].file);\r\n                break;\r\n            }\r\n        }\r\n    },\r\n \r\n    /**\r\n     * Enables or disables controls\r\n     * @param value\r\n     */\r\n    toggleControls: function (value) {\r\n        this.options.enableControls = this._toggleMediaAttribute('controls', value);\r\n    },\r\n \r\n    /**\r\n     * Enables or disables loop functionality\r\n     * @param value\r\n     */\r\n    toggleLoop: function (value) {\r\n        this.options.enableLoop = this._toggleMediaAttribute('loop', value);\r\n    },\r\n \r\n    /**\r\n     * Enables or disables loop all functionality\r\n     * @param value\r\n     */\r\n    toggleLoopAll: function (value) {\r\n        this.options.enableLoopAll = value\r\n            || (value !== false &amp;&amp; !this.options.enableLoopAll);\r\n    },\r\n \r\n    /**\r\n     * Enables or disables continuous functionality\r\n     * @param value\r\n     */\r\n    toggleContinuous: function (value) {\r\n        this.options.enableContinuous = value\r\n            || (value !== false &amp;&amp; !this.options.enableContinuous);\r\n    },\r\n \r\n    /**\r\n     * Build media tag for HTML DOM\r\n     * @returns {string|string}\r\n     * @private\r\n     */\r\n    _createMediaTag: function () {\r\n        //BUILD MEDIA HTML TAG\r\n        return this.options.template\r\n            || ('&lt;' + this.options.type + ' src=\"\"'\r\n                + ' preload=\"' + this.options.preload + '\"'\r\n                + (this.options.enableControls ? ' controls' : '')\r\n                + (this.options.enableLoop ? ' loop' : '')\r\n                + (this.options.autoPlay ? ' autoplay' : '')\r\n                + '&gt;&lt;p&gt;Your browser does not support the ' + this.options.type + ' element.&lt;/p&gt;'\r\n                + '&lt;/' + this.options.type + '&gt;');\r\n    },\r\n \r\n    /**\r\n     * Converts file path to title\r\n     * @param value\r\n     * @returns {XML|string|void}\r\n     */\r\n    _convertFileToTitle: function (value) {\r\n        return value ? value.split('/').pop().replace(/\\.[^/.]+$/, '') : '';\r\n    },\r\n \r\n    /**\r\n     * Toggles attribute on media element\r\n     * @param attr\r\n     * @param value\r\n     */\r\n    _toggleMediaAttribute: function (attr, value) {\r\n        var enable = value || (value !== false &amp;&amp; !this.mediaElement.hasAttribute(attr));\r\n \r\n        if (enable) this.mediaElement.setAttribute(attr, '');\r\n        else this.mediaElement.removeAttribute(attr);\r\n \r\n        return enable;\r\n    },\r\n \r\n    /**\r\n     * Binds event to media player\r\n     * @param name\r\n     * @param callback\r\n     */\r\n    _bindMedia: function (name, callback) {\r\n        if (name &amp;&amp; callback) {\r\n            //HANDLE BINDING FOR MEDIA PLAYER AFTER RENDER\r\n            this.bind(DATABOUND, function () {\r\n                if (this.mediaElement) {\r\n                    //BIND EVENT TO MEDIA PLAYER AFTER IT RENDERS\r\n                    this.mediaElement.addEventListener(name, callback);\r\n                }\r\n            });\r\n        }\r\n    }\r\n \r\n}));\r\n \r\n//CREATE BINDER NAMESPACE\r\nkendo.data.binders.widget.mediaplayer = {};\r\n \r\nkendo.data.binders.widget.mediaplayer.controls = kendo.data.Binder.extend({\r\n    refresh: function () {\r\n        var value = this.bindings.controls.get();\r\n        var widget = this.element;\r\n \r\n        widget.toggleControls(value);\r\n    }\r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.loop = kendo.data.Binder.extend({\r\n    refresh: function () {\r\n        var value = this.bindings.loop.get();\r\n        var widget = this.element;\r\n \r\n        widget.toggleLoop(value);\r\n    }\r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.loopAll = kendo.data.Binder.extend({\r\n    refresh: function () {\r\n        var value = this.bindings.loopAll.get();\r\n        var widget = this.element;\r\n \r\n        widget.toggleLoopAll(value);\r\n    }\r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.continuous = kendo.data.Binder.extend({\r\n    refresh: function () {\r\n        var value = this.bindings.continuous.get();\r\n        var widget = this.element;\r\n \r\n        widget.toggleContinuous(value);\r\n    }\r\n});\r\n \r\nkendo.data.binders.widget.mediaplayer.playlistended = kendo.data.Binder.extend({\r\n    init: function (widget, bindings, options) {\r\n        var me = this;\r\n \r\n        kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n \r\n        //HANDLE BINDING FOR MEDIA PLAYER\r\n        widget.bind(PLAYLISTENDED, function () {\r\n                //EXECUTE CALLBACK OPTION\r\n            me.bindings.playlistended.get();\r\n        });\r\n    },\r\n \r\n    refresh: function () {}\r\n});\r\n \r\n//BASE BINDER FOR MVVM MEDIA EVENTS\r\nvar MediaBinder = kendo.data.Binder.extend({\r\n    eventName: null,\r\n \r\n    init: function (widget, bindings, options) {\r\n        var me = this;\r\n \r\n        kendo.data.Binder.fn.init.call(this, widget, bindings, options);\r\n \r\n        //HANDLE BINDING FOR MEDIA PLAYER\r\n        widget._bindMedia(this.eventName, function () {\r\n            me.bindings[me.eventName].get();\r\n        });\r\n    },\r\n \r\n    refresh: function () {}\r\n});\r\n \r\n//BIND MVVM MEDIA EVENTS\r\nkendo.data.binders.widget.mediaplayer.durationchange = MediaBinder.extend({ eventName: DURATIONCHANGE });\r\nkendo.data.binders.widget.mediaplayer.ended = MediaBinder.extend({ eventName: ENDED });\r\nkendo.data.binders.widget.mediaplayer.error = MediaBinder.extend({ eventName: ERROR });\r\nkendo.data.binders.widget.mediaplayer.loadeddata = MediaBinder.extend({ eventName: LOADEDDATA });\r\nkendo.data.binders.widget.mediaplayer.loadedmetadata = MediaBinder.extend({ eventName: LOADEDMETADATA });\r\nkendo.data.binders.widget.mediaplayer.loadstart = MediaBinder.extend({ eventName: LOADSTART });\r\nkendo.data.binders.widget.mediaplayer.pause = MediaBinder.extend({ eventName: PAUSE });\r\nkendo.data.binders.widget.mediaplayer.play = MediaBinder.extend({ eventName: PLAY });\r\nkendo.data.binders.widget.mediaplayer.playing = MediaBinder.extend({ eventName: PLAYING });\r\nkendo.data.binders.widget.mediaplayer.progress = MediaBinder.extend({ eventName: PROGRESS });\r\nkendo.data.binders.widget.mediaplayer.ratechange = MediaBinder.extend({ eventName: RATECHANGE });\r\nkendo.data.binders.widget.mediaplayer.seeked = MediaBinder.extend({ eventName: SEEKED });\r\nkendo.data.binders.widget.mediaplayer.seeking = MediaBinder.extend({ eventName: SEEKING });\r\nkendo.data.binders.widget.mediaplayer.timeupdate = MediaBinder.extend({ eventName: TIMEUPDATE });\r\nkendo.data.binders.widget.mediaplayer.volumechange = MediaBinder.extend({ eventName: VOLUMECHANGE });</pre>\n<p>The screenshot for mobile was already supplied. It should make more sense now how I was able to wire up the tab strip to the player. In the <em>initEvents</em> method, it is looking for any available selectors supplied and calling the widget methods to manipulate the player. Here is what the HTML declaration looks like:</p>\n<pre class=\"lang:js decode:true\">&lt;section data-role=\"layout\" data-id=\"default\"&gt;\r\n    &lt;header data-role=\"header\"&gt;\r\n        &lt;div data-role=\"navbar\"&gt;\r\n            &lt;a data-role=\"button\" data-icon=\"sounds\" data-align=\"left\"\r\n               data-click=\"kendo.mobile.application.options.modelScope.viewModel.onAudioLoadedClick\"&gt;&lt;/a&gt;\r\n            &lt;span data-role=\"view-title\"&gt;&lt;/span&gt;\r\n            &lt;a data-role=\"button\" data-icon=\"organize\" data-align=\"right\"\r\n               data-click=\"kendo.mobile.application.options.modelScope.viewModel.onVideoLoadedClick\"&gt;&lt;/a&gt;\r\n        &lt;/div&gt;\r\n    &lt;/header&gt;\r\n    &lt;footer data-role=\"footer\"&gt;\r\n        &lt;div data-role=\"tabstrip\"&gt;\r\n            &lt;a data-icon=\"rewind\" class=\"previous\"&gt;Previous&lt;/a&gt;\r\n            &lt;a data-icon=\"pause\" class=\"pause\"&gt;Pause&lt;/a&gt;\r\n            &lt;a data-icon=\"play\" class=\"play\"&gt;Play&lt;/a&gt;\r\n            &lt;a data-icon=\"stop\" class=\"stop\"&gt;Stop&lt;/a&gt;\r\n            &lt;a data-icon=\"fastforward\" class=\"next\"&gt;Next&lt;/a&gt;\r\n        &lt;/div&gt;\r\n    &lt;/footer&gt;\r\n&lt;/section&gt;\r\n \r\n&lt;div data-role=\"view\" data-layout=\"default\"\r\n    data-title=\"Kendo Media Player\"\r\n    data-model=\"viewModel\"\r\n    data-bind=\"events: { init: onViewInit, show: onViewShow }\"&gt;\r\n \r\n    &lt;div data-role=\"mediaplayer\"\r\n         data-play-selector=\".km-footer .play\"\r\n         data-pause-selector=\".km-footer .pause\"\r\n         data-stop-selector=\".km-footer .stop\"\r\n         data-previous-selector=\".km-footer .previous\"\r\n         data-next-selector=\".km-footer .next\"\r\n         data-bind=\"source: mediaSource, ended: onMediaEnded, playlistended: onMediaPlaylistEnded, controls: enableControls, loop: enableLoop, loopAll: enableLoopAll, continuous: enableContinuous\"&gt;\r\n    &lt;/div&gt;\r\n \r\n    &lt;ul data-role=\"listview\" class=\"audio-options\"\r\n        data-style=\"inset\"\r\n        data-type=\"group\"&gt;\r\n        &lt;li&gt;\r\n            Configuration\r\n            &lt;ul&gt;\r\n                &lt;li&gt;Controls &lt;input type=\"checkbox\" class=\"controls\" data-role=\"switch\" data-bind=\"checked: enableControls\"&gt;&lt;/li&gt;\r\n                &lt;li&gt;Loop &lt;input type=\"checkbox\" class=\"loop\" data-role=\"switch\" data-bind=\"checked: enableLoop\"&gt;&lt;/li&gt;\r\n                &lt;li&gt;Loop All &lt;input type=\"checkbox\" class=\"loop-all\" data-role=\"switch\" data-bind=\"checked: enableLoopAll\"&gt;&lt;/li&gt;\r\n                &lt;li&gt;Continuous &lt;input type=\"checkbox\" class=\"continuous\" data-role=\"switch\" data-bind=\"checked: enableContinuous\"&gt;&lt;/li&gt;\r\n            &lt;/ul&gt;\r\n        &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n&lt;/div&gt;\r\n \r\n&lt;script&gt;\r\n    //INITIALIZE APP\r\n    require([\r\n        'kendo.mediaplayer'\r\n    ], function() {\r\n \r\n        var viewModel = kendo.observable({\r\n            enableControls: true,\r\n            enableLoop: false,\r\n            enableLoopAll: false,\r\n            enableContinuous: true,\r\n            mediaSource: [],\r\n            videoSource: [\r\n                {\r\n                    title: 'Wildlife',\r\n                    file: 'https://archive.org/download/Windows7WildlifeSampleVideo/Wildlife_512kb.mp4'\r\n                },\r\n                {\r\n                    title: 'Clematis',\r\n                    file: 'https://archive.org/download/CEP304/CEP304_512kb.mp4'\r\n                }\r\n            ],\r\n            audioSource: [\r\n                {\r\n                    title: 'Jungle River',\r\n                    file: 'https://ia600506.us.archive.org/17/items/Sounds_of_Nature_Collection/02_Jungle_River.mp3'\r\n                },\r\n                {\r\n                    title: 'Tropical Rain Forest',\r\n                    file: 'https://ia700506.us.archive.org/17/items/Sounds_of_Nature_Collection/04_A_Tropical_Rain_Forest.mp3'\r\n                },\r\n                {\r\n                    title: 'Thunder and River',\r\n                    file: 'https://ia600506.us.archive.org/17/items/Sounds_of_Nature_Collection/20_Thunder_And_Rain.mp3'\r\n                },\r\n                {\r\n                    file: 'https://ia600506.us.archive.org/17/items/Sounds_of_Nature_Collection/41_Ocean_Waves.mp3'\r\n                },\r\n                {\r\n                    title: 'Frog Chorus',\r\n                    file: 'https://ia700506.us.archive.org/17/items/Sounds_of_Nature_Collection/53_Frog_Chorus.mp3'\r\n                }\r\n            ],\r\n            onViewInit: function (e) {\r\n                //DEFAULT TO AUDIO SOURCE\r\n                this.set('mediaSource', this.get('audioSource'));\r\n            },\r\n            onViewShow: function (e) {\r\n                //CLEAR MEDIA CONTROLS ON FIRST LOAD\r\n                this.clearMediaControls();\r\n            },\r\n            onMediaEnded: function() {\r\n                console.log('Media ended!');\r\n            },\r\n            onMediaPlaylistEnded: function() {\r\n                console.log('Playlist ended!');\r\n            },\r\n            onAudioLoadedClick: function () {\r\n                var context = kendo.mobile.application.options.modelScope.viewModel;\r\n \r\n                //CONVERT TO AUDIO SOURCE\r\n                $('[data-role=\"mediaplayer\"]').getKendoMediaPlayer().options.type = 'audio';\r\n                context.set('mediaSource', context.get('audioSource'));\r\n                context.clearMediaControls();\r\n            },\r\n            onVideoLoadedClick: function () {\r\n                var context = kendo.mobile.application.options.modelScope.viewModel;\r\n \r\n                //CONVERT TO VIDEO SOURCE\r\n                $('[data-role=\"mediaplayer\"]').getKendoMediaPlayer().options.type = 'video';\r\n                context.set('mediaSource', context.get('videoSource'));\r\n                context.clearMediaControls();\r\n            },\r\n            clearMediaControls: function () {\r\n                kendo.widgetInstance($('.km-footer [data-role=\"tabstrip\"]')).clear();\r\n            }\r\n        });\r\n \r\n        //INITIALIZE MOBILE APP\r\n        new kendo.mobile.Application(document.body, {\r\n            modelScope: {\r\n                viewModel: viewModel\r\n            }\r\n        });\r\n    });\r\n&lt;/script&gt;</pre>\n<p>And here is the screenshot again:</p>\n<h2><img src=\"http://staging1.basememara.com/wp-content/uploads/2014/08/kendo-media-player.png\" alt=\"\" width=\"321\" height=\"567\" class=\"aligncenter size-full wp-image-41437\" /></h2>\n<h2>Conclusion</h2>\n<p>As you can see, Kendo UI is a very powerful framework for creating rich and complex widgets. The ability to integrate with <a href=\"https://web.archive.org/web/20170817041957/http://docs.telerik.com/kendo-ui/getting-started/framework/mvvm/overview\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">MVVM</a> and <a href=\"https://web.archive.org/web/20170817041957/http://docs.telerik.com/kendo-ui/getting-started/framework/datasource/overview\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">DataSource</a> takes you to a whole new level of web development. It creates a clear separation of concerns and provides automatic capability.</p>\n<p>This source code is posted to our <a href=\"https://web.archive.org/web/20170817041957/https://github.com/FalafelSoftwareInc/kendo-ui-media-player\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">GitHub repo</a>. Also, you can try out this demo live by <a href=\"https://web.archive.org/web/20170817041957/http://demos.falafeldev.com/kendo-ui-media-player/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">clicking here for the mobile</a>and <a href=\"https://web.archive.org/web/20170817041957/http://demos.falafeldev.com/kendo-ui-media-player/index.desktop.html\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">here for the desktop</a> versions. I plan on adding this to <a href=\"https://web.archive.org/web/20170817041957/https://github.com/telerik/kendo-ui-core\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Kendo UI’s source code at GitHub</a> and create a pull request for it.  Please provide any feedback or issues.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n</div>\n",
            "link": "https://staging1.basememara.com/new-kendo-ui-media-player-widget-with-mvvm/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 141,
            "terms": [
                3,
                8,
                14
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2014-08-21T01:56:05",
            "modified": "2018-10-21T13:33:06"
        },
        {
            "id": 230,
            "title": "Back to the Basics with JavaScript",
            "slug": "back-to-the-basics-with-javascript",
            "type": "post",
            "excerpt": "In case you haven't heard.. JAVASCRIPT IS MAKING A COME BACK!! And it is not the same JavaScript you fiddled around with in the pre-AJAX era. It has become reborn with the help of HTML5, mobile, and even Windows 8 (see Create your first Metro style app using JavaScript). Understanding JavaScript is becoming essential and can no longer be dismissed as a \"weakly-typed, toy language with no compilation checks,\" but instead as a versatile, dynamic, cross-platform language.",
            "content": "<p>In case you haven&#8217;t heard.. <em>JAVASCRIPT IS MAKING A COME BACK!!</em> And it is not the same JavaScript you fiddled around with in the pre-AJAX era. It has become reborn with the help of HTML5, mobile, and even Windows 8 (see <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/br211385.aspx\" target=\"_blank\" rel=\"noopener\">Create your first Metro style app using JavaScript</a>). Understanding JavaScript is becoming essential and can no longer be dismissed as a &#8220;weakly-typed, toy language with no compilation checks,&#8221; but instead as a versatile, dynamic, cross-platform language&#8230; <a href=\"https://web.archive.org/web/20160526234607/http://blog.falafel.com/back-to-the-basics-with-javascript/\" target=\"_blank\" rel=\"noopener\">Continued here</a></p>\n",
            "link": "https://staging1.basememara.com/back-to-the-basics-with-javascript/",
            "comment_count": 0,
            "author": 2,
            "featured_media": null,
            "terms": [
                3
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2012-03-12T16:13:10",
            "modified": "2018-10-21T13:17:08"
        },
        {
            "id": 122,
            "title": "JavaScript says, \"let\" there be block-scope!",
            "slug": "javascript-says-let-there-be-block-scope",
            "type": "post",
            "excerpt": "Variable in JavaScript has always been a leaky concept. We all know global variables are evil, but \"hoisted\" variables within a certain scope can lead to unexpected bugs that are hard to track down. Introducing the new \"let\" keyword!",
            "content": "<p>Variables in JavaScript has always been a leaky concept. We all know global variables are evil, but “hoisted” variables within a certain scope can lead to unexpected bugs that are hard to track down. Take the following example:</p>\n<pre class=\"lang:js decode:true  \">function whatsMyName() {\r\n  if (true) {\r\n    var name = 'Basem';\r\n  }\r\n  alert(name); // Basem\r\n}</pre>\n<p>In other languages, the “name” variable is scoped within the if-statement only. Not true in JavaScript! Any variable created inside a function is pinned to the top of the function, no matter where you declare it. This behavior is known as <em>“hoisting”</em>.</p>\n<p>The example above can be better understood like this:</p>\n<pre class=\"lang:js decode:true \">function whatsMyName() {\r\n  var name; // Variable hoisted to the top\r\n \r\n  if (true) {\r\n    name = 'Basem';\r\n  }\r\n \r\n  alert(name); // Basem\r\n}</pre>\n<p>Now, let there be proper scoping in JavaScript! Introducing the new <em>“let”</em> keyword.</p>\n<pre class=\"lang:js decode:true\">function whatsMyName() {\r\n  if (true) {\r\n    let name = 'Basem';\r\n  }\r\n  alert(name); // Error: Name is undefined\r\n}</pre>\n<p>Another way to see this is the following:</p>\n<pre class=\"lang:js decode:true \">function whatsMyName() {\r\n  var name = 'John';\r\n \r\n  if (true) {\r\n    let name = 'Basem';\r\n    alert(name); // Basem\r\n  }\r\n \r\n  alert(name); // John\r\n}</pre>\n<p>The “let” keyword is block-scoped, while “var” continues to be function-scoped. Let the refactoring begin!</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n",
            "link": "https://staging1.basememara.com/javascript-says-let-there-be-block-scope/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 123,
            "terms": [
                19,
                3
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2015-01-30T21:06:16",
            "modified": "2018-10-21T12:49:14"
        },
        {
            "id": 276,
            "title": "Getting Started with TypeScript",
            "slug": "getting-started-with-typescript",
            "type": "post",
            "excerpt": "Any doubt you may have had about TypeScript should have melted away with the recent announcement of Angular 2 being written in TypeScript. Google and Microsoft putting aside their egos (and money) to build an open source project together certainly indicates something amazing about AngularJS and TypeScript. I don't need to tell you how awesome AngularJS is, so in this post I'd like to show you how awesome TypeScript is.",
            "content": "<p>Any doubt you may have had about <a href=\"https://web.archive.org/web/20160302191644/http://www.typescriptlang.org/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">TypeScript</a> should have melted away with the recent announcement of <a href=\"https://web.archive.org/web/20160302191644/http://techcrunch.com/2015/03/05/microsoft-and-google-collaborate-on-typescript-hell-has-not-frozen-over-yet/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">Angular 2 being written in TypeScript</a>. Google and Microsoft putting aside their egos (and money) to build an open source project together certainly indicates something amazing about <a href=\"https://web.archive.org/web/20160302191644/https://angular.io/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">AngularJS</a> and TypeScript. I don’t need to tell you how awesome AngularJS is, so in this post I’d like to show you how awesome TypeScript is.</p>\n<h2>Dude, Where’s My Types?</h2>\n<p>One of the flexible things about JavaScript is that it’s a dynamic language. Pass in a string, number, or even function into the same parameter and JavaScript won’t complain. When creating large scale JavaScript applications though, this can become a maintenance and debugging nightmare. Also producing an API for your application for other developers make it daunting to use and heavily reliant on good documentation. Enter TypeScript… you can optionally decorate your parameters with annotations as so:</p>\n<div id=\"crayon-56d73c1cd2e56679922450\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true \">function getPerson(id: number) {\r\n  return {\r\n    id: id,\r\n    firstName: 'John',\r\n    lastName: 'Doe'\r\n  };\r\n}</pre>\n<p>You see the <em>“: number”</em> in the parameter? That will infer the type throughout the application and even give you intellisense assistance and compiling checks. Intellisense and compiling checks are included in Visual Studio, but are made open source for any IDE to use freely (which many do already).</p>\n</div>\n</div>\n<h2>Interfaces</h2>\n<p>Giving structure to your objects no longer make it a guessing game in JavaScript. For example, I can define the return type of the function above:</p>\n<div id=\"crayon-56d73c1cd2e66160632271\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">function getPerson(id: number): Person {\r\n  return {\r\n    id: id,\r\n    firstName: 'John',\r\n    lastName: 'Doe'\r\n  };\r\n}</pre>\n</div>\n</div>\n<p>The function is returning a <em>“Person”</em> type, which can be an interface as so:</p>\n<div id=\"crayon-56d73c1cd2e6d192005561\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">interface Person {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n}</pre>\n</div>\n</div>\n<p>If my return object doesn’t match this signature, I will get an intellisense and compile error.</p>\n<h2>Adding Some Class</h2>\n<p>It would make sense if we made <em>“Person”</em> a class instead of an interface. That way, we can create new instances of <em>“Person”</em>:</p>\n<div id=\"crayon-56d73c1cd2e77584312574\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">class Person {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n \r\n  constructor(id: number, firstName: string, lastName: string) {\r\n    this.id = id;\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n  }\r\n \r\n  get fullName() {\r\n    return this.firstName + ' ' + this.lastName;\r\n  }\r\n}</pre>\n</div>\n</div>\n<p>Declaring classes in TypeScript looks sexy because it is taken from the <a title=\"JavaScript classes with ECMAScript 6\" href=\"https://web.archive.org/web/20160302191644/http://blog.falafel.com/javascript-classes-ecmascript-6/\" target=\"_blank\" class=\"no-ajaxy\" rel=\"noopener\">EcmaScript 6 specification</a>. I even added a dynamic property called <em>“fullName”</em> that concatenates first and last name on the fly.</p>\n<p>Now I can do this with my original function:</p>\n<div id=\"crayon-56d73c1cd2e7f644156201\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">function getPerson(id: number) {\r\n  return new Person(id, 'John', 'Doe');\r\n}</pre>\n</div>\n</div>\n<p>I don’t have to tell TypeScript that <em>“getPerson”</em> has a return type of <em>“Person”</em> anymore since it is inferred in the return statement. And I still get all the goodies of intellisense and compiling checks.</p>\n<p>I can even define the parameters in my constructor as <em>public</em> properties without needing to explicitly assign them in the constructor logic:</p>\n<div id=\"crayon-56d73c1cd2e86999821983\" class=\"crayon-syntax crayon-theme-monokai crayon-font-monaco crayon-os-pc print-yes notranslate\" data-settings=\" minimize scroll-mouseover\">\n<div class=\"crayon-main\">\n<pre class=\"lang:js decode:true\">class Person {\r\n \r\n  constructor(public id: number, public firstName: string, public lastName: string) {\r\n    // Don't have to do anything here anymore\r\n  }\r\n \r\n  get fullName() {\r\n    return this.firstName + ' ' + this.lastName;\r\n  }\r\n}</pre>\n</div>\n</div>\n<h2>Conclusion</h2>\n<p>Are you in love yet? This is only the tip of the iceberg of what TypeScript is. Also, everything gets compiled into pure JavaScript files, so keep in mind that TypeScript was created for the development process, yet remains cross-browser compliant. Add arrow functions, class inheritance, function overloading, module dependency management, and you have a true <em>object-oriented paradigm</em> in JavaScript. Marry that with AngularJS and we have a solid path to the JavaScript promise land.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n",
            "link": "https://staging1.basememara.com/getting-started-with-typescript/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 277,
            "terms": [
                22,
                19,
                3,
                44
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2015-03-09T19:15:27",
            "modified": "2018-10-21T12:39:52"
        },
        {
            "id": 1714,
            "title": "Full Stack iOS and WordPress in Swift",
            "slug": "full-stack-ios-and-wordpress-in-swift",
            "type": "post",
            "excerpt": "",
            "content": "<p>WordPress has been around for almost a decade and a half. It survived the CMS wars and remained relevant during the mobile shift. It&#8217;s been battle-tested under various scenarios and load. It showed us what a thriving 3rd party marketplace looks like. Now, WordPress is realizing a grander vision!</p>\n<p>In the release of WordPress 4.7, the <a href=\"https://wptavern.com/wp-rest-api-officially-approved-for-merge-into-wordpress-4-7\" target=\"_blank\" rel=\"noopener\">REST API plugin was merged into core</a> and enabled by default. This means you can request the data format of any WordPress 4.7+ site out there. Go ahead, try this very blog out for yourself: <a href=\"http://staging1.basememara.com/wp-json/wp/v2/posts\" target=\"_blank\" rel=\"noopener\">http://staging1.basememara.com/wp-json/wp/v2/posts:</a></p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_118-500x800.png\" width=\"300\" height=\"481\" class=\"aligncenter wp-image-1717\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_118-500x800.png 500w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_118-768x1230.png 768w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_118-639x1024.png 639w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_118.png 990w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></p>\n<p>It&#8217;s what <a href=\"https://www.ted.com/talks/tim_berners_lee_on_the_next_web\" target=\"_blank\" rel=\"noopener\">the next web</a> looks like &#8211; data! WordPress is trying to live beyond the browser, where the Internet is being taken over by IoT, AI, microservices, {<em>enter latest geek buzzword here</em>}, etc. In this post, I&#8217;d like to show how we can leverage WordPress and use it as a solid backend for our native Swift app.</p>\n<h2>The Project Plan</h2>\n<p>It usually helps to work backwards from a goal, so below is the app we will end up with. It&#8217;s actually the <a href=\"https://itunes.apple.com/app/id1021806851\" target=\"_blank\" rel=\"noopener\">live app</a> for this blog and is fully <a href=\"https://github.com/ZamzamInc/SwiftyPress\" target=\"_blank\" rel=\"noopener\">open source</a>:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877-464x800.png\" width=\"464\" height=\"800\" class=\"aligncenter wp-image-1718 size-medium\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877-464x800.png 464w, https://staging1.basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877-594x1024.png 594w, https://staging1.basememara.com/wp-content/uploads/2017/01/IMG_2127-e1485341794877.png 750w\" sizes=\"(max-width: 464px) 100vw, 464px\" /></p>\n<p>First, a few ground rules before we start building this WordPress app:</p>\n<ul>\n<li><strong>Offline:</strong> The app has to work with no internet connection (that&#8217;s a major advantage over a website!).</li>\n<li><strong>Updates:</strong> The content should be fresh and up-to-date on the app.</li>\n<li><strong>Reusable:</strong> Being able to package this as an app framework and easily used for other WordPress sites.</li>\n</ul>\n<p>The last one might be too ambitious, but I&#8217;ve already done it! See <a href=\"https://itunes.apple.com/app/id992314096\" target=\"_blank\" rel=\"noopener\">this app</a> which uses the same framework, but a different WordPress site and &#8220;theme&#8221;.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_120-462x800.png\" alt=\"\" width=\"462\" height=\"800\" class=\"aligncenter size-medium wp-image-1730\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_120-462x800.png 462w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_120-768x1329.png 768w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_120-592x1024.png 592w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_120.png 786w\" sizes=\"(max-width: 462px) 100vw, 462px\" /></p>\n<p>Ok, now that you know the plan:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/05/lets-begin.jpg\" width=\"250\" height=\"250\" class=\"aligncenter wp-image-712\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/05/lets-begin.jpg 400w, https://staging1.basememara.com/wp-content/uploads/2016/05/lets-begin-150x150.jpg 150w\" sizes=\"(max-width: 250px) 100vw, 250px\" /></p>\n<h2>The Framework</h2>\n<p>As part of our goals, this has to be a framework so we can reuse it. In my previous post, called &#8220;<a href=\"http://staging1.basememara.com/creating-cross-platform-swift-frameworks-ios-watchos-tvos-via-carthage-cocoapods/\" target=\"_blank\" rel=\"noopener\">Creating Cross-Platform Swift Frameworks</a>&#8220;, I cover how we can setup a fresh Xcode workspace for a framework so it can be distributed across projects. The framework structure will look like this:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_126-335x800.png\" alt=\"\" width=\"335\" height=\"800\" class=\"aligncenter size-medium wp-image-1740\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_126-335x800.png 335w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_126-429x1024.png 429w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_126.png 620w\" sizes=\"(max-width: 335px) 100vw, 335px\" /></p>\n<p>Now we have a place to code!</p>\n<h2>The Configuration</h2>\n<p>Before we go much further, we need a simple and manageable way to store configuration values. I cover how we can read values from a plist file in my <a href=\"http://staging1.basememara.com/reading-values-plist-bundle-swift/\" target=\"_blank\" rel=\"noopener\">previous post</a>. In the end, our plist configuration file will look something like this:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_122-500x363.png\" alt=\"\" width=\"500\" height=\"363\" class=\"aligncenter size-medium wp-image-1734\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_122-500x363.png 500w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_122-768x558.png 768w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_122-1024x744.png 1024w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_122.png 1062w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>This way, apps consuming the framework only have to set a few configuration values in a plist file to wire it to their WordPress site, as well as add some look and feel changes. This will get read into memory when the app starts up:</p>\n<pre class=\"lang:swift decode:true \">class AppDelegate: UIResponder, UIApplicationDelegate, AppPressable {\r\n\r\n    var window: UIWindow?\r\n\r\n    override init() {\r\n        super.init()\r\n        UserDefaults.standard.registerDefaults(\"Settings.plist\")\r\n    }\r\n\r\n    ...\r\n}</pre>\n<p>This is extending Apple&#8217;s native &#8220;<em>UserDefaults</em>&#8221; function called &#8220;<a href=\"https://developer.apple.com/reference/foundation/userdefaults/1417065-register\" target=\"_blank\" rel=\"noopener\">register(defaults:)</a>&#8221; to store a dictionary into the user defaults. In this case, it&#8217;s first converting the plist into a dictionary, then using the underlying native &#8220;<em>register</em>&#8221; call to store the values into user defaults for later use.</p>\n<h2>Ground Zero: The Database</h2>\n<p>An application is only as good as its data. That&#8217;s why it&#8217;s important to think of what the data schema will look like. Seeing what the WordPress JSON looks like out of the box, things can get messy and confusing. Instead, I&#8217;d like to extend the new <a href=\"https://developer.wordpress.org/rest-api/\" target=\"_blank\" rel=\"noopener\">WordPress REST API</a> to provide my own slim, simplified endpoint:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_119-500x572.png\" alt=\"\" width=\"500\" height=\"572\" class=\"aligncenter size-medium wp-image-1722\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_119-500x572.png 500w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_119-768x879.png 768w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_119-894x1024.png 894w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_119.png 1394w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Fortunately, the new REST API is super flexible and well thought out to do this. Below is the WordPress extension point to make this happen, or you can install my WordPress <a href=\"https://github.com/ZamzamInc/SwiftyPress-WP\" target=\"_blank\" rel=\"noopener\">SwiftyPress plugin</a> to get it done (ya, it&#8217;s in PHP):</p>\n<pre class=\"lang:php decode:true \">&lt;?php\r\n\r\nclass SwiftyPress_REST_Post_Controller {\r\n \r\n    // Here initialize our namespace and resource name.\r\n    public function __construct() {\r\n        $this-&gt;namespace = '/swiftypress/v2';\r\n        $this-&gt;resource_name = 'posts';\r\n        $this-&gt;date_format = 'Y-m-d\\TH:i:s';\r\n    }\r\n \r\n    // Register our routes.\r\n    public function register_routes() {\r\n        register_rest_route($this-&gt;namespace, '/' . $this-&gt;resource_name, array(\r\n            array(\r\n                'methods' =&gt; 'GET',\r\n                'callback' =&gt; array($this, 'get_items')\r\n            ),\r\n            'schema' =&gt; array($this, 'get_item_schema')\r\n        ));\r\n\r\n        register_rest_route($this-&gt;namespace, '/' . $this-&gt;resource_name . '/(?P&lt;id&gt;[\\d]+)', array(\r\n            array(\r\n                'methods' =&gt; 'GET',\r\n                'callback' =&gt; array($this, 'get_item')\r\n            ),\r\n            'schema' =&gt; array($this, 'get_item_schema')\r\n        ));\r\n    }\r\n \r\n    /**\r\n     * Grabs the five most recent posts and outputs them as a rest response.\r\n     *\r\n     * @param WP_REST_Request $request Current request.\r\n     */\r\n    public function get_items($request) {\r\n        // Construct query options\r\n        $params = array();\r\n\r\n        if (isset($request['per_page'])) {\r\n            $per_page = (int)$request['per_page'];\r\n            if ($per_page &gt; 0) {\r\n                $params['posts_per_page'] = $per_page;\r\n\r\n                if (isset($request['page'])) {\r\n                    $page_nbr = (int)$request['page'];\r\n                    $params['offset'] = $page_nbr * $per_page;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isset($request['orderby'])) {\r\n            $params['orderby'] = $request['orderby'];\r\n        }\r\n\r\n        if (isset($request['order'])) {\r\n            $params['order'] = strtoupper($request['order']);\r\n        }\r\n\r\n        $posts = get_posts($params);\r\n        $data = array();\r\n \r\n        if (empty($posts)) {\r\n            return rest_ensure_response($data);\r\n        }\r\n \r\n        foreach ($posts as $post) {\r\n            $response = $this-&gt;prepare_item_for_response($post, $request);\r\n            $data[] = $this-&gt;prepare_response_for_collection($response);\r\n        }\r\n \r\n        // Return all response data.\r\n        return rest_ensure_response($data);\r\n    }\r\n \r\n    /**\r\n     * Grabs the five most recent posts and outputs them as a rest response.\r\n     *\r\n     * @param WP_REST_Request $request Current request.\r\n     */\r\n    public function get_item($request) {\r\n        $id = (int)$request['id'];\r\n        $post = get_post($id);\r\n \r\n        if (empty($post)) {\r\n            return rest_ensure_response(array());\r\n        }\r\n \r\n        $response = $this-&gt;prepare_item_for_response($post, $request);\r\n \r\n        // Return all response data.\r\n        return $response;\r\n    }\r\n \r\n    /**\r\n     * Matches the post data to the schema we want.\r\n     *\r\n     * @param WP_Post $post The comment object whose response is being prepared.\r\n     */\r\n    public function prepare_item_for_response($post, $request) {\r\n        $post_data = array();\r\n \r\n        $schema = $this-&gt;get_item_schema($request);\r\n \r\n        // We are also renaming the fields to more understandable names.\r\n        if (isset($schema['properties']['id'])) {\r\n            $post_data['id'] = (int)$post-&gt;ID;\r\n        }\r\n\r\n        if (isset($schema['properties']['title'])) {\r\n            $post_data['title'] = $post-&gt;post_title;\r\n        }\r\n        \r\n        if (isset($schema['properties']['slug'])) {\r\n            $post_data['slug'] = $post-&gt;post_name;\r\n        }\r\n        \r\n        if (isset($schema['properties']['type'])) {\r\n            $post_data['type'] = $post-&gt;post_type;\r\n        }\r\n        \r\n        if (isset($schema['properties']['excerpt'])) {\r\n            $post_data['excerpt'] = $post-&gt;post_excerpt;\r\n        }\r\n        \r\n        if (isset($schema['properties']['date'])) {\r\n            $post_data['date'] = get_the_date($this-&gt;date_format, $post-&gt;ID);\r\n        }\r\n        \r\n        if (isset($schema['properties']['modified'])) {\r\n            $post_data['modified'] = get_post_modified_time($this-&gt;date_format, null, $post-&gt;ID);\r\n        }\r\n        \r\n        if (isset($schema['properties']['comment_count'])) {\r\n            $post_data['comment_count'] = (int)$post-&gt;comment_count;\r\n        }\r\n        \r\n        if (isset($schema['properties']['link'])) {\r\n            $post_data['link'] = get_permalink($post-&gt;ID);\r\n        }\r\n        \r\n        if (isset($schema['properties']['author'])) {\r\n            $post_data['author'] = array(\r\n                'id' =&gt; (int)$post-&gt;post_author,\r\n                'username' =&gt; get_the_author_meta('user_login', $post-&gt;post_author),\r\n                'email' =&gt; get_the_author_meta('user_email', $post-&gt;post_author),\r\n                'name' =&gt; get_the_author_meta('display_name', $post-&gt;post_author),\r\n                'link' =&gt; get_the_author_meta('url', $post-&gt;post_author),\r\n                'avatar' =&gt; get_avatar_url($post-&gt;post_author),\r\n                'description' =&gt; get_the_author_meta('description', $post-&gt;post_author)\r\n            );\r\n        }\r\n        \r\n        if (isset($schema['properties']['featured_media'])) {\r\n            $attachment_id = get_post_thumbnail_id($post-&gt;ID);\r\n            \r\n            if ($attachment_id &gt; 0) {\r\n                $full = wp_get_attachment_image_src($attachment_id, 'full');\r\n                $thumbnail = wp_get_attachment_image_src($attachment_id, 'medium');\r\n                \r\n                $post_data['featured_media'] = array(\r\n                    'link' =&gt; $full[0],\r\n                    'width' =&gt; (int)$full[1],\r\n                    'height' =&gt; (int)$full[2],\r\n                    'thumbnail_link' =&gt; $thumbnail[0],\r\n                    'thumbnail_width' =&gt; (int)$thumbnail[1],\r\n                    'thumbnail_height' =&gt; (int)$thumbnail[2]\r\n                );\r\n            } else {\r\n                $post_data['featured_media'] = null;\r\n            }\r\n        }\r\n        \r\n        if (isset($schema['properties']['categories'])) {\r\n            $terms = get_the_category($post-&gt;ID);\r\n\r\n            if (!empty($terms)) {\r\n                $post_data['categories'] = array_map( \r\n                    function($item) {\r\n                        return array(\r\n                            'id' =&gt; (int)$item-&gt;term_id,\r\n                            'parent' =&gt; (int)$item-&gt;parent,\r\n                            'name' =&gt; $item-&gt;name,\r\n                            'slug' =&gt; $item-&gt;slug,\r\n                            'taxonomy' =&gt; $item-&gt;taxonomy\r\n                        );\r\n                    }, \r\n                    $terms\r\n                );\r\n            } else {\r\n                $post_data['categories'] = [];\r\n            }\r\n        }\r\n        \r\n        if (isset($schema['properties']['tags'])) {\r\n            $terms = get_the_tags($post-&gt;ID);\r\n            if (!empty($terms)) {\r\n                $post_data['tags'] = array_map( \r\n                    function($item) {\r\n                        return array(\r\n                            'id' =&gt; (int)$item-&gt;term_id,\r\n                            'parent' =&gt; (int)$item-&gt;parent,\r\n                            'name' =&gt; $item-&gt;name,\r\n                            'slug' =&gt; $item-&gt;slug,\r\n                            'taxonomy' =&gt; $item-&gt;taxonomy\r\n                        );\r\n                    }, \r\n                    $terms\r\n                );\r\n            } else {\r\n                $post_data['tags'] = [];\r\n            }\r\n        }\r\n \r\n        if (isset($schema['properties']['content'])) {\r\n            $post_data['content'] = apply_filters('the_content', $post-&gt;post_content, $post);\r\n        }\r\n \r\n        return rest_ensure_response($post_data);\r\n    }\r\n \r\n    /**\r\n     * Prepare a response for inserting into a collection of responses.\r\n     *\r\n     * This is copied from WP_REST_Controller class in the WP REST API v2 plugin.\r\n     *\r\n     * @param WP_REST_Response $response Response object.\r\n     * @return array Response data, ready for insertion into collection data.\r\n     */\r\n    public function prepare_response_for_collection($response) {\r\n        if (!($response instanceof WP_REST_Response)) {\r\n            return $response;\r\n        }\r\n \r\n        $data = (array)$response-&gt;get_data();\r\n        $server = rest_get_server();\r\n \r\n        if (method_exists($server, 'get_compact_response_links')) {\r\n            $links = call_user_func(array($server, 'get_compact_response_links'), $response);\r\n        } else {\r\n            $links = call_user_func(array($server, 'get_response_links'), $response);\r\n        }\r\n \r\n        if (!empty($links)) {\r\n            $data['_links'] = $links;\r\n        }\r\n \r\n        return $data;\r\n    }\r\n \r\n    /**\r\n     * Get our sample schema for a post.\r\n     *\r\n     * @param WP_REST_Request $request Current request.\r\n     */\r\n    public function get_item_schema($request) {\r\n        $schema = array(\r\n            // This tells the spec of JSON Schema we are using which is draft 4.\r\n            '$schema' =&gt; 'http://json-schema.org/draft-04/schema#',\r\n            // The title property marks the identity of the resource.\r\n            'title' =&gt; 'post',\r\n            'type' =&gt; 'object',\r\n            // In JSON Schema you can specify object properties in the properties attribute.\r\n            'properties' =&gt; array(\r\n                'id' =&gt; array(\r\n                    'description' =&gt; esc_html__('Unique identifier for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'integer',\r\n                    'context' =&gt; array('view', 'edit', 'embed'),\r\n                    'readonly' =&gt; true\r\n                ),\r\n                'title' =&gt; array(\r\n                    'description' =&gt; esc_html__('The title for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'string'\r\n                ),\r\n                'slug' =&gt; array(\r\n                    'description' =&gt; esc_html__('The slug for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'type' =&gt; array(\r\n                    'description' =&gt; esc_html__('The type for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'excerpt' =&gt; array(\r\n                    'description' =&gt; esc_html__('The excerpt for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'date' =&gt; array(\r\n                    'description' =&gt; esc_html__('The date for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'modified' =&gt; array(\r\n                    'description' =&gt; esc_html__('The modified for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'comment_count' =&gt; array(\r\n                    'description' =&gt; esc_html__('The comment count for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'integer'\r\n                ),\r\n                'link' =&gt; array(\r\n                    'description' =&gt; esc_html__('The link for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'author' =&gt; array(\r\n                    'description' =&gt; esc_html__('The author for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                ),\r\n                'featured_media' =&gt; array(\r\n                    'description' =&gt; esc_html__('The featured media for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                ),\r\n                'content' =&gt; array(\r\n                    'description' =&gt; esc_html__('The content for the object.', 'my-textdomain'),\r\n                    'type'  =&gt; 'string'\r\n                ),\r\n                'categories' =&gt; array(\r\n                    'description' =&gt; esc_html__('The categories for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                ),\r\n                'tags' =&gt; array(\r\n                    'description' =&gt; esc_html__('The tags for the object.', 'my-textdomain'),\r\n                    'type' =&gt; 'object'\r\n                )\r\n            )\r\n        );\r\n \r\n        return $schema;\r\n    }\r\n \r\n    // Sets up the proper HTTP status code for authorization.\r\n    public function authorization_status_code() {\r\n        return is_user_logged_in() ? 403 : 401;\r\n    }\r\n}</pre>\n<p>It&#8217;s mostly boilerplate code, but now I get my own route with endpoints and schemas. Here is what we&#8217;re working with now: <a href=\"http://staging1.basememara.com/wp-json/swiftypress/v2/posts\" target=\"_blank\" rel=\"noopener\">http://staging1.basememara.com/wp-json/swiftypress/v2/posts</a>. The <a href=\"https://developer.wordpress.org/rest-api/extending-the-rest-api/controller-classes/\">WordPress documentation</a> provides some more details and samples in creating your own custom endpoints.</p>\n<p>Designing the app as <em>offline-first</em> is important so we don&#8217;t jam ourselves into a corner later. So we need a way to persist this data locally in the app to ensure it works offline; for this we will use <a href=\"http://realm.io/docs/swift/latest/\" target=\"_blank\" rel=\"noopener\">Realm</a>. Here&#8217;s how the database will look like in the app:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_121-500x210.png\" alt=\"\" width=\"500\" height=\"210\" class=\"aligncenter size-medium wp-image-1731\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_121-500x210.png 500w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_121-768x323.png 768w, https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_121-1024x430.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>The Models</h2>\n<p>We have our database and the endpoints to update it, now we can start designing our Swift models. Let&#8217;s first start with the &#8220;<em>Post</em>&#8221; model:</p>\n<pre class=\"lang:swift decode:true \">public protocol Postable: class {\r\n    \r\n    var id: Int { get set }\r\n    var title: String { get set }\r\n    var content: String { get set }\r\n    var excerpt: String { get set }\r\n    var slug: String { get set }\r\n    var type: String { get set }\r\n    var link: String { get set }\r\n    var date: Date? { get set }\r\n    var modified: Date? { get set }\r\n    var commentCount: Int { get set }\r\n    \r\n    var media: Media? { get set }\r\n    var author: User? { get set }\r\n    var categories: List&lt;Term&gt; { get }\r\n    var tags: List&lt;Term&gt; { get }\r\n}\r\n\r\npublic class Post: Object, Postable {\r\n    \r\n    public dynamic var id = 0\r\n    public dynamic var title = \"\"\r\n    public dynamic var content = \"\"\r\n    public dynamic var excerpt = \"\"\r\n    public dynamic var slug = \"\"\r\n    public dynamic var type = \"\"\r\n    public dynamic var link = \"\"\r\n    public dynamic var date: Date?\r\n    public dynamic var modified: Date?\r\n    public dynamic var commentCount = 0\r\n    \r\n    public dynamic var media: Media?\r\n    public dynamic var author: User?\r\n    public var categories = List&lt;Term&gt;()\r\n    public var tags = List&lt;Term&gt;()\r\n    \r\n    public override static func primaryKey() -&gt; String? {\r\n        return \"id\"\r\n    }\r\n    \r\n    public override static func indexedProperties() -&gt; [String] {\r\n        return [\r\n            \"title\",\r\n            \"slug\",\r\n            \"date\"\r\n        ]\r\n    }\r\n    \r\n    public convenience init(json: JSON) {\r\n        self.init()\r\n        \r\n        id = json[.id]\r\n        title = json[.title]\r\n        content = json[.content]\r\n        excerpt = json[.excerpt]\r\n        slug = json[.slug]\r\n        type = json[.type]\r\n        link = json[.link]\r\n        date = json[.date]\r\n        modified = json[.modified]\r\n        commentCount = json[.commentCount]\r\n        \r\n        // Retrieve associated models\r\n        author = User(json: json[.author])\r\n        categories = List&lt;Term&gt;(json[.categories].map(Term.init))\r\n        tags = List&lt;Term&gt;(json[.tags].map(Term.init))\r\n        \r\n        let image = Media(json: json[.media])\r\n        if !image.link.isEmpty {\r\n            media = image\r\n        }\r\n    }\r\n}</pre>\n<p>Notice my &#8220;<em>convenient init</em>&#8220;, where I can instantiate the model from JSON. I&#8217;m using a Swifty library called <a href=\"https://github.com/delba/JASON\" target=\"_blank\" rel=\"noopener\">JASON</a>, but you can choose another library or manually do the conversion.</p>\n<p>You can see the <a href=\"https://github.com/ZamzamInc/SwiftyPress/tree/master/Sources/Models\" target=\"_blank\" rel=\"noopener\">source code for the other models</a>, but basically I created models for: <em>Media (images), Post, Term (categories and tags), and User (author)</em>.</p>\n<h2>The Service</h2>\n<p>We need a way to query the data from the local Realm and remote WordPress databases. We can create a centralized service per model to do this, such as &#8220;<em>PostService</em>&#8220;:</p>\n<pre class=\"lang:swift decode:true\">public struct PostService {\r\n\r\n    public func get(complete: @escaping ([Post]) -&gt; Void) {\r\n        guard let realm = Realm(), let list = realm.objects(Post.self) else { return [] }\r\n        complete(list)\r\n    }\r\n  \r\n    func getFromRemote(id: Int, complete: @escaping (Post) -&gt; Void) {\r\n        Alamofire.request(PostRouter.readPost(id))\r\n            .responseJASON { response in\r\n                guard let json = response.result.value, response.result.isSuccess else { return }\r\n                complete(Post(json: json))\r\n        }\r\n    }\r\n}</pre>\n<p>The first &#8220;<em>get</em>&#8221; function retrieves the posts from the local Realm database. We will also need the &#8220;<em>getFromRemote</em>&#8221; function to retrieve data from the cloud (WordPress), which passes in the remote JSON to the model&#8217;s <em>convenient init</em> to be saved into Realm later.</p>\n<p>To make things maintainable and more elegant, I created a &#8220;<em>PostRouter</em>&#8221; that houses all our REST API calls via <a href=\"https://github.com/Alamofire/Alamofire#routing-requests\" target=\"_blank\" rel=\"noopener\">Alamofire&#8217;s nifty &#8220;<span class=\"s1\"><em>URLRequestConvertible</em>&#8221; protocol</span></a>. This way, the REST API calls can be changed and managed in one place:</p>\n<pre class=\"lang:swift decode:true \">enum PostRouter: URLRequestConvertible {\r\n    case readPost(Int)\r\n    case readPosts(Int, Int, String, Bool)\r\n    case commentCount(Int)\r\n    case commentsCount\r\n    \r\n    static let baseURLString = \"http://staging1.basememara.com\"\r\n    static let baseRESTString = \"wp-json/swiftypress/v2\"\r\n\r\n    var method: HTTPMethod {\r\n        switch self {\r\n        case .readPost: return .get\r\n        case .readPosts: return .get\r\n        case .commentCount: return .get\r\n        case .commentsCount: return .get\r\n        }\r\n    }\r\n\r\n    var path: String {\r\n        switch self {\r\n        case .readPost(let id):\r\n            return \"/posts/\\(id)\"\r\n        case .readPosts(_, _, _, _):\r\n            return \"/posts\"\r\n        case .commentCount(let id):\r\n            return (\"/comments/\\(id)/count\")\r\n        case .commentsCount:\r\n            return \"/comments/count\"\r\n        }\r\n    }\r\n    \r\n    func asURLRequest() throws -&gt; URLRequest {\r\n        let url = try PostRouter.baseURLString.asURL()\r\n        var urlRequest = URLRequest(url: url\r\n            .appendingPathComponent(PostRouter.baseRESTString)\r\n            .appendingPathComponent(path))\r\n        urlRequest.httpMethod = method.rawValue\r\n\r\n        switch self {\r\n        case .readPosts(let page, let perPage, let orderBy, let ascending):\r\n            urlRequest = try URLEncoding.default.encode(urlRequest, with: [\r\n                \"page\": page,\r\n                \"per_page\": perPage,\r\n                \"orderby\": orderBy,\r\n                \"order\": ascending ? \"asc\" : \"desc\"\r\n            ])\r\n        case .commentsCount, .commentCount(_):\r\n            urlRequest = try URLEncoding.default.encode(urlRequest, with: [\r\n                \"cache\": Date().timeIntervalSince1970 as Any\r\n            ])\r\n        default: break\r\n        }\r\n\r\n        return urlRequest\r\n    }\r\n}</pre>\n<p>This allows me to query the REST API services without knowing the URL or parameters all the time. We&#8217;re ready to connect the pipes to seed the database.</p>\n<h2>App Lift Off!</h2>\n<p>In the launch of the app, we will seed the fresh database with posts saved from the server. In &#8220;<em>AppDelegate.didFinishLaunchingWithOptions</em>&#8221; we will check if the database exists. The first time it will need to be created and seeded with data.</p>\n<p>To do this, we will need a function on our &#8220;<em>PostService</em>&#8221; to update the local data from the remote server. A good way to do this is to query the posts sorted by descending modified date order, then merge them into Realm if the local modified date is older than the server or doesn&#8217;t exist at all:</p>\n<pre class=\"lang:swift decode:true \">func updateFromRemote(page: Int = 0, perPage: Int = 50, orderBy: String = \"post_modified\", ascending: Bool = false, complete: ((Result&lt;Void&gt;) -&gt; Void)? = nil) {\r\n    Alamofire.request(PostRouter.readPosts(page, perPage, orderBy, false))\r\n        .responseJASON { response in\r\n            guard response.result.isSuccess,\r\n                let realm = try? Realm(),\r\n                let json = response.result.value,\r\n                !json.arrayValue.isEmpty else {\r\n                    complete?(.failure(response.result.error ?? PressError.emptyPosts))\r\n                    return\r\n                }\r\n            \r\n            // Parse JSON to array\r\n            let list: [Post] = json.map(Post.init).filter {\r\n                // Skip if latest changes already persisted\r\n                if let persisted = AppGlobal.realm?.object(ofType: Post.self, forPrimaryKey: $0.id),\r\n                    let localDate = persisted.modified,\r\n                    let remoteDate = $0.modified,\r\n                    localDate &gt;= remoteDate {\r\n                        return false\r\n                }\r\n            \r\n                return true\r\n            }\r\n            \r\n            if !list.isEmpty {\r\n                do {\r\n                    try realm.write {\r\n                        realm.add(List(list), update: true)\r\n                    }\r\n                } catch {\r\n                    // TODO: Log error\r\n                }\r\n            }\r\n            \r\n            complete?(.success())\r\n        }\r\n}</pre>\n<p>It retrieves the JSON from WordPress, compares the <em>modified</em> property to the local post model in Realm, then persists it if it is older or doesn&#8217;t exist.</p>\n<p>This is great for updating the last few posts, but seeding the database from scratch will need to be handled different since there can be hundreds or even thousands of posts. We can do this using a recursive function that persists posts via pagination:</p>\n<pre class=\"lang:swift decode:true \">func seedFromRemote(for page: Int = 0, complete: (() -&gt; Void)? = nil) {\r\n    updateFromRemote(page: page, orderBy: \"post_date\") {\r\n        guard $0.isSuccess else { complete?(); return }\r\n        self.seedFromRemote(for: page + 1, complete: complete)\r\n    }\r\n}</pre>\n<p>This function calls the previous &#8220;<em>updateFromRemote</em>&#8221; function several times until there are no more pages left. Run this function called <span>&#8220;</span><em>PostService.seedFromRemote</em><span>&#8221; </span>in the <span>&#8220;</span><em>AppDelegate.didFinishLaunchingWithOptions</em><span>&#8221; so the recursive scraping begins!</span></p>\n<h4>Optimizing the App Startup</h4>\n<p>We can achieve a huge performance boost by running the app in our development environment and get the completed database from the app to use as a seed database for new app installs. This is much more performant to copy the seed database instead of querying the data page-by-page and parsing it. Here&#8217;s the function you can use to copy the seed database to the user&#8217;s Realm space:</p>\n<pre class=\"lang:swift decode:true\">func setupDatabase() {\r\n    let fileManager = FileManager.default\r\n\r\n    // Skip if database already exists\r\n    guard let realmFileURL = Realm.Configuration.defaultConfiguration.fileURL,\r\n        !fileManager.fileExists(atPath: realmFileURL.path)\r\n            else { return }\r\n    \r\n    // Seed data to fresh database\r\n    guard let seedFileURL = Bundle.main.url(forResource: \"seed\", withExtension: \"realm\", subdirectory: \"\\(AppGlobal.userDefaults[.baseDirectory])/data\"),\r\n        fileManager.fileExists(atPath: seedFileURL.path) else {\r\n            // Construct from a series of REST requests\r\n            return PostService().seedFromRemote()\r\n        }\r\n    \r\n    // Use pre-created seed database\r\n    do { try fileManager.copyItem(at: seedFileURL, to: realmFileURL) }\r\n    catch { /*TODO: Log error*/ }\r\n}</pre>\n<p>It checks if the Realm database exists. If it doesn&#8217;t, it will look for the seed database to copy to the user&#8217;s Realm database path. It will fallback to our recursive function that will seed the database from cloud via REST API and pagination if the seed database doesn&#8217;t exist.</p>\n<p>The seeding of the database should also be running in the &#8220;<em>AppDelegate</em>&#8220;. However, it must be run on first installs only or the database will be overwritten every time. I&#8217;m using a neat library called <a href=\"https://github.com/KyleGoslan/UpdateKit\" target=\"_blank\" rel=\"noopener\">UpdateKit</a> to know when the app is freshly installed or even when the app updates:</p>\n<pre class=\"lang:swift mark:3-5 decode:true\">class AppDelegate: UIResponder, UIApplicationDelegate\r\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\r\n        UpdateKit().firstLaunch {\r\n            setupDatabase()\r\n        }\r\n    }\r\n}</pre>\n<h4>Keeping Posts Updated</h4>\n<p>For subsequent new or modified posts, we will read the last 50 modified posts in the view controller&#8217;s load in a throttled manner using a great library called <a href=\"https://github.com/soffes/RateLimit\" target=\"_blank\" rel=\"noopener\">RateLimit</a>:</p>\n<pre class=\"lang:swift decode:true \">class HomeViewController: UIViewController {\r\n    let refreshLimit = TimedLimiter(limit: 10800)\r\n\r\n    override func viewWillAppear(_ animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        \r\n        // Retrieve latest posts not more than every X hours\r\n        refreshLimit.execute {\r\n            service.updateFromRemote()\r\n        }\r\n    }\r\n}</pre>\n<p>Great, now we should everything we need to build the rest of the app!</p>\n<h2>The UI</h2>\n<p>Since a few pages will need to display posts, such favorites, most popular, and just browsing all or by category, we should create a couple base classes. One for tables and another for collections. Here&#8217;s what the base table class called &#8220;<em>RealmPostTableViewController</em>&#8221; looks like:</p>\n<pre class=\"lang:swift decode:true\">class RealmPostTableViewController: UITableViewController, RealmControllable {\r\n    var notificationToken: NotificationToken?\r\n    var models: Results&lt;Post&gt;?\r\n    let service = PostService()\r\n    let cellNibName: String? = \"PostTableViewCell\"\r\n    \r\n    var categoryID: Int = 0 {\r\n        didSet { \r\n            applyFilterAndSort(categoryID &gt; 0\r\n                ? \"ANY categories.id == \\(categoryID)\" : nil)\r\n            didCategorySelect()\r\n        }\r\n    }\r\n    \r\n    override func viewWillAppear(_ animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        \r\n        // Retrieve latest posts not more than every X hours\r\n        AppGlobal.postRefreshLimit.execute {\r\n            service.updateFromRemote()\r\n        }\r\n    }\r\n    \r\n    func didCategorySelect() {\r\n        // Override in derived classes if needed\r\n    }\r\n}\r\n\r\nextension RealmPostTableViewController {\r\n    \r\n    override func numberOfSections(in tableView: UITableView) -&gt; Int {\r\n        return 1\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {\r\n        return models?.count ?? 0\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {\r\n        let cell = tableView[indexPath] as! PostTableViewCell\r\n        guard let model = models?[indexPath.row] else { return cell }\r\n        return cell.bind(model)\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\r\n        performSegue(withIdentifier: PostDetailViewController.segueIdentifier, sender: nil)\r\n    }\r\n}</pre>\n<p>To create the counterpart collection base class, I&#8217;m using a protocol called &#8220;<em>RealmControllable</em>&#8221; <span>to unify the table and collection views. I cover this</span> in my previous post called &#8220;<em><a href=\"http://staging1.basememara.com/protocol-oriented-tableview-collectionview/\" target=\"_blank\" rel=\"noopener\">Protocol-Oriented TableView and CollectionView in Swift</a></em>&#8220;.</p>\n<pre class=\"lang:swift decode:true\">protocol RealmControllable: DataControllable {\r\n    associatedtype ServiceType: Serviceable\r\n    associatedtype DataType: Object\r\n    \r\n    var notificationToken: NotificationToken? { get set }\r\n    var service: ServiceType { get }\r\n    var models: Results&lt;DataType&gt;? { get set }\r\n}\r\n\r\nextension RealmControllable {\r\n\r\n    var sortProperty: String {\r\n        return \"date\"\r\n    }\r\n\r\n    var sortAscending: Bool {\r\n        return false\r\n    }\r\n    \r\n    func setupDataSource() {\r\n        models = AppGlobal.realm?.objects(DataType.self).sorted(\r\n            byKeyPath: sortProperty, ascending: sortAscending)\r\n        \r\n        // Set results notification block\r\n        notificationToken = models?.addNotificationBlock { [unowned self] (changes: RealmCollectionChange) in\r\n            switch changes {\r\n            case .initial, .update:\r\n                self.dataView.reloadData()\r\n            case .error(let err):\r\n                // An error occurred while opening the Realm file\r\n                // on the background worker thread\r\n                fatalError(\"\\(err)\")\r\n            }\r\n        }\r\n        \r\n        dataView.reloadData()\r\n    }\r\n    \r\n    func applyFilterAndSort(_ filter: String? = nil, sort: String? = nil, ascending: Bool? = nil) {\r\n        guard let realm = AppGlobal.realm else { return }\r\n        \r\n        var temp = realm.objects(DataType.self)\r\n            .sorted(byKeyPath: sortProperty, ascending: ascending ?? sortAscending)\r\n        \r\n        if let filter = filter, !filter.isEmpty {\r\n            temp = temp.filter(filter)\r\n        }\r\n        \r\n        if let sort = sort, !sort.isEmpty {\r\n            temp = temp.sorted(byKeyPath: sort, ascending: ascending ?? sortAscending)\r\n        }\r\n\r\n        models = temp\r\n\r\n        dataView.reloadData()\r\n        dataView.scrollToTop()\r\n    }\r\n}</pre>\n<p>The Realm &#8220;<em>NotificationToken</em>&#8221; is wiring up the database updates reactively to the table or collection views. When an update happens in the database, it reloads the UI automatically. Also, there is filter and sort functions that the derived view controllers can use easily.</p>\n<p>For the table cell, we are simply binding the data to the cell view and configuring its style:</p>\n<pre class=\"lang:swift decode:true \">public class PostTableViewCell: UITableViewCell {\r\n\r\n    @IBOutlet public weak var itemImage: UIImageView!\r\n    @IBOutlet public weak var itemTitle: UILabel!\r\n    @IBOutlet public weak var itemContent: UILabel!\r\n\r\n    public func bind(_ model: Post) -&gt; Self {\r\n        configure()\r\n    \r\n        itemTitle.text = model.title.decodeHTML()\r\n        itemContent.text = model.excerpt.decodeHTML().stripHTML()\r\n        itemImage.setURL(model.media?.link)\r\n        \r\n        return self\r\n    }\r\n    \r\n    func configure() {\r\n        // Optimize\r\n        layer.shouldRasterize = true\r\n        layer.rasterizationScale = UIScreen.main.scale\r\n        \r\n        // Style\r\n        itemImage.layer.shadowOffset = .zero\r\n        itemImage.layer.shadowRadius = 1\r\n        itemImage.layer.shadowOpacity = 1\r\n        itemImage.layer.masksToBounds = false\r\n        \r\n    }\r\n}</pre>\n<p>Finally for the view controller, we will end up with something super lightweight and flexible:</p>\n<pre class=\"lang:swift decode:true \">class PopularViewController: RealmPostTableViewController {\r\n    \r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        \r\n        // Lock post list to the popular category\r\n        categoryID = 595\r\n    }\r\n}</pre>\n<p>We can use this rapid development pattern for all our view controllers that need to display a list of posts. For example, here&#8217;s one that displays a user&#8217;s favorite posts:</p>\n<pre class=\"lang:swift decode:true \">class FavoritesViewController: RealmPostTableViewController {\r\n    \r\n    override func viewWillAppear(_ animated: Bool) {\r\n        super.viewWillAppear(animated)\r\n        applyFavoriteFilter()\r\n    }\r\n    \r\n    func applyFavoriteFilter(_ reload: Bool = true) {\r\n        let favorites = AppGlobal.userDefaults[.favorites]\r\n            .map(String.init)\r\n            .joined(separator: \",\")\r\n        \r\n        applyFilterAndSort(\"id IN {\\(favorites)}\", reload: reload)\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {\r\n        return AppGlobal.userDefaults[.favorites].count\r\n    }\r\n        \r\n    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -&gt; Bool {\r\n        return true\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {\r\n        if let model = models?[indexPath.row], editingStyle == .delete {\r\n            service.removeFavorite(model.id)\r\n            tableView.deleteRows(at: [indexPath], with: .fade)\r\n            applyFavoriteFilter(false)\r\n        }\r\n    }\r\n    \r\n    override func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? {\r\n        return models?.count ?? 0 == 0 ? \"No favorites to show.\" : nil\r\n    }\r\n}\r\n</pre>\n<h2>The App</h2>\n<p>After getting all our framework pieces in place, our apps will be super lightweight but still configurable. Here&#8217;s what an app using the framework will look like:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_124.png\" alt=\"\" width=\"408\" height=\"484\" class=\"aligncenter size-full wp-image-1737\" /></p>\n<p>That&#8217;s incredibly light! Updating the framework underneath would update the all apps across all our projects at once. For wiring it to the framework, all that&#8217;s needed is the &#8220;<em>Settings.plist</em>&#8221; to store your app and WordPress configurations, and an HTML file used as a template for your post detail views (using <a href=\"https://github.com/kylef/Stencil\" target=\"_blank\" rel=\"noopener\">Stencil</a> to bind the values to the HTML). Of course, finally the AppDelegate code to glue the framework to the app&#8217;s lifecycle:</p>\n<pre class=\"lang:swift decode:true \">class AppDelegate: UIResponder, UIApplicationDelegate, AppPressable {\r\n\r\n    var window: UIWindow?\r\n\r\n    override init() {\r\n        super.init()\r\n        AppGlobal.userDefaults.registerSite()\r\n    }\r\n\r\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool {\r\n        return didFinishLaunchingSite(application, launchOptions: launchOptions)\r\n    }\r\n    \r\n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\r\n        return continueUserActivity(application, userActivity: userActivity, restorationHandler: restorationHandler)\r\n    }\r\n}\r\n</pre>\n<p>That&#8217;s it! Here&#8217;s what the app looks like with only a few files in the app source code:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png\" alt=\"\" width=\"391\" height=\"508\" class=\"aligncenter size-full wp-image-1739\" /></p>\n<h2>Conclusion</h2>\n<p>Although this post was about WordPress, the concepts are generic enough to extend the framework to support different providers. This would allow integrating other CMS or REST endpoint with the same code. As long as the JSON structure is the same then you&#8217;re good, but even the JSON structure can be abstracted away under each provider model for even more flexibility.</p>\n<p>To view the full working source code, see <a href=\"https://github.com/ZamzamInc/SwiftyPress\" target=\"_blank\" rel=\"noopener\">SwiftyPress GitHub repo</a>. The big payoff is replicating this for multiple WordPress sites becomes a breeze 😉</p>\n<p><strong><em>Happy Coding!!</em></strong></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n",
            "link": "https://staging1.basememara.com/full-stack-ios-and-wordpress-in-swift/",
            "comment_count": 11,
            "author": 2,
            "featured_media": 1739,
            "terms": [
                53,
                50,
                55,
                72
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2017-01-25T19:54:17",
            "modified": "2018-10-21T03:47:58"
        },
        {
            "id": 26200,
            "title": "Protocol-Oriented Routing in Swift",
            "slug": "protocol-oriented-router-in-swift",
            "type": "post",
            "excerpt": "There are hundreds of complex routing frameworks and libraries in iOS. Usually they're overly complex to retrofit into an existing app or they completely bypass Storyboards. In this post, I'd like to offer a simple, native-like routing mechanism that leverages Storyboards like a boss to handle navigation.",
            "content": "<p>There are hundreds of complex routing frameworks and libraries in iOS. Usually they&#8217;re overly complex to retrofit into an existing app or they completely bypass Storyboards. In this post, I&#8217;d like to offer a simple, native-like routing mechanism that leverages Storyboards like a boss to handle navigation.</p>\n<h2>The &#8220;Normal&#8221; Way</h2>\n<p>Let&#8217;s examine the <em>&#8220;normal&#8221;</em> way of handling navigation between view controllers. First, avoid segue&#8217;s at all costs since they lock you into a certain navigation flow that&#8217;s rigid and inflexible. Instead, we&#8217;ll create an instance of the target view controller and then use the <a href=\"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621377-show\" target=\"_blank\" rel=\"noopener\"><em>show</em></a> or <a href=\"https://developer.apple.com/documentation/uikit/uiviewcontroller/1621380-present\" target=\"_blank\" rel=\"noopener\"><em>present</em></a> API&#8217;s of <code>UIViewController</code> against it to handle the navigation.</p>\n<p>To do this, let&#8217;s stick with a feature-based app structure and create one storyboard-per-view-controller. Here&#8217;s what our sample app would look like:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/07/Xcode-Storyboard-Feature-Based.png\" alt=\"\" width=\"300\" height=\"383\" class=\"aligncenter wp-image-26240\" /></p>\n<p>Once we add the view controller onto the storyboard via <em>Interface Builder</em>, assign the class to it, and checkmark <em>&#8220;Is Initial View Controller&#8221;</em>, we can create an instance of the view controller by first getting a reference to the storyboard and calling the <a href=\"https://developer.apple.com/documentation/uikit/uistoryboard/1616213-instantiateinitialviewcontroller\" target=\"_blank\" rel=\"noopener\"><em>instantiateInitialViewController</em></a> API from it:</p>\n<pre class=\"lang:swift decode:true \">let storyboard = UIStoryboard(name: \"Login\", bundle: nil)\r\n\r\nguard let controller = storyboard.instantiateInitialViewController()\r\n    else { fatalError(\"Invalid controller for storyboard.\") }\r\n\r\nshow(controller, sender: nil)</pre>\n<p>Since we have to route the user several times within the app life cycle, the above code can get verbose and it isn&#8217;t compile-safe either.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/07/normal-meme-500x520.jpg\" alt=\"\" width=\"400\" height=\"416\" class=\"aligncenter wp-image-26245\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/07/normal-meme-500x520.jpg 500w, https://staging1.basememara.com/wp-content/uploads/2017/07/normal-meme.jpg 700w\" sizes=\"(max-width: 400px) 100vw, 400px\" /></p>\n<h2>The Routable Protocol Way</h2>\n<p>In the WWDC 2015 talk called &#8220;<a href=\"https://developer.apple.com/videos/play/wwdc2015-411/?time=1593\" target=\"_blank\" rel=\"noopener\">Swift in Practice</a>&#8220;, Apple engineers outlined how to make segue identifiers strongly-typed by creating a protocol with an associated <code>RawRepresentable</code> type that others must conform to:</p>\n<pre class=\"lang:swift decode:true\">protocol SegueHandlerType {\r\n    associatedtype SegueIdentifier: RawRepresentable\r\n}</pre>\n<p>We&#8217;re throwing segues out the window, but we can still use this clever implementation to handle the storyboard routing:</p>\n<pre class=\"lang:swift decode:true \">protocol Routable {\r\n    associatedtype StoryboardIdentifier: RawRepresentable\r\n}</pre>\n<p>Let&#8217;s move our original <em>&#8220;normal&#8221;</em> routing code above to a protocol extension to abstract it away:</p>\n<pre class=\"lang:swift decode:true\">extension Routable where Self: UIViewController, StoryboardIdentifier.RawValue == String {\r\n\r\n    func show(storyboard: StoryboardIdentifier) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue, bundle: nil)\r\n        \r\n        guard let controller = storyboard.instantiateInitialViewController())\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        show(controller, sender: self)\r\n    }\r\n}</pre>\n<p>Now we can make our view controller conform to the <code>Routable</code> protocol and provide its enum of storyboards, then feed the enum case to the <code>show</code> API:</p>\n<pre class=\"lang:swift decode:true\">class LoginViewController: UIViewController {\r\n\r\n    @IBAction func loginTapped() {\r\n        show(storyboard: .profile)\r\n    }\r\n}\r\n\r\nextension LoginViewController: Routable {\r\n    \r\n    enum StoryboardIdentifier: String {\r\n        case profile = \"Profile\"\r\n        case more = \"More\"\r\n    }\r\n}</pre>\n<p>You can use `show(storyboard: .profile)` a dozen of times and is compile-safe plus sleek.</p>\n<h2>Routable Micro-Library</h2>\n<p>Let&#8217;s add sugar and spice to make this more reusable and flexible:</p>\n<pre class=\"lang:js decode:true\">public protocol Routable {\r\n    associatedtype StoryboardIdentifier: RawRepresentable\r\n    \r\n    func present&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String?, animated: Bool, modalPresentationStyle: UIModalPresentationStyle?, configure: ((T) -&gt; Void)?, completion: ((T) -&gt; Void)?)\r\n    func show&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String?, configure: ((T) -&gt; Void)?)\r\n    func showDetailViewController&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String?, configure: ((T) -&gt; Void)?)\r\n}\r\n\r\npublic extension Routable where Self: UIViewController, StoryboardIdentifier.RawValue == String {\r\n\r\n    /**\r\n     Presents the intial view controller of the specified storyboard modally.\r\n\r\n     - parameter storyboard: Storyboard name.\r\n     - parameter identifier: View controller name.\r\n     - parameter configure: Configure the view controller before it is loaded.\r\n     - parameter completion: Completion the view controller after it is loaded.\r\n     */\r\n    func present&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String? = nil, animated: Bool = true, modalPresentationStyle: UIModalPresentationStyle? = nil, configure: ((T) -&gt; Void)? = nil, completion: ((T) -&gt; Void)? = nil) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue)\r\n        \r\n        guard let controller = (identifier != nil\r\n            ? storyboard.instantiateViewController(withIdentifier: identifier!)\r\n            : storyboard.instantiateInitialViewController()) as? T\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        if let modalPresentationStyle = modalPresentationStyle {\r\n            controller.modalPresentationStyle = modalPresentationStyle\r\n        }\r\n        \r\n        configure?(controller)\r\n        \r\n        present(controller, animated: animated) {\r\n            completion?(controller)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     Present the intial view controller of the specified storyboard in the primary context.\r\n     Set the initial view controller in the target storyboard or specify the identifier.\r\n\r\n     - parameter storyboard: Storyboard name.\r\n     - parameter identifier: View controller name.\r\n     - parameter configure: Configure the view controller before it is loaded.\r\n     */\r\n    func show&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String? = nil, configure: ((T) -&gt; Void)? = nil) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue)\r\n        \r\n        guard let controller = (identifier != nil\r\n            ? storyboard.instantiateViewController(withIdentifier: identifier!)\r\n            : storyboard.instantiateInitialViewController()) as? T\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        configure?(controller)\r\n        \r\n        show(controller, sender: self)\r\n    }\r\n    \r\n    /**\r\n     Present the intial view controller of the specified storyboard in the secondary (or detail)\u0080\u009d context.\r\n     Set the initial view controller in the target storyboard or specify the identifier.\r\n\r\n     - parameter storyboard: Storyboard name.\r\n     - parameter identifier: View controller name.\r\n     - parameter configure: Configure the view controller before it is loaded.\r\n     */\r\n    func showDetailViewController&lt;T: UIViewController&gt;(storyboard: StoryboardIdentifier, identifier: String? = nil, configure: ((T) -&gt; Void)? = nil) {\r\n        let storyboard = UIStoryboard(name: storyboard.rawValue)\r\n        \r\n        guard let controller = (identifier != nil\r\n            ? storyboard.instantiateViewController(withIdentifier: identifier!)\r\n            : storyboard.instantiateInitialViewController()) as? T\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n        \r\n        configure?(controller)\r\n        \r\n        showDetailViewController(controller, sender: self)\r\n    }\r\n}\r\n\r\npublic extension UIStoryboard {\r\n\r\n    /**\r\n     Creates and returns a storyboard object for the specified storyboard resource file in the main bundle of the current application.\r\n\r\n     - parameter name: The name of the storyboard resource file without the filename extension.\r\n\r\n     - returns: A storyboard object for the specified file. If no storyboard resource file matching name exists, an exception is thrown.\r\n     */\r\n    convenience init(name: String) {\r\n        self.init(name: name, bundle: nil)\r\n    }\r\n}</pre>\n<p>Notice I&#8217;ve added <code>show</code> and <code>present</code> API&#8217;s and a trailing closure to configure the controller before and after its loaded so I can use it like this:</p>\n<pre class=\"lang:swift decode:true\">class ProfileViewController: UIViewController {\r\n\r\n    @IBAction func moreTapped() {\r\n        show(storyboard: .more) { (controller: MoreViewController) in\r\n            controller.someProperty = \"\\(Date())\"\r\n        }\r\n    }\r\n}\r\n\r\nextension ProfileViewController: Routable {\r\n    \r\n    enum StoryboardIdentifier: String {\r\n        case more = \"More\"\r\n        case login = \"Login\"\r\n    }\r\n}</pre>\n<p>I pushed this into another library so it will be maintained <a href=\"https://github.com/ZamzamInc/ZamzamKit/blob/master/Sources/Protocols/iOS/Routable.swift\" target=\"_blank\" rel=\"noopener\">there going forward</a>. For a complete sample app, you can download a <a href=\"https://github.com/basememara/SwiftyRouter\" target=\"_blank\" rel=\"noopener\">working demo here</a>.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n",
            "link": "https://staging1.basememara.com/protocol-oriented-router-in-swift/",
            "comment_count": 8,
            "author": 2,
            "featured_media": 26240,
            "terms": [
                80,
                62,
                78,
                50,
                55
            ],
            "meta": {
                "_series_part": "3"
            },
            "created": "2017-10-01T11:00:54",
            "modified": "2018-10-13T03:37:33"
        },
        {
            "id": 5568,
            "title": "Delegates to Swift Closure Pattern",
            "slug": "swift-delegates-closure-pattern",
            "type": "post",
            "excerpt": "Delegation is a simple and powerful pattern. However, closures are more Swifty and scales better. Let's convert delegates to closures!",
            "content": "<p><a href=\"https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html\" target=\"_blank\">Delegation</a> is a simple and powerful pattern in which one object acts on behalf of another object by holding a reference to the delegate, then sending messages through it. This is the pattern Apple has chosen for its frameworks and has worked quite well&#8230; a little awkward at first, but eventually makes sense 🙂</p>\n<p>Then Swift came along and brought new techniques and patterns due to it&#8217;s functional paradigm. The game changed and Apple&#8217;s coding conventions are making a slow shift to becoming more Swifty. In this post, I&#8217;m going to illustrate how we can convert delegates to a closures-based pattern.</p>\n<h2>What About Delegates?</h2>\n<p>Although delegates are powerful, it&#8217;s a bit archaic. With reactive and event-driven programing, delegates breaks down and lose its elegance. See this simple delegate pattern example below. Notice how the <code>completed</code> flag gets propagated back to the parent object who was passed into the <code>Todo</code> initializer:</p>\n<pre class=\"lang:swift decode:true\">protocol TodoDelegate: class {\r\n    func completed(todo: Todo)\r\n}\r\n\r\nstruct Todo {\r\n    var id: Int\r\n    var title: String\r\n    \r\n    var completed: Bool = false {\r\n        didSet {\r\n            // Notify delegate of completion\r\n            guard completed else { return }\r\n            delegate?.completed(todo: self)\r\n        }\r\n    }\r\n    \r\n    weak var delegate : TodoDelegate?\r\n    \r\n    init(_ delegate: TodoDelegate, id: Int, title: String) {\r\n        self.delegate = delegate\r\n        self.id = id\r\n        self.title = title\r\n    }\r\n}\r\n\r\nclass MyParentController: TodoDelegate {\r\n    lazy var todo1: Todo = {\r\n        return Todo(self, id: 1, title: \"Todo item 1\")\r\n    }()\r\n    \r\n    lazy var todo2: Todo = {\r\n        return Todo(self, id: 2, title: \"Todo item 2\")\r\n    }()\r\n    \r\n    lazy var todo3: Todo = {\r\n        return Todo(self, id: 3, title: \"Todo item 3\")\r\n    }()\r\n    \r\n    func completed(todo: Todo) {\r\n        switch todo.id {\r\n        case 1: print(\"Do something with todo: \\(todo.title)\")\r\n        case 2: print(\"Do another thing with todo: \\(todo.title)\")\r\n        case 3: print(\"Do final thing with todo: \\(todo.title)\")\r\n        default: break\r\n        }\r\n    }\r\n}\r\n\r\nlet controller = MyParentController()\r\ncontroller.todo1.completed = true\r\ncontroller.todo2.completed = true\r\ncontroller.todo3.completed = true\r\n\r\n// Prints the following to the console:\r\n// Do something with todo: Todo item 1\r\n// Do something with todo: Todo item 1\r\n// Do final thing with todo: Todo item 3</pre>\n<p>The <code>Todo</code> objects were instantiated in <code>MyParentController</code> and passed itself in as the delegate. It accepted the delegate as a specific protocol called <code>TodoDelegate</code>. This protocol will indicate to the <code>Todo</code> object what properties and functions the delegate has.</p>\n<p>In the <code>complete</code> property of <code>Todo</code>, the <code>didSet</code> event calls the delegate&#8217;s <code>completed</code> function. It knows that the <code>completed</code> function is there because <code>MyParentController</code> adopts <code>TodoDelegate</code>.</p>\n<p>This is where delegates breaks down. The <code>completed</code> function in <code>MyParentController</code> is being shared for all <code>Todo</code> objects. I have to put a <code>switch</code> statement there to find the one who triggered it and perform the customized action for it. What if we we&#8217;re listening to hundreds of <code>Todo</code> objects, that <code>switch</code> statement would get out of control. Even besides this, it feels weird that the <code>Todo</code> object and the triggered function are in two different places.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/03/awkward_meme.jpg\" width=\"300\" height=\"300\" class=\"aligncenter wp-image-5570\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2017/03/awkward_meme.jpg 400w, https://staging1.basememara.com/wp-content/uploads/2017/03/awkward_meme-150x150.jpg 150w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></p>\n<h2>Delegates to Closure Pattern</h2>\n<p>We will now convert the above delegate pattern to a closure-based one. This fits more into the functional programming paradigm. Instead of a delegate function getting triggered, we will allow callers to &#8220;subscribe&#8221; to the <code>Todo</code> object. The subscriptions will take a closure and queue it for later execution when ready:</p>\n<pre class=\"lang:swift decode:true \">struct Todo {\r\n    var id: Int\r\n    var title: String\r\n    \r\n    var completed: Bool = false {\r\n        didSet {\r\n            // Notify subscribers of completion\r\n            guard completed else { return }\r\n            handlers.forEach { $0(self) }\r\n        }\r\n    }\r\n    \r\n    // Task queue\r\n    var handlers = [(Todo) -&gt; Void]()\r\n    \r\n    init(id: Int, title: String) {\r\n        self.id = id\r\n        self.title = title\r\n    }\r\n    \r\n    mutating func subscribe(completion: @escaping (Todo) -&gt; Void) {\r\n        handlers += [completion]\r\n    }\r\n}\r\n\r\nclass MyParentController {\r\n    lazy var todo1: Todo = {\r\n        return Todo(id: 1, title: \"Todo item 1\")\r\n    }()\r\n    \r\n    lazy var todo2: Todo = {\r\n        return Todo(id: 2, title: \"Todo item 2\")\r\n    }()\r\n    \r\n    lazy var todo3: Todo = {\r\n        return Todo(id: 3, title: \"Todo item 3\")\r\n    }()\r\n}\r\n\r\nlet controller = MyParentController()\r\n\r\ncontroller.todo1.subscribe {\r\n    print(\"Do something with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo2.subscribe {\r\n    print(\"Do another thing with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo3.subscribe {\r\n    print(\"Do final thing with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo1.subscribe {\r\n    print(\"Another one for fun with todo: \\($0.title)\")\r\n}\r\n\r\ncontroller.todo1.completed = true\r\ncontroller.todo2.completed = true\r\ncontroller.todo3.completed = true\r\n\r\n// Prints the following to the console:\r\n// Do something with todo: Todo item 1\r\n// Another one for fun with todo: Todo item 1\r\n// Do another thing with todo: Todo item 1\r\n// Do final thing with todo: Todo item 3</pre>\n<p>We got rid of the delegate protocol completely. In fact, the <code>Todo</code> objects doesn&#8217;t even need a reference to <code>MyParentController</code> at all! Instead, the caller subscribes to the todo&#8217;s events:</p>\n<pre class=\"lang:swift decode:true \">controller.todo1.subscribe {\r\n    print(\"Do something with todo: \\($0.title)\")\r\n}</pre>\n<p>This is great because now the focus is on the <code>Todo</code> object. It makes more sense to attach a closure to the <code>Todo</code> object itself instead of defining it somewhere else in a shared delegate function.</p>\n<p>During the <code>subscribe</code> process, it stores this closure into a queue to be called later when ready:</p>\n<pre class=\"lang:swift decode:true\">var handlers = [(Todo) -&gt; Void]()\r\n...\r\nfunc subscribe(completion: @escaping (Todo) -&gt; Void) {\r\n    handlers += [completion]\r\n}</pre>\n<p>When it&#8217;s time to trigger the event, it executes the closures in the queue one by one:</p>\n<pre class=\"lang:swift decode:true \">var completed: Bool = false {\r\n    didSet {\r\n        guard completed else { return }\r\n        handlers.forEach { $0(self) }\r\n    }\r\n}</pre>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2017/03/brilliant_meme.jpg\" alt=\"\" width=\"350\" height=\"400\" class=\"aligncenter size-full wp-image-5571\" /></p>\n<h2>What About Thread-Safety?</h2>\n<p>There&#8217;s one complication you must handle. The queue is simply an array of closures. This can be dangerous if subscriptions were to happen from multiple threads. Therefore, we need some locking or exclusivity mechanism on the queue. The good news is I have already done this in another post called <a href=\"http://staging1.basememara.com/creating-thread-safe-arrays-in-swift/\" target=\"_blank\">Creating Thread-Safe Arrays in Swift</a>. We can use the <code>SynchronizedArray</code> from there for our queue type:</p>\n<pre class=\"lang:swift decode:true\">var handlers = SynchronizedArray&lt;(Todo) -&gt; Void&gt;()\r\n...\r\nfunc subscribe(completion: @escaping (Todo) -&gt; Void) {\r\n    handlers += [completion]\r\n}</pre>\n<p>Everything else stays the same because the <code>SynchronizedArray</code> has many of the same API&#8217;s as a regular array, but is thread-safe!</p>\n<h2>Conclusion</h2>\n<p>Although this was a simple example, the delegate to closure pattern can be applied to more complex scenarios. For example, imagine you can subscribe to GPS location updates instead of sharing a single delegate function:</p>\n<pre class=\"lang:swift decode:true \">locationManager.subscribeLocation {\r\n    print(\"Location is: \\($0)\")\r\n}</pre>\n<p>This becomes even more useful for shared singletons which can only accept one delegate, instead of being able to trigger multiple delegates. In a future post, I&#8217;ll convert delegates to closures for native Apple managers like <a href=\"https://developer.apple.com/reference/corelocation/cllocationmanager\" target=\"_blank\">CLLocationManager</a> and <a href=\"https://developer.apple.com/reference/corebluetooth/cbcentralmanager\" target=\"_blank\">CBCentralManager</a>. With a thread-safe queue in place, working with them should feel Swifty and robust.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n",
            "link": "https://staging1.basememara.com/swift-delegates-closure-pattern/",
            "comment_count": 6,
            "author": 2,
            "featured_media": 5576,
            "terms": [
                74,
                50,
                55,
                76,
                73
            ],
            "meta": {
                "_series_part": "1"
            },
            "created": "2017-03-03T16:35:14",
            "modified": "2018-10-10T22:01:25"
        },
        {
            "id": 791,
            "title": "What's New in iOS 10 and Beyond",
            "slug": "whats-new-ios-beyond",
            "type": "post",
            "excerpt": "It is clear from this year's WWDC that Apple envisions a new era beyond the traditional apps-in-a-grid-on-your-home-screen model. iOS 10 is more of a revolutionary iteration to the Apple ecosystem and vision. There were many initiatives uncovered that gives us clues to the future of Apple.",
            "content": "<p>This year&#8217;s <a href=\"https://developer.apple.com/wwdc/\" target=\"_blank\">WWDC</a> felt different than previous years. Things have been more evolutionary since iOS 7. However, <a href=\"https://developer.apple.com/ios/\" target=\"_blank\">iOS 10</a> seems more of a revolutionary iteration to the Apple ecosystem and vision. There were many initiatives uncovered that gives us clues to the future of Apple.</p>\n<h2>AI</h2>\n<p>It has been clear from the beginning that Apple takes Siri seriously. However, it seemed Apple has been stagnant in this space since its introduction in 2011 (yes, it&#8217;s been that long!). WWDC showed us that Apple has been working hard in the lab to play catch up. Though, Siri has been under-utilized by many of its users, there&#8217;s been something missing . So what was it? Unlike Google, Apple needed years of data collection to catch up and seems like it&#8217;s finally about to pay off. <a href=\"http://blog.cryptographyengineering.com/2016/06/what-is-differential-privacy.html\" target=\"_blank\">Differential privacy</a> will give this an even bigger boast. However, most of all, opening Siri up to developers with <a href=\"https://developer.apple.com/sirikit/\" target=\"_blank\">SiriKit</a> will be the game changer that will change the landscape for Apple&#8217;s AI.</p>\n<h2>IoT</h2>\n<p><a href=\"https://developer.apple.com/reference/homekit\" target=\"_blank\">HomeKit</a> has a new Home app and takes a front seat in iOS 10 with a dedicated area in Mission Control.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/06/ios-10-home-app-500x334.jpg\" alt=\"iOS 10 HomeKit\" width=\"300\" class=\"aligncenter size-medium wp-image-792\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/06/ios-10-home-app-500x334.jpg 500w, https://staging1.basememara.com/wp-content/uploads/2016/06/ios-10-home-app-768x513.jpg 768w, https://staging1.basememara.com/wp-content/uploads/2016/06/ios-10-home-app.jpg 800w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Previously, HomeKit required developers to create their own app to leverage the framework. Now in iOS 10, the Home app is baked right into iOS and unifies the smart home dream. This is exactly what is needed in the clunky and fragmented smart home sector.</p>\n<h2>Messaging</h2>\n<p>Instant messaging is integral to the technological evolution. It has made email look like fax. We are seeing new ways instant messaging platforms are being re-imagined by the introduction of chatbots. iMessages is the most used Apple app and now it has also been <a href=\"https://developer.apple.com/imessage/\" target=\"_blank\">opened to developers</a>. Although you can expect to see new ways to send kitten GIF&#8217;s in iMessages, expect to also see more profound advances that will move iMessages to the AI category.</p>\n<h2>VoiP</h2>\n<p>The new <a href=\"https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html\" target=\"_blank\">CallKit</a> framework allows VoiP apps, like Skype, to act as first-class phone citizens. You can make VoiP calls from the native contact cards, and even better, receive VoiP calls as if they were regular phone calls. This is the exact disruption we need against the traditional cellular carriers. Get ready to dump your minutes for data.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/06/callkit-voip-ios10-500x697.png\" alt=\"callkit-voip-ios10\" width=\"300\" class=\"aligncenter size-medium wp-image-794\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/06/callkit-voip-ios10-500x697.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/06/callkit-voip-ios10.png 604w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>Widgets</h2>\n<p>The Today Widgets and Notifications have been somewhat merged in a sense. Widgets now appear on the lock screen, but that&#8217;s not the only place you see widgets. 3D Touch notifications and even app icons from the home screen pop-up full fledged, interactive widgets. Opening apps is becoming less and less of a requirement, widgets from the lock screen and from notifications may be the only thing you need from an app.</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/06/ios10-widgets-500x362.jpg\" alt=\"ios10-widgets\" width=\"500\" height=\"362\" class=\"aligncenter size-medium wp-image-793\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/06/ios10-widgets-500x362.jpg 500w, https://staging1.basememara.com/wp-content/uploads/2016/06/ios10-widgets.jpg 760w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<h2>Conclusion</h2>\n<p>It is clear from this year&#8217;s WWDC that Apple envisions a new era beyond the traditional apps-in-a-grid-on-your-home-screen model. Instead, opening up native iOS services to developers allows apps to be automatically served to the user based on context. This is indeed a new app-era, which shifts from the app-centric model to a service-based model. The entry point to your app is no longer opening up your app icon anymore, but opening up native services, such as Siri, Maps, or Messages, that will surface your app logic to the user.</p>\n",
            "link": "https://staging1.basememara.com/whats-new-ios-beyond/",
            "comment_count": 0,
            "author": 2,
            "featured_media": 792,
            "terms": [
                68,
                53,
                67,
                4
            ],
            "meta": {
                "_series_part": ""
            },
            "created": "2016-06-27T11:17:01",
            "modified": "2018-10-06T14:38:50"
        },
        {
            "id": 771,
            "title": "Memory Leaks and Resource Management in Swift and iOS",
            "slug": "memory-leaks-resource-management-swift-ios",
            "type": "post",
            "excerpt": "Less code and less memory while performing the same task at hand is truly where the art comes in. In this post, I'd like to highlight some of the various pitfalls that lead to memory leaks, which inevitably result in crashes. I will also cover some tools and remedies to resolve these issues.",
            "content": "<p>Someone once told me what separates an amateur developer from a seasoned one is their footprint on the system. This is so true; less code and less memory while performing the same task at hand is truly where the art comes in. So in this sobering post, I&#8217;d like to highlight some of the various pitfalls that lead to memory leaks, which inevitably result in crashes. I will also cover some tools and remedies to resolve these issues.</p>\n<h2>Back to the Basics: Reference Counting</h2>\n<p>On the machine-level, memory is allocated for our software during runtime. Anytime an object, variable, or data is created, it&#8217;s stored in memory by the system. How does the software we write access that memory? This is where references, pointers, and handles come in, which are basically associations to the memory location. It&#8217;s the glue between our software and the machine; where the virtual and physical world meet.</p>\n<p>For example, say I create an instance and pass it around to other variables:</p>\n<pre class=\"lang:swift decode:true\">class Car {\r\n    var plate: String\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n}\r\n\r\nvar car1 = Car(plate: \"ABC123\")\r\nvar car2 = car1\r\nvar car3 = car1</pre>\n<p>The instance of &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8221; is not actually stored in &#8220;car1&#8221;. This actually doesn&#8217;t make sense when you think about it. The variable &#8220;<em>car1</em>&#8221; isn&#8217;t memory, its text in your source code that represents a location to memory. This is what a reference is, &#8220;<em>car1</em>&#8221; is actually referencing the memory location of the &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8221; instance.</p>\n<p>Even though there are 3 variables, &#8220;<em>car1</em>&#8220;, &#8220;<em>car2</em>&#8220;, and &#8220;<em>car3</em>&#8220;, there is only one instance, &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8220;. The 3 variables are referencing that same memory location of the instance. This means the reference count is 3 for that object, <em>therefore reference counting is occurring</em>.</p>\n<p>If you <em>nil</em> one variable out:</p>\n<pre class=\"lang:swift decode:true\">car3 = nil</pre>\n<p>Now the reference count is down to 2. Now if you do it again:</p>\n<pre class=\"lang:swift decode:true \">car1 = nil</pre>\n<p>The reference count is down to 1. And one more time:</p>\n<pre class=\"lang:swift decode:true \">car2 = nil</pre>\n<p>Finally, the reference count is zero and now the system deallocates the instance from memory and frees up that resource space.</p>\n<p>This is garbage collection and the algorithm Apple has chosen for its <em>Cocoa</em>, <em>Cocoa Touch</em>, and <em>Core Foundation</em> ecosystems. It seems archaic compared to tracing garbage collections algorithms, such as those used in .NET and Java. However, it is the most efficient since memory is freed right away and doesn&#8217;t suffer from the performance intensities of sweeping unused memory. These advantages are at the cost of burdening programmers with understanding memory allocation and avoiding reference cycles.</p>\n<h2>How Memory Leaks Happen</h2>\n<p>The reference count increment/decrement dance I&#8217;ve illustrated used to be a manual process back in the day with Objective-C before iOS5. It was painful; <em>retain</em>, <em>release</em>, and <em>autorelease</em> had to be manually written out by the programmer to allocate and deallocate memory. If you ever forgot or missed deallocating memory for an instance, a memory leak would easily happen.</p>\n<p>Then Apple graced us with Automatic Reference Counting (ARC), which took the load off developers having to manually do the reference counting. Reference counting didn&#8217;t go away though; it was just abstracted away by simply doing what the developer would do to manage memory. The concept of reference counting lives on and there is another memory leak trap that has to do with reference counting: <em>strong reference cycles</em>.</p>\n<h2>What is Strong Reference Cycles</h2>\n<p>Let&#8217;s add a driver to our previous example:</p>\n<pre class=\"lang:swift decode:true\">class Car {\r\n    var plate: String\r\n    var driver: Driver?\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n}\r\n\r\nclass Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n\r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n}</pre>\n<p>The &#8220;<em>Car</em>&#8221; class now has a &#8220;d<em>river</em>&#8221; property. Also, the &#8220;<em>Driver</em>&#8221; class has a property that is an array of &#8220;<em>cars</em>&#8220;. This is legitimate since a car can only have one driver, but a driver can have multiple cars.</p>\n<p>Now let&#8217;s start assigning instances:</p>\n<pre class=\"lang:swift decode:true\">var myCar: Car? = Car(plate: \"ABC123\") //Car instance reference count is 1\r\nvar myDriver: Driver? = Driver(name: \"Neo\") //Driver instance reference count is 1\r\n\r\nmyCar?.driver = myDriver //Driver instance reference count is 2\r\n\r\nif let car = myCar {\r\n    myDriver?.cars.append(car) //Car instance reference count is 2\r\n}</pre>\n<p>The reference count for the driver and car instances in memory is 2 each. Remember, only one instance is actually stored in memory; the variables and properties only hold a reference to their memory locations.</p>\n<p>Now wipe out <em>myCar</em> and <em>myDriver</em> variables and let&#8217;s see what happens to the memory deallocation:</p>\n<pre class=\"lang:swift decode:true\">myCar = nil //Car instance reference count is 1\r\nmyDriver = nil //Driver instance reference count is 1</pre>\n<p>You just chopped off access to the instances in memory: &#8220;<em>Car(plate: &#8220;ABC123&#8221;)</em>&#8221; and &#8220;<em>Driver(name: &#8220;Neo&#8221;)</em>&#8220;. Remember, even though those variables have been terminated, the actual instances still exist in memory. Why did the system not deallocate the instances? Because they have properties in them that reference each other: <em>&lt;&lt;Car instance&gt;&gt;.driver</em> and <em>&lt;&lt;Driver instance&gt;&gt;.cars[0]</em>, so their reference count is not zero. They are keeping each other alive and we have no way to get to them:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/05/reference-count.png\" alt=\"reference-count\" width=\"397\" height=\"267\" class=\"aligncenter size-full wp-image-774\" /></p>\n<p>This is a strong reference cycle; those instances will never be released from memory and are inaccessible too.</p>\n<h3>1. Resolving Strong Reference Cycles Like It&#8217;s 1999!</h3>\n<p>On a basic level, the strong reference cycle can be prevented by cleaning up all the instances in the correct order the old fashioned way. For example, before wiping out the driver variable, clear out the &#8220;<em>driver</em>&#8221; property of the car instance first:</p>\n<pre class=\"lang:swift mark:1 decode:true\">myCar?.driver = nil\r\nmyCar = nil\r\nmyDriver = nil</pre>\n<p>Problem solved! No more reference cycle and the instances are released from memory since no reference cycle exists that would keep each other alive. Likewise, you can pop off all the cars from the driver instance instead before wiping out the car variable:</p>\n<pre class=\"lang:swift decode:true \">myDriver?.cars.removeAll()\r\nmyCar = nil\r\nmyDriver = nil</pre>\n<p>Problem solved again! Just a different way.</p>\n<p>However, this is not a very elegant or scalable solution. This is just a small scenario. What happens if there are dozens of properties? And those properties are managed by other modules? How would I know when and if it&#8217;s ok to wipe out the properties and in what order?</p>\n<h3>2. Resolving Strong Reference Cycles Like a Champ!</h3>\n<p>Swift offers two keywords that break the strong reference cycle: &#8220;<em>weak</em>&#8221; and &#8220;<em>unowned</em>&#8220;. These are decorators on the properties that tell the compiler not to increment the counter for those references. Below is how we would break the strong reference cycle:</p>\n<pre class=\"lang:swift mark:3 decode:true\">class Car {\r\n    var plate: String\r\n    weak var driver: Driver?\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n\r\n    deinit {\r\n        print(\"Car deallocated\")\r\n    }\r\n}\r\n\r\nclass Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n\r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n    \r\n    deinit {\r\n        print(\"Driver deallocated\")\r\n    }\r\n}\r\n\r\nvar myCar: Car? = Car(plate: \"ABC123\") //Car instance reference count is 1\r\nvar myDriver: Driver? = Driver(name: \"Neo\") //Driver instance reference count is 1\r\n\r\nmyCar?.driver = myDriver //Driver instance reference count is STILL 1\r\n\r\nif let car = myCar {\r\n    myDriver?.cars.append(car) //Car instance reference count is 2\r\n}\r\n\r\nmyCar = nil //Car instance reference count is 1\r\nmyDriver = nil //Driver instance reference count is zero, also car instance reference count is zero since nothing else holding it</pre>\n<p>Notice the &#8220;<em>driver</em>&#8221; property of the &#8220;<em>Car</em>&#8221; class is decorated with &#8220;<em>weak</em>&#8220;. It means when this property creates a reference to an instance, do not increment the instance&#8217;s reference count. This same concept gets applied to delegates, where it should almost always be declared as &#8220;<em>weak</em>&#8220;.</p>\n<p>What about &#8220;<em>unowned</em>&#8220;? It does the same thing, except this keyword is used for non-optional properties. It implies that the property will never become <em>nil</em>. A common place this is used is with closures, where strong reference cycles lurk as well. For example, let&#8217;s add a closure property to the &#8220;<em>Driver</em>&#8221; class that outputs all the car plates they own:</p>\n<pre class=\"lang:swift decode:true\">class Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n    \r\n    lazy var allPlates: () -&gt; String = { [unowned self] in\r\n        return \"Car plates are: \"\r\n            + self.cars.map { $0.plate }.joinWithSeparator(\", \")\r\n    }\r\n\r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n}</pre>\n<p>The property called &#8220;<em>allPlates</em>&#8221; doesn&#8217;t own &#8220;<em>self</em>&#8220;. It is not possible that the property would exist without the instance, so this makes a good candidate for &#8220;<em>[unowned]</em>&#8220;.</p>\n<p><em>Note 1:</em> I could have made &#8220;<em>allPlates</em>&#8221; a function, but there are scenarios that making a closure property makes sense if subclassing is overkill; instead of subclassing, overwriting the closure property with another closure is possible.</p>\n<p><em>Note 2:</em> Do not confuse a closure property with a lazy variable:</p>\n<pre class=\"lang:swift decode:true\">    lazy var allPlates: String = {\r\n        return \"Car plates are: \"\r\n            + self.cars.map { $0.plate }.joinWithSeparator(\", \")\r\n    }()</pre>\n<p>A strong reference cycle is not possible in this case since it is only executed once and deallocates right after. In addition, if you were to add cars to the driver after this executed, calling this property would not consider new cars so this is not what we want!</p>\n<p>Another common area where<em> [unowned self]</em> is used is <em>NSNotificationCenter</em> blocks:</p>\n<pre class=\"lang:swift decode:true\">NSNotificationCenter.defaultCenter()\r\n    .addObserverForName(UIApplicationWillEnterForegroundNotification,\r\n        object: nil,\r\n        queue: nil,\r\n        usingBlock: { [unowned self] notification in\r\n            self.doSomething()\r\n        })</pre>\n<p>However, you do not have a possible strong reference cycle in &#8220;<em>UIView.animation</em>&#8221; because there&#8217;s no circular reference:</p>\n<pre class=\"lang:swift decode:true \">UIView.animateWithDuration(1.0, animations: { _ in\r\n   self.myThing.alpha = 1.0\r\n   self.doSomething()\r\n})</pre>\n<p>You should be wondering why do you have to handle strong reference cycles in <em>NSNotificationCenter</em> and not <em>UIView.animateWithDuration</em>. There are some quirks in the Cocoa framework itself that leak objects. A couple of examples are <a href=\"http://sealedabstract.com/code/nsnotificationcenter-with-blocks-considered-harmful/\" target=\"_blank\" rel=\"noopener\">NSNotificationCenter</a> and <a href=\"http://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak\" target=\"_blank\" rel=\"noopener\">WKWebKit</a>. There&#8217;s not much you can do about this except to keep your ears to the ground and listen to the community, as well as poking around popular open source libraries that have been battle tested.</p>\n<p>Finally, careful not to unnecessarily use <em>[weak/unowned self]</em>, otherwise your objects will be deallocated right away before you get a chance to use it!</p>\n<h3>3. Resolving Strong Reference Cycles Like a Jedi!</h3>\n<p>There is one more way to handle strong reference cycle that is a complete mind shift: <em>use structs over classes!</em> Value types keep a unique copy of their data, while reference types share a single copy of their data. This is in-line with Swift&#8217;s philosophy of value over reference types. Almost everything in the Swift core library is immutable, about 100-to-1 in the source code! Structs are everywhere and rarely will you see a class in Swift. In fact, the Swift team is undertaking a major update to the Foundation library, where it will wrap many <a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0069-swift-mutability-for-foundation.md\" target=\"_blank\" rel=\"noopener\">reference types to value types</a>.  Choose a struct over a class any day or you better have a good reason!</p>\n<p>Let&#8217;s update our &#8220;<em>Car</em>&#8221; and &#8220;<em>Driver</em>&#8221; classes to structs:</p>\n<pre class=\"lang:swift decode:true \">struct Car {\r\n    var plate: String\r\n    var driver: Driver?\r\n    \r\n    init(plate: String) {\r\n        self.plate = plate\r\n    }\r\n}\r\n\r\nstruct Driver {\r\n    let name: String\r\n    var cars: [Car] = []\r\n    \r\n    lazy var allPlates: () -&gt; String = {\r\n        return \"Car plates are: \"\r\n            + self.cars.map{ $0.plate }.joinWithSeparator(\", \")\r\n    }\r\n    \r\n    init(name: String) {\r\n        self.name = name\r\n    }\r\n}</pre>\n<p>That&#8217;s it! Good-bye strong reference cycles, <em>weak</em>, and <em>unowned</em>! This is because reference counts are always 1 for value types. There are no references to it. Instead, they are copied when assigned to a new variable:</p>\n<pre class=\"lang:swift decode:true \">var myCar: Car? = Car(plate: \"ABC123\") //Car instance reference count is 1\r\nvar myDriver: Driver? = Driver(name: \"Neo\") //Driver instance reference count is 1\r\n\r\nmyCar?.driver = myDriver //Driver instance is COPIED, so reference count is 1\r\n\r\nif let car = myCar {\r\n    myDriver?.cars.append(car) //Car instance is COPIED, so reference count is 1\r\n}\r\n\r\nmyCar = nil //Car instance deallocated\r\nmyDriver?.cars[0] //Car instance still lives on, it's a copy!\r\nmyDriver = nil //Driver instance deallocated</pre>\n<p>Using value types over reference type is a world of difference with Objective-C and the recommended approach from the Swift team. It&#8217;s safer because many bugs in software arise from unexpected state changes. Of course, there is a place for classes, but as <a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\" target=\"_blank\" rel=\"noopener\">Crusty says</a>: Start with a protocol, then a struct, then a class when necessary.</p>\n<p>The implications of this are vast, see be aware:</p>\n<pre class=\"lang:swift decode:true\">// Classes\r\nvar car1: Car? = Car(plate: \"ABC123\")\r\nvar car2 = car1\r\nvar car3 = car1\r\nprint(car1?.plate ?? \"\") //ABC123\r\ncar3?.plate = \"XYZ987\"\r\nprint(car2?.plate ?? \"\") //XYZ987\r\n\r\n// Structs\r\nvar car1: Car? = Car(plate: \"ABC123\")\r\nvar car2 = car1\r\nvar car3 = car1\r\nprint(car1?.plate ?? \"\") //ABC123\r\ncar3?.plate = \"XYZ987\"\r\nprint(car2?.plate ?? \"\") //ABC123</pre>\n<p>Notice with classes, updating &#8220;<em>car3</em>&#8221; affects &#8220;<em>car2</em>&#8220;. However with structs, updating &#8220;<em>car3</em>&#8221; is self contained and only affects &#8220;<em>car3</em>&#8220;. It&#8217;s very functional; inputting a value into function outputs another value without affecting the rest of the application &#8211; very modular! So before using value semantics, ensure you&#8217;re thinking value semantics and let it work for you.</p>\n<h2>Other Memory Issues</h2>\n<p>We only discussed memory leaks in this post, which is inaccessible memory that has no more pointers to it. There are other memory issues that can plague your app that you should be conscious of.</p>\n<h3>Abandoned Memory</h3>\n<p>This kind of memory still has references to it, but are wasted since they won&#8217;t ever be used again. There is no good reason to access that memory so it&#8217;s wasted resources. An example of this is pushing the same view controller over and over again without ever popping/dismissing it. Now you have duplicate view controller instance on the view hierarchy. Not only is this wasted resources, but how do you know which one has the latest changes? Fortunately, this is a rookie mistake and easy to spot.</p>\n<h3>Cached Memory</h3>\n<p>Cache is great thing; whether it be images from the web or data from a database, it saves round trips to the server. However, without proper caching mechanisms in place, they can grow large and drown the resources fast. These are also easy to spot using trivial memory profilers. Implementing caching rules for the specific needs of the apps resolve these issues fast as well. There are some basic rules that can be enforced using the native <a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSCache_Class/\" target=\"_blank\" rel=\"noopener\">NSCache</a>, or libraries that offer more sophisticated options, such as <a href=\"https://github.com/Haneke/HanekeSwift\" target=\"_blank\" rel=\"noopener\">HanekeSwift</a>.</p>\n<h2>Clean &amp; Dirty Memory</h2>\n<p>There are some hooks and triggers iOS provides that help guide you to manage memory. First we must understand there is the concept of clean and dirty memory.</p>\n<p>Clean memory is static resources that are loaded into memory that doesn&#8217;t change. They can be recreated at any time, such as system frameworks, binaries, mapped files, etc. The system gets rid of these first when under memory pressure, since it can always recreate it when needed.</p>\n<p>Dirty memory is those that are changed during runtime. The system can&#8217;t recreate these, so it has to use swap space, but iOS doesn&#8217;t have a swap mechanism. So dirty memory will always be kept in physical memory until it reach a certain limit. Then the app will be terminated and all its memory will be recycled by system.</p>\n<p>Before getting to this point, iOS will send a few warnings to your app so you can act accordingly.</p>\n<h3>UIViewController &#8211; didReceiveMemoryWarning</h3>\n<p>You&#8217;ve probably seen it before, but habitually deleted it. When you create new app or view controller, this is the template Xcode creates for you:</p>\n<pre class=\"lang:swift decode:true\">class ViewController: UIViewController {\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n        // Do any additional setup after loading the view, typically from a nib.\r\n    }\r\n\r\n    override func didReceiveMemoryWarning() {\r\n        super.didReceiveMemoryWarning()\r\n        // Dispose of any resources that can be recreated.\r\n    }\r\n}</pre>\n<p>See the &#8220;<em>didReceiveMemoryWarning</em>&#8221; function? That&#8217;s where iOS will trigger it&#8217;s warning for your view controller. Ahhhh, that&#8217;s what that&#8217;s for 🙂 . What you&#8217;ll want to do there is purge any of the view controller&#8217;s resources you don&#8217;t necessarily need any more, but can recreate later if so. This is also a good place to purge some cache or database resources so it can be recreated later when needed as well. This is why it is good to create everything in a lazy fashion, so resources are requested as needed, and recreated as needed.</p>\n<h3>AppDelegate &#8211; applicationDidReceiveMemoryWarning</h3>\n<p>Implement the <em>applicationDidReceiveMemoryWarning</em> method of your application delegate. This is where you will set any app-wide references to objects it can safely free to <em>nil</em>. Also in the application delegate, make use of the <em>applicationDidEnterBackground </em>to free any resource so your app isn&#8217;t first line to be terminate from the list of background apps.</p>\n<h3>NSNotificationCenter &#8211; UIApplicationDidReceiveMemoryWarningNotification</h3>\n<p>Subscribe to the <em>NSNotificationCenter</em> if this suits better to free up resources:</p>\n<pre class=\"lang:swift decode:true\">NSNotificationCenter.defaultCenter()\r\n    .addObserverForName(UIApplicationDidReceiveMemoryWarningNotification,\r\n        object: nil,\r\n        queue: NSOperationQueue.mainQueue(),\r\n        usingBlock: { [unowned self] notification in\r\n            // Clean up\r\n        })</pre>\n<p>With one or more of these in place, you can use the simulator to trigger a memory warning by choosing <em>Hardware &gt; Simulate Memory Warning</em>.</p>\n<h2>Debugging</h2>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/CommonMemoryProblems.html#//apple_ref/doc/uid/TP40004652-CH91-SW1\" target=\"_blank\" rel=\"noopener\">Xcode Instruments</a> is actually quite useful. It will help you monitor memory usage, find abandoned memory, find memory leaks, find zombies, and more.</p>\n<p>To see this in action, <a href=\"https://github.com/iosmentor-io/swift-strong-reference-cycle-sample\" target=\"_blank\" rel=\"noopener\">clone this sample code</a> that has a strong reference cycle in it. Once you&#8217;ve opened it in Xcode, go to <em>Product &gt; Profile</em>. This will open up the Instruments template list, choose &#8220;<em>Leaks</em>&#8220;:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_351-500x381.png\" alt=\"CapturFiles_351\" width=\"500\" height=\"381\" class=\"aligncenter size-medium wp-image-779\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_351-500x381.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_351-768x585.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_351-1024x779.png 1024w, https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_351.png 1532w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>Click the record button and this will run the app in the profiler. Next, click the button I placed in the app labeled &#8220;<em>Trigger Strong Reference Cycle</em>&#8220;. The profiler will display green checkmarks, then boom! A red X will appear to indicate there is a strong reference cycle. It may take awhile for the profiler to catch up, but once you see the red X, stop the recording and click it.</p>\n<p>You will see the backtrace highlighting the leak and associated classes. You can even select <em>Details &gt; Cycle &amp; Roots</em> and see a nice reference graph:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_350-500x360.png\" alt=\"Xcode Instruments Swift\" width=\"500\" height=\"360\" class=\"aligncenter size-medium wp-image-780\" srcset=\"https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_350-500x360.png 500w, https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_350-768x552.png 768w, https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_350-1024x737.png 1024w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>&nbsp;</p>\n<p>For an actual production app, be sure to eventually use a real device instead of the simulator since low-level details may not be the same.</p>\n<h2>Conclusion</h2>\n<p>Swift is a gorgeous language and it also has smarts. It manages memory across the board. In Objective-C for example, Automatic Reference Counting (ARC) is not supported in procedural-C code and low-level API&#8217;s like Core Graphics. These have been handled in Swift though, so the huge memory leaks that a programmer can have in Objective-C are impossible in Swift. This alone is a big win for Swift. However, this doesn&#8217;t mean we&#8217;re home-free for any language or platform.</p>\n<p><em><strong>Happy Coding!!</strong></em></p>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html\" target=\"_blank\" rel=\"noopener\">The Swift Programming Language: Automatic Reference Counting</a></li>\n<li><a href=\"http://krakendev.io/blog/weak-and-unowned-references-in-swift\" target=\"_blank\" rel=\"noopener\">Weak, Strong, Unowned, Oh My!</a></li>\n<li><a href=\"https://realm.io/news/hector-matos-memory-management/\" target=\"_blank\" rel=\"noopener\">The Weak, the Strong, and the Unowned</a></li>\n<li><a href=\"https://digitalleaves.com/blog/2015/05/demystifying-retain-cycles-in-arc/\" target=\"_blank\" rel=\"noopener\">Demystifying Retain Cycles in ARC</a></li>\n<li><a href=\"https://developer.apple.com/videos/play/wwdc2012/242/\" target=\"_blank\" rel=\"noopener\">WWDC 2012: iOS App Performance: Memory</a></li>\n</ul>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n",
            "link": "https://staging1.basememara.com/memory-leaks-resource-management-swift-ios/",
            "comment_count": 5,
            "author": 2,
            "featured_media": 777,
            "terms": [
                80,
                53,
                66,
                50,
                55,
                47
            ],
            "meta": {
                "_series_part": "5"
            },
            "created": "2016-05-24T10:19:06",
            "modified": "2018-09-30T11:49:10"
        },
        {
            "id": 41294,
            "title": "So Swift, So Clean Architecture for iOS",
            "slug": "swift-clean-architecture",
            "type": "post",
            "excerpt": "The topic of iOS app architecture has evolved a long way from MVC. Unfortunately, the conversation becomes a frameworks and patterns war. The reality is: Rx is a framework; MVVM is a presentation pattern; and so on. Frameworks and patterns always come and go, but architectures are timeless. In this post, we will examine the Clean Architecture for building scalable apps in iOS.",
            "content": "<blockquote><p>You are not paid to code; you are paid to create solutions.</p></blockquote>\n<p>The topic of iOS app architecture has evolved a long way from MVC. Unfortunately, the conversation becomes a frameworks and patterns war. The reality is: Rx is a framework; MVVM is a presentation pattern; and so on. Frameworks and patterns always come and go, but architectures are timeless. In this post, we will examine the Clean Architecture for building scalable apps in iOS.</p>\n<h2>What About Bob?</h2>\n<p>The Clean Architecture was coined by Uncle Bob almost 20 years ago. It is independent of platforms, frameworks, databases, or UI. It is testable. It&#8217;s a way of life (ok, software life). Sound good?</p>\n<p>If you have an hour to spare for learning, I highly suggest watching this lecture called <strong>The Principles of Clean Architecture by Uncle Bob Martin</strong> <em>(skip to 10:00 if you don&#8217;t want the biology lesson, although still interesting)</em>:</p>\n<p><iframe width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/o_TH-Y78tt4?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></p>\n<h2>A Thing About Screaming Architecture</h2>\n<p>Regarding project structure, let&#8217;s first get the feature vs. type debate out the way. The application should scream what it does without any IDE or explanation at all. Anyone should be able to open up the file system and know exactly what the application does. Take a look at the two apps below:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/feature-vs-type-project.png\" alt=\"\" width=\"266\" height=\"568\" class=\"aligncenter size-full wp-image-41299\" /></p>\n<p>In the first app, all it tells me is that it&#8217;s an MVC project and has something to do with products and users. Why do I have to know MVC to figure out what it does? I have to compile and run it in my mind to figure out what it does. What&#8217;s worse, I have to expand all the folders to start investigating. In a complex app, imagine hundreds of controllers or views polluting your eyes. Maintaining and debugging are nightmare too, jumping back and forth between folders is like a game of ping pong.</p>\n<p>Now take a look at the second app. Right off the bat, I can tell it lists products, displays it, and shows a user&#8217;s profile. I don&#8217;t have to expand the folders to know what it is. I don&#8217;t have to know what framework or pattern it&#8217;s using. I don&#8217;t even have to know what language it&#8217;s written in!</p>\n<p>Another way to look at it is would you rather organize drawers by just throwing everything into three drawers, or is it better to have several small well-defined and well-labeled drawers?</p>\n<p>Ok let&#8217;s move on&#8230;</p>\n<h2>The Anatomy of the Clean Architecture</h2>\n<p>There are actually many variations and flavours of the Clean Architecture. You&#8217;ve probably heard of <a href=\"https://mutualmobile.com/posts/meet-viper-fast-agile-non-lethal-ios-architecture-framework\" target=\"_blank\" rel=\"noopener\">VIPER</a> or <a href=\"https://clean-swift.com\" target=\"_blank\" rel=\"noopener\">Clean Swift</a>. When you jump into other platforms like Android or .NET, there even exists more flavours. The one I will show you in this post was <em>heavily</em> inspired by Clean Swift. I put my own spin to it after battle-testing it and maintaining it across several teams, platforms, and environments.</p>\n<p>To get started, we have to get some terminology out the way. Below are a list of components in the architecture:</p>\n<ul>\n<li><strong>View:</strong> The interface where user interactions occur, such as the <code>Storyboard</code> or <code>XIB</code>.</li>\n<li><strong>Controller:</strong> The layer which binds the view to code, this being the <code>UIViewController</code> in our case.</li>\n<li><strong>Interactor:</strong> The business logic layer where the controller must send requests through.</li>\n<li><strong>Presenter:</strong> The layer that formats the response from the Interactor and sends it back to the controller.</li>\n<li><strong>Router:</strong> The layer that transports the user to another use case scene, usually an event that occurs in the controller.</li>\n</ul>\n<p>The core pieces of the architecture is the <em>Controller, Interactor, and Presenter</em>. The important thing to notice is that it has a uni-directional flow! This tremendously reduces complexity and makes it easy to manage. Since a picture is worth a thousand words, I have summed up the entire architecture in a single diagram:</p>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2-500x518.png\" alt=\"\" width=\"500\" height=\"518\" class=\"aligncenter wp-image-41346 size-medium\" /></p>\n<p>Follow the flow below to understand how the architecture works:</p>\n<ol>\n<li>User interacts with <strong><em>View</em></strong></li>\n<li><strong><em>Controller</em></strong> event fires, builds a request model, and calls the <strong><em>Interactor</em></strong></li>\n<li>The <strong><em>Interactor</em></strong> calls the underlying core library with all your workers to access the data (could even subscribe to an observable here if needed)</li>\n<li>The <strong><em>Interactor</em></strong> receives data from the worker and wraps it in a response model to send to the <strong><em>Presenter</em></strong></li>\n<li>The <strong><em>Presenter</em></strong> calls app-level helpers if needed to format or localize the response and builds a view model to send to the <strong><em>Controller</em></strong></li>\n<li>The <strong><em>Controller</em></strong> receives the view model in a function and binds it to the <strong><em>View</em></strong></li>\n<li>Repeat the cycle&#8230;</li>\n</ol>\n<p>Also notice the architecture is cross-platform. It doesn&#8217;t care that the view is served by an iOS app, Android app, web browser, or even a REST API endpoint. Once it gets past the view, everything should be identical across platforms. In fact, an iOS and Android app can be eerily similar with just the <code>Storyboard</code> vs <code>Layout</code> being the difference. Even the iOS <code>UIViewController</code> and Android <code>Activity</code> code would almost be identical except for the binding logic. This makes collaboration and bug fixing tight between teams!</p>\n<h2>The Details</h2>\n<p><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/show_me_the_code.jpg\" alt=\"\" width=\"306\" height=\"165\" class=\"aligncenter size-full wp-image-41304\" /></p>\n<p>It&#8217;s time to see how this plays out in code. We can do this by first examining the protocols that is the blueprint for a use case; this is important so the boundaries are defined and components are decoupled:</p>\n<pre class=\"lang:swift decode:true\">protocol ListProductsDisplayable: class { // View Controller\r\n    func displayFetchedProducts(with viewModel: ListProductsModels.ViewModel)\r\n    func display(error: AppModels.Error)\r\n}\r\n\r\nprotocol ListProductsBusinessLogic { // Interactor\r\n    func fetchProducts(with request: ListProductsModels.FetchRequest)\r\n}\r\n\r\nprotocol ListProductsPresentable { // Presenter\r\n    func presentFetchedProducts(for response: ListProductsModels.Response)\r\n    func presentFetchedProducts(error: DataError)\r\n}\r\n\r\nprotocol ListProductsRoutable: AppRoutable { // Router\r\n    func showProduct(for id: Int)\r\n}</pre>\n<p>Here&#8217;s what happens when the controller loads via <code>viewDidLoad</code>: <em>interactor.fetchProducts &gt; presenter.presentFetchedProducts &gt; controller.displayFetchedProducts</em>. Do you see it yet? The cycle is there. Let&#8217;s take another look&#8230;</p>\n<p><em>Controller:</em></p>\n<pre class=\"lang:swift decode:true\">class ListProductsViewController: UIViewController {\r\n\r\n    private lazy var interactor: ListProductsBusinessLogic = ListProductsInteractor(\r\n        presenter: ListProductsPresenter(viewController: self),\r\n        productsWorker: ProductsWorker(store: ProductsMemoryStore())\r\n    )\r\n    \r\n    private lazy var router: ListProductsRoutable = ListProductsRouter(\r\n        viewController: self\r\n    )\r\n\r\n    private var viewModel: ListProductsModels.ViewModel?\r\n\r\n    override func viewDidLoad() {\r\n        super.viewDidLoad()\r\n\r\n        interactor.fetchProducts(\r\n            with: ListProductsModels.FetchRequest()\r\n        )\r\n    }\r\n}\r\n\r\nextension ListProductsViewController: ListProductsDisplayable {\r\n    \r\n    func displayFetchedProducts(with viewModel: ListProductsModels.ViewModel) {\r\n        self.viewModel = viewModel\r\n        tableView.reloadData()\r\n    }    \r\n\r\n    func display(error: AppModels.Error) {\r\n        let alertController = UIAlertController(\r\n            title: error.title,\r\n            message: error.message,\r\n            preferredStyle: .alert\r\n        )\r\n        \r\n        alertController.addAction(\r\n            UIAlertAction(title: \"OK\", style: .default, handler: nil)\r\n        )\r\n        \r\n        present(alertController, animated: true, completion: nil)\r\n    }\r\n}\r\n\r\nextension ListProductsViewController: UITableViewDelegate {\r\n    \r\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\r\n        guard let model = viewModel?.products[indexPath.row] else { return }\r\n        router.showProduct(for: model.id)\r\n    }\r\n}</pre>\n<p>The controller creates the instances to the interactor, injects the presenter, and also creates the router. When loaded, it creates a request model and calls the interactor:</p>\n<pre class=\"lang:swift decode:true\">struct ListProductsInteractor {\r\n    private let presenter: ListProductsPresentable\r\n    private let productsWorker: ProductsWorkerType\r\n    \r\n    init(presenter: ListProductsPresentable, productsWorker: ProductsWorkerType) {\r\n        self.presenter = presenter\r\n        self.productsWorker = productsWorker\r\n    }\r\n}\r\n\r\nextension ListProductsInteractor: ListProductsBusinessLogic {\r\n    \r\n    func fetchProducts(with request: ListProductsModels.FetchRequest) {\r\n        productsWorker.fetch {\r\n            guard let value = $0.value, $0.isSuccess else {\r\n                return self.presenter.presentFetchedProducts(error: $0.error ?? .unknownReason(nil))\r\n            }\r\n            \r\n            self.presenter.presentFetchedProducts(\r\n                for: ListProductsModels.Response(products: value)\r\n            )\r\n        }\r\n    }\r\n}\r\n</pre>\n<p>The <code>fetchProducts</code> function in the interactor calls the injected <code>productsWorker</code> (DI was left out for clarity, see my other post <a href=\"http://staging1.basememara.com/swift-protocol-oriented-dependency-injection/\" target=\"_blank\" rel=\"noopener\">Swifty Dependency Injection</a> for that topic). Underneath, it will call the appropriate storage, whether it be Core Data, Realm, or even a file system&#8230; the architecture doesn&#8217;t care and could be swapped out without affecting the cycle! When the data returns from the data storage asynchronously, it will wrap it in a response model and send it to the presenter:</p>\n<pre class=\"lang:swift decode:true \">struct ListProductsPresenter: ListProductsPresentable {\r\n    private weak var viewController: ListProductsDisplayable?\r\n    private let currencyFormatter: NumberFormatter\r\n    \r\n    init(viewController: ListProductsDisplayable?) {\r\n        self.viewController = viewController\r\n        self.currencyFormatter = NumberFormatter()\r\n        self.currencyFormatter.numberStyle = .currency\r\n    }\r\n}\r\n\r\nextension ListProductsPresenter {\r\n    \r\n    func presentFetchedProducts(for response: ListProductsModels.Response) {\r\n        let viewModel = ListProductsModels.ViewModel(\r\n            products: response.products.map {\r\n                ListProductsModels.ProductViewModel(\r\n                    id: $0.id,\r\n                    name: $0.name,\r\n                    content: $0.content,\r\n                    price: currencyFormatter.string(from: NSNumber(value: Float($0.priceCents) / 100)) ?? \"\\($0.priceCents / 100)\"\r\n                )\r\n            }\r\n        )\r\n        \r\n        viewController?.displayFetchedProducts(with: viewModel)\r\n    }\r\n    \r\n    func presentFetchedProducts(error: DataError) {\r\n        // Handle and parse error\r\n        let viewModel = AppModels.Error(\r\n            title: NSLocalizedString(\"products.error.title\", \"Title for product error\"),\r\n            message: String(format: NSLocalizedString(\"products.error.message\", \"Message for product error\"), error)\r\n        )\r\n        \r\n        viewController?.display(error: viewModel)\r\n    }\r\n}</pre>\n<p>The presenter will convert the response into a view model, applying any formatting and localization, and call the controller function to display it. The view model properties are almost always strings because the view will just display. If the interactor gave the presenter an error, it will even create a view model out of the error and let the controller display it.</p>\n<p>The models are encapsulated in an enum and are only relevant to its own use case. You do not cross boundaries without being wrapped in one of the models:</p>\n<pre class=\"lang:swift decode:true \">enum ListProductsModels {\r\n    \r\n    struct FetchRequest {\r\n        \r\n    }\r\n    \r\n    struct SearchRequest {\r\n        let text: String\r\n    }\r\n    \r\n    struct Response {\r\n        let products: [ProductType]\r\n    }\r\n    \r\n    struct ViewModel {\r\n        let products: [ProductViewModel]\r\n    }\r\n    \r\n    struct ProductViewModel {\r\n        let id: Int\r\n        let name: String\r\n        let content: String\r\n        let price: String\r\n    }\r\n}</pre>\n<p>Finally the router in case the controller has to send the user to another use case:</p>\n<pre class=\"lang:swift decode:true\">struct ListProductsRouter {\r\n    weak var viewController: UIViewController?\r\n    \r\n    init(viewController: UIViewController?) {\r\n        self.viewController = viewController\r\n    }\r\n}\r\n\r\nextension ListProductsRouter: ListProductsRoutable {\r\n    \r\n    func showProduct(for id: Int) {\r\n        let storyboard = UIStoryboard(name: \"ShowProduct\", bundle: nil)\r\n        \r\n        guard let controller = storyboard.instantiateInitialViewController()) as? ShowProductViewController\r\n            else { return assertionFailure(\"Invalid controller for storyboard \\(storyboard).\") }\r\n\r\n        controller.productID = id\r\n\r\n        viewController?.present(controller, animated: true)\r\n    }\r\n}</pre>\n<p>This way, the the controller is decoupled from the routing decisions and can be used from the controller as: <code>router.showProduct(for: productID)</code>.</p>\n<h2>Conclusion</h2>\n<p>The Clean Architecture is flexible, scalable, and maintainable. Although it is more verbose than other architecture designs, it is necessary so components are not tightly coupled. That means everything must reference each other by its protocol, not its concrete types. And when crossing boundaries, data must be wrapped in request / response models, or again components will be coupled. In a future post, I will discuss how to unit test the whole stack.</p>\n<p>See a <a href=\"https://github.com/iosmentor-io/Swift-Clean-Architecture\" target=\"_blank\" rel=\"noopener\">working example of this Clean Architecture</a> to try it out for yourself.</p>\n<p><em><strong>HAPPY CODING!!</strong></em></p>\n<hr />\r\n<h2 style=\"text-align: center;\">FREE Masterclass Webinar: Creating Cross-Platform Swift Frameworks for iOS, watchOS, &amp; tvOS!</h2>\r\n<p>An essential part of creating scalable apps is code organization. Watch my updated \"Creating Cross-Platform Swift Frameworks\" webinar; it will change the way you build iOS apps! <a href=\"https://iosmentor.io/webinars/swift-frameworks/\" target=\"_blank\" rel=\"noopener\"><img src=\"http://staging1.basememara.com/wp-content/uploads/2018/04/swift-framework-webinar.png\" alt=\"\" width=\"406\" height=\"257\" class=\"aligncenter size-full wp-image-41351\" /></a></p>\n",
            "link": "https://staging1.basememara.com/swift-clean-architecture/",
            "comment_count": 10,
            "author": 2,
            "featured_media": 41346,
            "terms": [
                80,
                79,
                53,
                14,
                62,
                50,
                55
            ],
            "meta": {
                "_series_part": "1"
            },
            "created": "2018-04-22T22:03:20",
            "modified": "2018-09-30T11:47:51"
        }
    ],
    "authors": [
        {
            "id": 2,
            "name": "Basem Emara",
            "link": "https://staging1.basememara.com",
            "avatar": "https://secure.gravatar.com/avatar/8def0d36f56d3e6720a44e41bf6f9a71?s=96&d=mm&r=g",
            "description": "Basem is a mobile and software IT professional with over 12 years of experience as an architect, developer, and consultant for dozens of projects that span over various industries for Fortune 500 enterprises, government agencies, and startups. In 2014, Basem brought his vast knowledge and experiences to Swift and helped pioneer the language to build scalable enterprise iOS &amp; watchOS apps, later providing mentorship courses at <a href=\"https://iosmentor.io\">https://iosmentor.io</a>.",
            "created": "2015-02-02T03:39:52",
            "modified": "2018-10-06T14:43:53"
        }
    ],
    "media": [
        {
            "id": 41287,
            "link": "https://staging1.basememara.com/wp-content/uploads/2018/04/swift-dependency-injection.jpg",
            "width": 3569,
            "height": 2899,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2018/04/swift-dependency-injection-500x406.jpg",
            "thumbnail_width": 500,
            "thumbnail_height": 406
        },
        {
            "id": 41397,
            "link": "https://staging1.basememara.com/wp-content/uploads/2018/09/Theme-Screenshot.png",
            "width": 2194,
            "height": 1554,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2018/09/Theme-Screenshot-500x354.png",
            "thumbnail_width": 500,
            "thumbnail_height": 354
        },
        {
            "id": 20745,
            "link": "https://staging1.basememara.com/wp-content/uploads/2017/07/localization.jpg",
            "width": 300,
            "height": 284,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2017/07/localization.jpg",
            "thumbnail_width": 300,
            "thumbnail_height": 284
        },
        {
            "id": 41258,
            "link": "https://staging1.basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png",
            "width": 414,
            "height": 306,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2018/04/AppDelegate-Responsibilties.png",
            "thumbnail_width": 414,
            "thumbnail_height": 306
        },
        {
            "id": 675,
            "link": "https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330.png",
            "width": 1218,
            "height": 512,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2016/03/CapturFiles_330-500x210.png",
            "thumbnail_width": 500,
            "thumbnail_height": 210
        },
        {
            "id": 166,
            "link": "https://staging1.basememara.com/wp-content/uploads/2015/03/CapturFiles_35.png",
            "width": 438,
            "height": 162,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2015/03/CapturFiles_35-300x111.png",
            "thumbnail_width": 300,
            "thumbnail_height": 111
        },
        {
            "id": 161,
            "link": "https://staging1.basememara.com/wp-content/uploads/2015/03/kendo-mobile-geo-170x300.png",
            "width": 170,
            "height": 300,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2015/03/kendo-mobile-geo-170x300-170x300.png",
            "thumbnail_width": 170,
            "thumbnail_height": 300
        },
        {
            "id": 141,
            "link": "https://staging1.basememara.com/wp-content/uploads/2015/03/kendo-media-player-169x300.png",
            "width": 169,
            "height": 300,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2015/03/kendo-media-player-169x300-169x300.png",
            "thumbnail_width": 169,
            "thumbnail_height": 300
        },
        {
            "id": 123,
            "link": "https://staging1.basememara.com/wp-content/uploads/2015/03/JS6_Logo-2.png",
            "width": 200,
            "height": 200,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2015/03/JS6_Logo-2.png",
            "thumbnail_width": 200,
            "thumbnail_height": 200
        },
        {
            "id": 277,
            "link": "https://staging1.basememara.com/wp-content/uploads/2015/03/maxresdefault.jpg",
            "width": 1280,
            "height": 800,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2015/03/maxresdefault-300x188.jpg",
            "thumbnail_width": 300,
            "thumbnail_height": 188
        },
        {
            "id": 1739,
            "link": "https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png",
            "width": 391,
            "height": 508,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2017/01/CapturFiles_125.png",
            "thumbnail_width": 391,
            "thumbnail_height": 508
        },
        {
            "id": 26240,
            "link": "https://staging1.basememara.com/wp-content/uploads/2017/07/Xcode-Storyboard-Feature-Based.png",
            "width": 442,
            "height": 564,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2017/07/Xcode-Storyboard-Feature-Based.png",
            "thumbnail_width": 442,
            "thumbnail_height": 564
        },
        {
            "id": 5576,
            "link": "https://staging1.basememara.com/wp-content/uploads/2017/03/delegation1.jpg",
            "width": 573,
            "height": 239,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2017/03/delegation1-500x209.jpg",
            "thumbnail_width": 500,
            "thumbnail_height": 209
        },
        {
            "id": 792,
            "link": "https://staging1.basememara.com/wp-content/uploads/2016/06/ios-10-home-app.jpg",
            "width": 800,
            "height": 534,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2016/06/ios-10-home-app-500x334.jpg",
            "thumbnail_width": 500,
            "thumbnail_height": 334
        },
        {
            "id": 777,
            "link": "https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_349.png",
            "width": 1428,
            "height": 1060,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2016/05/CapturFiles_349-500x371.png",
            "thumbnail_width": 500,
            "thumbnail_height": 371
        },
        {
            "id": 41346,
            "link": "https://staging1.basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2.png",
            "width": 500,
            "height": 518,
            "thumbnail_link": "https://staging1.basememara.com/wp-content/uploads/2018/04/Clean-Architecture-Cycle-2-500x518.png",
            "thumbnail_width": 500,
            "thumbnail_height": 518
        }
    ],
    "terms": [
        {
            "id": 80,
            "parent": 0,
            "name": "Building a Scalable App",
            "slug": "build-scalable-app",
            "taxonomy": "series",
            "count": 8
        },
        {
            "id": 62,
            "parent": 0,
            "name": "protocol-oriented-programming",
            "slug": "protocol-oriented-programming",
            "taxonomy": "post_tag",
            "count": 9
        },
        {
            "id": 50,
            "parent": 0,
            "name": "swift",
            "slug": "swift",
            "taxonomy": "post_tag",
            "count": 37
        },
        {
            "id": 55,
            "parent": 0,
            "name": "Swift",
            "slug": "swift",
            "taxonomy": "category",
            "count": 29
        },
        {
            "id": 53,
            "parent": 0,
            "name": "ios",
            "slug": "ios",
            "taxonomy": "post_tag",
            "count": 19
        },
        {
            "id": 81,
            "parent": 0,
            "name": "uikit",
            "slug": "uikit",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 77,
            "parent": 0,
            "name": "localization",
            "slug": "localization",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 47,
            "parent": 0,
            "name": "xcode",
            "slug": "xcode",
            "taxonomy": "post_tag",
            "count": 18
        },
        {
            "id": 56,
            "parent": 0,
            "name": "android",
            "slug": "android",
            "taxonomy": "post_tag",
            "count": 5
        },
        {
            "id": 61,
            "parent": 0,
            "name": "carthage",
            "slug": "carthage",
            "taxonomy": "post_tag",
            "count": 4
        },
        {
            "id": 52,
            "parent": 0,
            "name": "cocoapods",
            "slug": "cocoapods",
            "taxonomy": "post_tag",
            "count": 4
        },
        {
            "id": 64,
            "parent": 0,
            "name": "Featured",
            "slug": "featured",
            "taxonomy": "category",
            "count": 6
        },
        {
            "id": 2,
            "parent": 0,
            "name": ".NET",
            "slug": "net",
            "taxonomy": "category",
            "count": 11
        },
        {
            "id": 41,
            "parent": 0,
            "name": "c#",
            "slug": "c",
            "taxonomy": "post_tag",
            "count": 2
        },
        {
            "id": 10,
            "parent": 0,
            "name": "sitefinity",
            "slug": "sitefinity",
            "taxonomy": "post_tag",
            "count": 4
        },
        {
            "id": 7,
            "parent": 0,
            "name": "Web",
            "slug": "web",
            "taxonomy": "category",
            "count": 17
        },
        {
            "id": 37,
            "parent": 0,
            "name": "web-api",
            "slug": "web-api",
            "taxonomy": "post_tag",
            "count": 2
        },
        {
            "id": 11,
            "parent": 0,
            "name": "aspnet-mvc",
            "slug": "aspnet-mvc",
            "taxonomy": "post_tag",
            "count": 6
        },
        {
            "id": 38,
            "parent": 0,
            "name": "entity-framework",
            "slug": "entity-framework",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 32,
            "parent": 0,
            "name": "css",
            "slug": "css",
            "taxonomy": "post_tag",
            "count": 2
        },
        {
            "id": 3,
            "parent": 0,
            "name": "JavaScript",
            "slug": "javascript",
            "taxonomy": "category",
            "count": 37
        },
        {
            "id": 8,
            "parent": 0,
            "name": "kendo-ui",
            "slug": "kendo-ui",
            "taxonomy": "post_tag",
            "count": 16
        },
        {
            "id": 27,
            "parent": 0,
            "name": "node.js",
            "slug": "node-js",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 26,
            "parent": 0,
            "name": "geolocation",
            "slug": "geolocation",
            "taxonomy": "post_tag",
            "count": 4
        },
        {
            "id": 12,
            "parent": 0,
            "name": "google-map",
            "slug": "google-map",
            "taxonomy": "post_tag",
            "count": 3
        },
        {
            "id": 4,
            "parent": 0,
            "name": "Mobile",
            "slug": "mobile",
            "taxonomy": "category",
            "count": 33
        },
        {
            "id": 9,
            "parent": 0,
            "name": "requirejs",
            "slug": "requirejs",
            "taxonomy": "post_tag",
            "count": 9
        },
        {
            "id": 15,
            "parent": 0,
            "name": "responsive-design",
            "slug": "responsive-design",
            "taxonomy": "post_tag",
            "count": 2
        },
        {
            "id": 14,
            "parent": 0,
            "name": "mvvm",
            "slug": "mvvm",
            "taxonomy": "post_tag",
            "count": 7
        },
        {
            "id": 19,
            "parent": 0,
            "name": "ecmascript-6",
            "slug": "ecmascript-6",
            "taxonomy": "post_tag",
            "count": 4
        },
        {
            "id": 22,
            "parent": 0,
            "name": "angularjs",
            "slug": "angularjs",
            "taxonomy": "post_tag",
            "count": 3
        },
        {
            "id": 44,
            "parent": 0,
            "name": "typescript",
            "slug": "typescript",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 72,
            "parent": 0,
            "name": "wordpress",
            "slug": "wordpress",
            "taxonomy": "post_tag",
            "count": 2
        },
        {
            "id": 78,
            "parent": 0,
            "name": "router",
            "slug": "router",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 74,
            "parent": 0,
            "name": "delegates",
            "slug": "delegates",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 76,
            "parent": 0,
            "name": "Swifty Delegates",
            "slug": "swifty-delegates",
            "taxonomy": "series",
            "count": 2
        },
        {
            "id": 73,
            "parent": 0,
            "name": "threads",
            "slug": "threads",
            "taxonomy": "post_tag",
            "count": 4
        },
        {
            "id": 68,
            "parent": 0,
            "name": "ai",
            "slug": "ai",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 67,
            "parent": 0,
            "name": "iot",
            "slug": "iot",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 66,
            "parent": 0,
            "name": "memory",
            "slug": "memory",
            "taxonomy": "post_tag",
            "count": 1
        },
        {
            "id": 79,
            "parent": 0,
            "name": "clean-architecture",
            "slug": "clean-architecture",
            "taxonomy": "post_tag",
            "count": 2
        }
    ]
}
